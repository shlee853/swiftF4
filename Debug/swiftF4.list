
swiftF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f40  08001f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f40  08001f40  00011f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f48  08001f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f4c  08001f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e8  2000000c  08001f5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  08001f5c  000210f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000416a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000114d  00000000  00000000  000241e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000500  00000000  00000000  00025338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ae  00000000  00000000  00025838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015422  00000000  00000000  00025be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bd8  00000000  00000000  0003b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083474  00000000  00000000  00040be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000125c  00000000  00000000  000c4054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c52b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001ee0 	.word	0x08001ee0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001ee0 	.word	0x08001ee0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <_DoInit+0x8c>)
 80004dc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2203      	movs	r2, #3
 80004e2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2203      	movs	r2, #3
 80004e8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <_DoInit+0x90>)
 80004ee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <_DoInit+0x94>)
 80004f4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2202      	movs	r2, #2
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_DoInit+0x90>)
 8000514:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <_DoInit+0x98>)
 800051a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2220      	movs	r2, #32
 8000520:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2200      	movs	r2, #0
 8000526:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2202      	movs	r2, #2
 8000532:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3307      	adds	r3, #7
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <_DoInit+0x9c>)
 800053a:	6810      	ldr	r0, [r2, #0]
 800053c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <_DoInit+0xa0>)
 8000542:	6810      	ldr	r0, [r2, #0]
 8000544:	6018      	str	r0, [r3, #0]
 8000546:	8891      	ldrh	r1, [r2, #4]
 8000548:	7992      	ldrb	r2, [r2, #6]
 800054a:	8099      	strh	r1, [r3, #4]
 800054c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2220      	movs	r2, #32
 8000552:	719a      	strb	r2, [r3, #6]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000028 	.word	0x20000028
 8000564:	08001ef8 	.word	0x08001ef8
 8000568:	200000d0 	.word	0x200000d0
 800056c:	200010d0 	.word	0x200010d0
 8000570:	08001f04 	.word	0x08001f04
 8000574:	08001f08 	.word	0x08001f08

08000578 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	429a      	cmp	r2, r3
 800059a:	d905      	bls.n	80005a8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
 80005a6:	e007      	b.n	80005b8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	6939      	ldr	r1, [r7, #16]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	1acb      	subs	r3, r1, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	3b01      	subs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	69fa      	ldr	r2, [r7, #28]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	bf28      	it	cs
 80005c6:	4613      	movcs	r3, r2
 80005c8:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80005ca:	69fa      	ldr	r2, [r7, #28]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4293      	cmp	r3, r2
 80005d0:	bf28      	it	cs
 80005d2:	4613      	movcs	r3, r2
 80005d4:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	69fa      	ldr	r2, [r7, #28]
 80005e0:	68b9      	ldr	r1, [r7, #8]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fc6e 	bl	8001ec4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	4413      	add	r3, r2
 80005ee:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	4413      	add	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	4413      	add	r3, r2
 8000606:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	429a      	cmp	r2, r3
 8000610:	d101      	bne.n	8000616 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1b5      	bne.n	800058e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8000622:	69bb      	ldr	r3, [r7, #24]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	d90e      	bls.n	800066e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	4413      	add	r3, r2
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fc31 	bl	8001ec4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8000662:	69fa      	ldr	r2, [r7, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	441a      	add	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800066c:	e01a      	b.n	80006a4 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	4413      	add	r3, r2
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fc20 	bl	8001ec4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	6858      	ldr	r0, [r3, #4]
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	4413      	add	r3, r2
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	4619      	mov	r1, r3
 800069a:	f001 fc13 	bl	8001ec4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	60da      	str	r2, [r3, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d808      	bhi.n	80006da <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	4413      	add	r3, r2
 80006d4:	3b01      	subs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	e004      	b.n	80006e4 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80006e4:	697b      	ldr	r3, [r7, #20]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	371c      	adds	r7, #28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000712:	4413      	add	r3, r2
 8000714:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d029      	beq.n	8000772 <SEGGER_RTT_WriteNoLock+0x7e>
 800071e:	2b02      	cmp	r3, #2
 8000720:	d82e      	bhi.n	8000780 <SEGGER_RTT_WriteNoLock+0x8c>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <SEGGER_RTT_WriteNoLock+0x38>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d013      	beq.n	8000752 <SEGGER_RTT_WriteNoLock+0x5e>
 800072a:	e029      	b.n	8000780 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f7ff ffbd 	bl	80006ac <_GetAvailWriteSpace>
 8000732:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d202      	bcs.n	8000742 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000740:	e021      	b.n	8000786 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	69b9      	ldr	r1, [r7, #24]
 800074a:	6978      	ldr	r0, [r7, #20]
 800074c:	f7ff ff6e 	bl	800062c <_WriteNoCheck>
    break;
 8000750:	e019      	b.n	8000786 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000752:	6978      	ldr	r0, [r7, #20]
 8000754:	f7ff ffaa 	bl	80006ac <_GetAvailWriteSpace>
 8000758:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	4293      	cmp	r3, r2
 8000760:	bf28      	it	cs
 8000762:	4613      	movcs	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	69b9      	ldr	r1, [r7, #24]
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f7ff ff5e 	bl	800062c <_WriteNoCheck>
    break;
 8000770:	e009      	b.n	8000786 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	69b9      	ldr	r1, [r7, #24]
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f7ff fefe 	bl	8000578 <_WriteBlocking>
 800077c:	61f8      	str	r0, [r7, #28]
    break;
 800077e:	e002      	b.n	8000786 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    break;
 8000784:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000786:	69fb      	ldr	r3, [r7, #28]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000028 	.word	0x20000028

08000794 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <SEGGER_RTT_Write+0x44>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SEGGER_RTT_Write+0x18>
 80007a8:	f7ff fe94 	bl	80004d4 <_DoInit>
  SEGGER_RTT_LOCK();
 80007ac:	f3ef 8311 	mrs	r3, BASEPRI
 80007b0:	f04f 0120 	mov.w	r1, #32
 80007b4:	f381 8811 	msr	BASEPRI, r1
 80007b8:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f7ff ff98 	bl	80006f4 <SEGGER_RTT_WriteNoLock>
 80007c4:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80007cc:	693b      	ldr	r3, [r7, #16]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000028 	.word	0x20000028

080007dc <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d80e      	bhi.n	8000818 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	4413      	add	r3, r2
 8000802:	78fa      	ldrb	r2, [r7, #3]
 8000804:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d115      	bne.n	8000850 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6918      	ldr	r0, [r3, #16]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	461a      	mov	r2, r3
 8000832:	f7ff ffaf 	bl	8000794 <SEGGER_RTT_Write>
 8000836:	4602      	mov	r2, r0
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	429a      	cmp	r2, r3
 800083e:	d004      	beq.n	800084a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000846:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000848:	e002      	b.n	8000850 <_StoreChar+0x74>
      p->Cnt = 0u;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000872:	e007      	b.n	8000884 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000874:	6a3a      	ldr	r2, [r7, #32]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
 800087c:	623b      	str	r3, [r7, #32]
    Width++;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3301      	adds	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000884:	6a3a      	ldr	r2, [r7, #32]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	d2f3      	bcs.n	8000874 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	429a      	cmp	r2, r3
 8000892:	d901      	bls.n	8000898 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d125      	bne.n	80008ee <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80008a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d022      	beq.n	80008ee <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80008a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <_PrintUnsigned+0x66>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_PrintUnsigned+0x66>
        c = '0';
 80008b8:	2330      	movs	r3, #48	; 0x30
 80008ba:	76fb      	strb	r3, [r7, #27]
 80008bc:	e001      	b.n	80008c2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80008be:	2320      	movs	r3, #32
 80008c0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80008c2:	e00b      	b.n	80008dc <_PrintUnsigned+0x84>
        FieldWidth--;
 80008c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c6:	3b01      	subs	r3, #1
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80008ca:	7efb      	ldrb	r3, [r7, #27]
 80008cc:	4619      	mov	r1, r3
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f7ff ff84 	bl	80007dc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db07      	blt.n	80008ec <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80008dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d005      	beq.n	80008ee <_PrintUnsigned+0x96>
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3ec      	bcc.n	80008c4 <_PrintUnsigned+0x6c>
 80008ea:	e000      	b.n	80008ee <_PrintUnsigned+0x96>
          break;
 80008ec:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db55      	blt.n	80009a2 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d903      	bls.n	8000904 <_PrintUnsigned+0xac>
        NumDigits--;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	3b01      	subs	r3, #1
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	e009      	b.n	8000918 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	fbb2 f3f3 	udiv	r3, r2, r3
 800090c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d200      	bcs.n	8000918 <_PrintUnsigned+0xc0>
          break;
 8000916:	e005      	b.n	8000924 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000922:	e7e8      	b.n	80008f6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	fbb2 f3f3 	udiv	r3, r2, r3
 800092c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <_PrintUnsigned+0x154>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff ff48 	bl	80007dc <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db08      	blt.n	8000966 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1df      	bne.n	8000924 <_PrintUnsigned+0xcc>
 8000964:	e000      	b.n	8000968 <_PrintUnsigned+0x110>
        break;
 8000966:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d017      	beq.n	80009a2 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	2b00      	cmp	r3, #0
 8000976:	d014      	beq.n	80009a2 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000978:	e00a      	b.n	8000990 <_PrintUnsigned+0x138>
          FieldWidth--;
 800097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097c:	3b01      	subs	r3, #1
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8000980:	2120      	movs	r1, #32
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff ff2a 	bl	80007dc <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db07      	blt.n	80009a0 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <_PrintUnsigned+0x14a>
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099a:	429a      	cmp	r2, r3
 800099c:	d3ed      	bcc.n	800097a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800099e:	e000      	b.n	80009a2 <_PrintUnsigned+0x14a>
            break;
 80009a0:	bf00      	nop
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08001f20 	.word	0x08001f20

080009b0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bfb8      	it	lt
 80009c4:	425b      	neglt	r3, r3
 80009c6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80009cc:	e007      	b.n	80009de <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d6:	613b      	str	r3, [r7, #16]
    Width++;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	daf3      	bge.n	80009ce <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d901      	bls.n	80009f2 <_PrintInt+0x42>
    Width = NumDigits;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00a      	beq.n	8000a0e <_PrintInt+0x5e>
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db04      	blt.n	8000a08 <_PrintInt+0x58>
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <_PrintInt+0x5e>
    FieldWidth--;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <_PrintInt+0x6e>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01c      	beq.n	8000a58 <_PrintInt+0xa8>
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d117      	bne.n	8000a58 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d014      	beq.n	8000a58 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a2e:	e00a      	b.n	8000a46 <_PrintInt+0x96>
        FieldWidth--;
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000a36:	2120      	movs	r1, #32
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff fecf 	bl	80007dc <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db07      	blt.n	8000a56 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <_PrintInt+0xa8>
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d3ed      	bcc.n	8000a30 <_PrintInt+0x80>
 8000a54:	e000      	b.n	8000a58 <_PrintInt+0xa8>
          break;
 8000a56:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db4a      	blt.n	8000af6 <_PrintInt+0x146>
    if (v < 0) {
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	da07      	bge.n	8000a76 <_PrintInt+0xc6>
      v = -v;
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	425b      	negs	r3, r3
 8000a6a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000a6c:	212d      	movs	r1, #45	; 0x2d
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff feb4 	bl	80007dc <_StoreChar>
 8000a74:	e008      	b.n	8000a88 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000a80:	212b      	movs	r1, #43	; 0x2b
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff feaa 	bl	80007dc <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db32      	blt.n	8000af6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01f      	beq.n	8000ada <_PrintInt+0x12a>
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11a      	bne.n	8000ada <_PrintInt+0x12a>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d117      	bne.n	8000ada <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d014      	beq.n	8000ada <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ab0:	e00a      	b.n	8000ac8 <_PrintInt+0x118>
            FieldWidth--;
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000ab8:	2130      	movs	r1, #48	; 0x30
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fe8e 	bl	80007dc <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db07      	blt.n	8000ad8 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <_PrintInt+0x12a>
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d3ed      	bcc.n	8000ab2 <_PrintInt+0x102>
 8000ad6:	e000      	b.n	8000ada <_PrintInt+0x12a>
              break;
 8000ad8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db09      	blt.n	8000af6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000ae2:	68b9      	ldr	r1, [r7, #8]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f7ff feb1 	bl	8000858 <_PrintUnsigned>
      }
    }
  }
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0d2      	sub	sp, #328	; 0x148
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b0a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b14:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000b18:	6019      	str	r1, [r3, #0]
 8000b1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b22:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000b3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b3e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 8000b4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 8000b5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000b66:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000b6a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	3201      	adds	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 8000b74:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 825a 	beq.w	8001032 <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 8000b7e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000b82:	2b25      	cmp	r3, #37	; 0x25
 8000b84:	f040 8247 	bne.w	8001016 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 8000b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b98:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 8000ba4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000ba8:	3b23      	subs	r3, #35	; 0x23
 8000baa:	2b0d      	cmp	r3, #13
 8000bac:	d866      	bhi.n	8000c7c <SEGGER_RTT_vprintf+0x17c>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <SEGGER_RTT_vprintf+0xb4>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000c59 	.word	0x08000c59
 8000bb8:	08000c7d 	.word	0x08000c7d
 8000bbc:	08000c7d 	.word	0x08000c7d
 8000bc0:	08000c7d 	.word	0x08000c7d
 8000bc4:	08000c7d 	.word	0x08000c7d
 8000bc8:	08000c7d 	.word	0x08000c7d
 8000bcc:	08000c7d 	.word	0x08000c7d
 8000bd0:	08000c7d 	.word	0x08000c7d
 8000bd4:	08000c35 	.word	0x08000c35
 8000bd8:	08000c7d 	.word	0x08000c7d
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000c7d 	.word	0x08000c7d
 8000be8:	08000c11 	.word	0x08000c11
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000bf8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bfc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c00:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000c04:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e039      	b.n	8000c84 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000c1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c20:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c24:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000c28:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	3201      	adds	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e027      	b.n	8000c84 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c48:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000c4c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	3201      	adds	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e015      	b.n	8000c84 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000c64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c6c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000c70:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000c74:	6812      	ldr	r2, [r2, #0]
 8000c76:	3201      	adds	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e003      	b.n	8000c84 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000c82:	bf00      	nop
        }
      } while (v);
 8000c84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d183      	bne.n	8000b94 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 8000c92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 8000ca2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ca8:	d91c      	bls.n	8000ce4 <SEGGER_RTT_vprintf+0x1e4>
 8000caa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000cae:	2b39      	cmp	r3, #57	; 0x39
 8000cb0:	d818      	bhi.n	8000ce4 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 8000cb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cb6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000cba:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000cbe:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	3201      	adds	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000cc8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b30      	subs	r3, #48	; 0x30
 8000cde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 8000ce2:	e7d6      	b.n	8000c92 <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 8000cea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 8000cfa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8000d00:	d133      	bne.n	8000d6a <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 8000d02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d0a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000d0e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	3201      	adds	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 8000d18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d1c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 8000d28:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d2e:	d91c      	bls.n	8000d6a <SEGGER_RTT_vprintf+0x26a>
 8000d30:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000d34:	2b39      	cmp	r3, #57	; 0x39
 8000d36:	d818      	bhi.n	8000d6a <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 8000d38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d3c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d40:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000d44:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	3201      	adds	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000d4e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000d60:	4413      	add	r3, r2
 8000d62:	3b30      	subs	r3, #48	; 0x30
 8000d64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 8000d68:	e7d6      	b.n	8000d18 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d7a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000d7e:	2b6c      	cmp	r3, #108	; 0x6c
 8000d80:	d003      	beq.n	8000d8a <SEGGER_RTT_vprintf+0x28a>
 8000d82:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000d86:	2b68      	cmp	r3, #104	; 0x68
 8000d88:	d113      	bne.n	8000db2 <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 8000d8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d92:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000d96:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	3201      	adds	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 8000da0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000da4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 8000db0:	e7e3      	b.n	8000d7a <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000db2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000db6:	2b25      	cmp	r3, #37	; 0x25
 8000db8:	f000 8119 	beq.w	8000fee <SEGGER_RTT_vprintf+0x4ee>
 8000dbc:	2b25      	cmp	r3, #37	; 0x25
 8000dbe:	f2c0 811d 	blt.w	8000ffc <SEGGER_RTT_vprintf+0x4fc>
 8000dc2:	2b78      	cmp	r3, #120	; 0x78
 8000dc4:	f300 811a 	bgt.w	8000ffc <SEGGER_RTT_vprintf+0x4fc>
 8000dc8:	2b58      	cmp	r3, #88	; 0x58
 8000dca:	f2c0 8117 	blt.w	8000ffc <SEGGER_RTT_vprintf+0x4fc>
 8000dce:	3b58      	subs	r3, #88	; 0x58
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	f200 8113 	bhi.w	8000ffc <SEGGER_RTT_vprintf+0x4fc>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <SEGGER_RTT_vprintf+0x2dc>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000f1b 	.word	0x08000f1b
 8000de0:	08000ffd 	.word	0x08000ffd
 8000de4:	08000ffd 	.word	0x08000ffd
 8000de8:	08000ffd 	.word	0x08000ffd
 8000dec:	08000ffd 	.word	0x08000ffd
 8000df0:	08000ffd 	.word	0x08000ffd
 8000df4:	08000ffd 	.word	0x08000ffd
 8000df8:	08000ffd 	.word	0x08000ffd
 8000dfc:	08000ffd 	.word	0x08000ffd
 8000e00:	08000ffd 	.word	0x08000ffd
 8000e04:	08000ffd 	.word	0x08000ffd
 8000e08:	08000e61 	.word	0x08000e61
 8000e0c:	08000e9b 	.word	0x08000e9b
 8000e10:	08000ffd 	.word	0x08000ffd
 8000e14:	08000ffd 	.word	0x08000ffd
 8000e18:	08000ffd 	.word	0x08000ffd
 8000e1c:	08000ffd 	.word	0x08000ffd
 8000e20:	08000ffd 	.word	0x08000ffd
 8000e24:	08000ffd 	.word	0x08000ffd
 8000e28:	08000ffd 	.word	0x08000ffd
 8000e2c:	08000ffd 	.word	0x08000ffd
 8000e30:	08000ffd 	.word	0x08000ffd
 8000e34:	08000ffd 	.word	0x08000ffd
 8000e38:	08000ffd 	.word	0x08000ffd
 8000e3c:	08000fb5 	.word	0x08000fb5
 8000e40:	08000ffd 	.word	0x08000ffd
 8000e44:	08000ffd 	.word	0x08000ffd
 8000e48:	08000f5b 	.word	0x08000f5b
 8000e4c:	08000ffd 	.word	0x08000ffd
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000ffd 	.word	0x08000ffd
 8000e58:	08000ffd 	.word	0x08000ffd
 8000e5c:	08000f1b 	.word	0x08000f1b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000e60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1d19      	adds	r1, r3, #4
 8000e6e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000e72:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	6011      	str	r1, [r2, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 8000e80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 8000e88:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000e8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fca2 	bl	80007dc <_StoreChar>
        break;
 8000e98:	e0b1      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000e9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1d19      	adds	r1, r3, #4
 8000ea8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000eac:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	6011      	str	r1, [r2, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000eba:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000ebe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ece:	220a      	movs	r2, #10
 8000ed0:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000ed4:	f7ff fd6c 	bl	80009b0 <_PrintInt>
        break;
 8000ed8:	e091      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 8000eda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ede:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1d19      	adds	r1, r3, #4
 8000ee8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000eec:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	6011      	str	r1, [r2, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000efa:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000efe:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000f02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f12:	220a      	movs	r2, #10
 8000f14:	f7ff fca0 	bl	8000858 <_PrintUnsigned>
        break;
 8000f18:	e071      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000f1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1d19      	adds	r1, r3, #4
 8000f28:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000f2c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	6011      	str	r1, [r2, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000f3a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000f3e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000f52:	2210      	movs	r2, #16
 8000f54:	f7ff fc80 	bl	8000858 <_PrintUnsigned>
        break;
 8000f58:	e051      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000f5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1d19      	adds	r1, r3, #4
 8000f68:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000f6c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	6011      	str	r1, [r2, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 8000f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 8000f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 8000f8e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000f96:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8000f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fc1b 	bl	80007dc <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dae5      	bge.n	8000f7a <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 8000fae:	e026      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
              break;
 8000fb0:	bf00      	nop
        break;
 8000fb2:	e024      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 8000fb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1d19      	adds	r1, r3, #4
 8000fc2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000fc6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	6011      	str	r1, [r2, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000fd4:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8000fd8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	f7ff fc36 	bl	8000858 <_PrintUnsigned>
        break;
 8000fec:	e007      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ff2:	2125      	movs	r1, #37	; 0x25
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fbf1 	bl	80007dc <_StoreChar>
        break;
 8000ffa:	e000      	b.n	8000ffe <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 8000ffc:	bf00      	nop
      }
      sFormat++;
 8000ffe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001002:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001006:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800100a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	3201      	adds	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e007      	b.n	8001026 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 8001016:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800101a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fbdb 	bl	80007dc <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001026:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800102a:	2b00      	cmp	r3, #0
 800102c:	f6bf ad8f 	bge.w	8000b4e <SEGGER_RTT_vprintf+0x4e>
 8001030:	e000      	b.n	8001034 <SEGGER_RTT_vprintf+0x534>
      break;
 8001032:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001038:	2b00      	cmp	r3, #0
 800103a:	dd15      	ble.n	8001068 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800103c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8001044:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001048:	f107 0110 	add.w	r1, r7, #16
 800104c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001050:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff fb9d 	bl	8000794 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800105a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800105e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001062:	4413      	add	r3, r2
 8001064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 8001068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop

08001078 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8001078:	b40e      	push	{r1, r2, r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	461a      	mov	r2, r3
 800108e:	69f9      	ldr	r1, [r7, #28]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fd35 	bl	8000b00 <SEGGER_RTT_vprintf>
 8001096:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a4:	b003      	add	sp, #12
 80010a6:	4770      	bx	lr

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_GPIO_Init+0x30>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 f908 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f80a 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f7ff ffde 	bl	80010a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_RTT_printf(0, "Hello World!\n");
 80010ec:	4902      	ldr	r1, [pc, #8]	; (80010f8 <main+0x1c>)
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffc2 	bl	8001078 <SEGGER_RTT_printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <main+0x18>
 80010f6:	bf00      	nop
 80010f8:	08001f10 	.word	0x08001f10

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 feae 	bl	8001e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <SystemClock_Config+0xc8>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <SystemClock_Config+0xc8>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <SystemClock_Config+0xc8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <SystemClock_Config+0xcc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <SystemClock_Config+0xcc>)
 8001146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <SystemClock_Config+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001166:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001170:	23c0      	movs	r3, #192	; 0xc0
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001174:	2304      	movs	r3, #4
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fa0f 	bl	80015a4 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f81e 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2103      	movs	r1, #3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fc71 	bl	8001a94 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b8:	f000 f808 	bl	80011cc <Error_Handler>
  }
}
 80011bc:	bf00      	nop
 80011be:	3750      	adds	r7, #80	; 0x50
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f890 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a4:	f7ff ffea 	bl	800127c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f000 fdd5 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff ff03 	bl	80010dc <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012e4:	08001f50 	.word	0x08001f50
  ldr r2, =_sbss
 80012e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012ec:	200010f4 	.word	0x200010f4

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f90d 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff ff56 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f917 	bl	800158a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f000 f8ed 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	200010f0 	.word	0x200010f0

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200010f0 	.word	0x200010f0

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff47 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5c 	bl	8001420 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e267      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d00c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d112      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b82      	ldr	r3, [pc, #520]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4b7e      	ldr	r3, [pc, #504]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05b      	beq.n	80016ac <HAL_RCC_OscConfig+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d157      	bne.n	80016ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e242      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x74>
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a75      	ldr	r2, [pc, #468]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b70      	ldr	r3, [pc, #448]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a6f      	ldr	r2, [pc, #444]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 800163c:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a68      	ldr	r2, [pc, #416]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b66      	ldr	r3, [pc, #408]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff feb0 	bl	80013c0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff feac 	bl	80013c0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e207      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fe9c 	bl	80013c0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fe98 	bl	80013c0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1f3      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0xe8>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1c7      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e03a      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fe51 	bl	80013c0 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fe4d 	bl	80013c0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1a8      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4925      	ldr	r1, [pc, #148]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x244>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fe30 	bl	80013c0 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fe2c 	bl	80013c0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e187      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d036      	beq.n	80017fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fe10 	bl	80013c0 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fe0c 	bl	80013c0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e167      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x200>
 80017c2:	e01b      	b.n	80017fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x248>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fdf9 	bl	80013c0 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e00e      	b.n	80017f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fdf5 	bl	80013c0 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d907      	bls.n	80017f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e150      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
 80017ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8097 	beq.w	8001938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b74      	ldr	r3, [pc, #464]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a73      	ldr	r2, [pc, #460]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff fdb5 	bl	80013c0 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fdb1 	bl	80013c0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e10c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x474>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x2ea>
 8001880:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x30c>
 8001896:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a5e      	ldr	r2, [pc, #376]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x324>
 80018b0:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0304 	bic.w	r3, r3, #4
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d015      	beq.n	80018fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fd76 	bl	80013c0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff fd72 	bl	80013c0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0cb      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ee      	beq.n	80018d8 <HAL_RCC_OscConfig+0x334>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fd60 	bl	80013c0 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fd5c 	bl	80013c0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0b5      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ee      	bne.n	8001904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a1 	beq.w	8001a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	d05c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d141      	bne.n	80019da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fd30 	bl	80013c0 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fd2c 	bl	80013c0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e087      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	019b      	lsls	r3, r3, #6
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	491b      	ldr	r1, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff fd05 	bl	80013c0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff fd01 	bl	80013c0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e05c      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x416>
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fcee 	bl	80013c0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fcea 	bl	80013c0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e045      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x444>
 8001a06:	e03d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e038      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d028      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d121      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11a      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cc      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d044      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e067      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fc1c 	bl	80013c0 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fc18 	bl	80013c0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb7c 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08001f30 	.word	0x08001f30
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c64:	b094      	sub	sp, #80	; 0x50
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c70:	2300      	movs	r3, #0
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80e1 	bhi.w	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e0db      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c98:	e0db      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9e:	e0d8      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d063      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cca:	2300      	movs	r3, #0
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0159      	lsls	r1, r3, #5
 8001ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce4:	0150      	lsls	r0, r2, #5
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4621      	mov	r1, r4
 8001cec:	1a51      	subs	r1, r2, r1
 8001cee:	6139      	str	r1, [r7, #16]
 8001cf0:	4629      	mov	r1, r5
 8001cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d04:	4659      	mov	r1, fp
 8001d06:	018b      	lsls	r3, r1, #6
 8001d08:	4651      	mov	r1, sl
 8001d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0e:	4651      	mov	r1, sl
 8001d10:	018a      	lsls	r2, r1, #6
 8001d12:	4651      	mov	r1, sl
 8001d14:	ebb2 0801 	subs.w	r8, r2, r1
 8001d18:	4659      	mov	r1, fp
 8001d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d32:	4690      	mov	r8, r2
 8001d34:	4699      	mov	r9, r3
 8001d36:	4623      	mov	r3, r4
 8001d38:	eb18 0303 	adds.w	r3, r8, r3
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	462b      	mov	r3, r5
 8001d40:	eb49 0303 	adc.w	r3, r9, r3
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d52:	4629      	mov	r1, r5
 8001d54:	024b      	lsls	r3, r1, #9
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	024a      	lsls	r2, r1, #9
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d66:	2200      	movs	r2, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d70:	f7fe fa32 	bl	80001d8 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d7c:	e058      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	2200      	movs	r2, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	4611      	mov	r1, r2
 8001d8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d98:	4642      	mov	r2, r8
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	0159      	lsls	r1, r3, #5
 8001da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001daa:	0150      	lsls	r0, r2, #5
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4641      	mov	r1, r8
 8001db2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001db6:	4649      	mov	r1, r9
 8001db8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	00eb      	lsls	r3, r5, #3
 8001de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de6:	00e2      	lsls	r2, r4, #3
 8001de8:	4614      	mov	r4, r2
 8001dea:	461d      	mov	r5, r3
 8001dec:	4643      	mov	r3, r8
 8001dee:	18e3      	adds	r3, r4, r3
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	464b      	mov	r3, r9
 8001df4:	eb45 0303 	adc.w	r3, r5, r3
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e06:	4629      	mov	r1, r5
 8001e08:	028b      	lsls	r3, r1, #10
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e10:	4621      	mov	r1, r4
 8001e12:	028a      	lsls	r2, r1, #10
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
 8001e1e:	61fa      	str	r2, [r7, #28]
 8001e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e24:	f7fe f9d8 	bl	80001d8 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3750      	adds	r7, #80	; 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	00f42400 	.word	0x00f42400
 8001e68:	007a1200 	.word	0x007a1200

08001e6c <memset>:
 8001e6c:	4402      	add	r2, r0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d100      	bne.n	8001e76 <memset+0xa>
 8001e74:	4770      	bx	lr
 8001e76:	f803 1b01 	strb.w	r1, [r3], #1
 8001e7a:	e7f9      	b.n	8001e70 <memset+0x4>

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	4d0d      	ldr	r5, [pc, #52]	; (8001eb4 <__libc_init_array+0x38>)
 8001e80:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e82:	1b64      	subs	r4, r4, r5
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	2600      	movs	r6, #0
 8001e88:	42a6      	cmp	r6, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	4d0b      	ldr	r5, [pc, #44]	; (8001ebc <__libc_init_array+0x40>)
 8001e8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ec0 <__libc_init_array+0x44>)
 8001e90:	f000 f826 	bl	8001ee0 <_init>
 8001e94:	1b64      	subs	r4, r4, r5
 8001e96:	10a4      	asrs	r4, r4, #2
 8001e98:	2600      	movs	r6, #0
 8001e9a:	42a6      	cmp	r6, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea4:	4798      	blx	r3
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eae:	4798      	blx	r3
 8001eb0:	3601      	adds	r6, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08001f48 	.word	0x08001f48
 8001eb8:	08001f48 	.word	0x08001f48
 8001ebc:	08001f48 	.word	0x08001f48
 8001ec0:	08001f4c 	.word	0x08001f4c

08001ec4 <memcpy>:
 8001ec4:	440a      	add	r2, r1
 8001ec6:	4291      	cmp	r1, r2
 8001ec8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001ecc:	d100      	bne.n	8001ed0 <memcpy+0xc>
 8001ece:	4770      	bx	lr
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001eda:	4291      	cmp	r1, r2
 8001edc:	d1f9      	bne.n	8001ed2 <memcpy+0xe>
 8001ede:	bd10      	pop	{r4, pc}

08001ee0 <_init>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr

08001eec <_fini>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	bf00      	nop
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr
