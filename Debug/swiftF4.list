
swiftF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  0800d514  0800d514  0001d514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd88  0800dd88  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd90  0800dd90  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd90  0800dd90  0001dd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd94  0800dd94  0001dd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  0800dd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c98  200003c4  0800e15c  000203c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000805c  0800e15c  0002805c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029836  00000000  00000000  00020437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b67  00000000  00000000  00049c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002248  00000000  00000000  000507d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a46  00000000  00000000  00052a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000084e7  00000000  00000000  00054466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b239  00000000  00000000  0005c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae93c  00000000  00000000  00087b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009010  00000000  00000000  001364c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0013f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003c4 	.word	0x200003c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d4fc 	.word	0x0800d4fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200003c8 	.word	0x200003c8
 80001dc:	0800d4fc 	.word	0x0800d4fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b970 	b.w	80004ec <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	460f      	mov	r7, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14a      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000234:	428a      	cmp	r2, r1
 8000236:	4694      	mov	ip, r2
 8000238:	d965      	bls.n	8000306 <__udivmoddi4+0xe2>
 800023a:	fab2 f382 	clz	r3, r2
 800023e:	b143      	cbz	r3, 8000252 <__udivmoddi4+0x2e>
 8000240:	fa02 fc03 	lsl.w	ip, r2, r3
 8000244:	f1c3 0220 	rsb	r2, r3, #32
 8000248:	409f      	lsls	r7, r3
 800024a:	fa20 f202 	lsr.w	r2, r0, r2
 800024e:	4317      	orrs	r7, r2
 8000250:	409c      	lsls	r4, r3
 8000252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000256:	fa1f f58c 	uxth.w	r5, ip
 800025a:	fbb7 f1fe 	udiv	r1, r7, lr
 800025e:	0c22      	lsrs	r2, r4, #16
 8000260:	fb0e 7711 	mls	r7, lr, r1, r7
 8000264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000268:	fb01 f005 	mul.w	r0, r1, r5
 800026c:	4290      	cmp	r0, r2
 800026e:	d90a      	bls.n	8000286 <__udivmoddi4+0x62>
 8000270:	eb1c 0202 	adds.w	r2, ip, r2
 8000274:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000278:	f080 811c 	bcs.w	80004b4 <__udivmoddi4+0x290>
 800027c:	4290      	cmp	r0, r2
 800027e:	f240 8119 	bls.w	80004b4 <__udivmoddi4+0x290>
 8000282:	3902      	subs	r1, #2
 8000284:	4462      	add	r2, ip
 8000286:	1a12      	subs	r2, r2, r0
 8000288:	b2a4      	uxth	r4, r4
 800028a:	fbb2 f0fe 	udiv	r0, r2, lr
 800028e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000296:	fb00 f505 	mul.w	r5, r0, r5
 800029a:	42a5      	cmp	r5, r4
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x90>
 800029e:	eb1c 0404 	adds.w	r4, ip, r4
 80002a2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x294>
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x294>
 80002b0:	4464      	add	r4, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11e      	cbz	r6, 80002c6 <__udivmoddi4+0xa2>
 80002be:	40dc      	lsrs	r4, r3
 80002c0:	2300      	movs	r3, #0
 80002c2:	e9c6 4300 	strd	r4, r3, [r6]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0xbc>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80ed 	beq.w	80004ae <__udivmoddi4+0x28a>
 80002d4:	2100      	movs	r1, #0
 80002d6:	e9c6 0500 	strd	r0, r5, [r6]
 80002da:	4608      	mov	r0, r1
 80002dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e0:	fab3 f183 	clz	r1, r3
 80002e4:	2900      	cmp	r1, #0
 80002e6:	d149      	bne.n	800037c <__udivmoddi4+0x158>
 80002e8:	42ab      	cmp	r3, r5
 80002ea:	d302      	bcc.n	80002f2 <__udivmoddi4+0xce>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	f200 80f8 	bhi.w	80004e2 <__udivmoddi4+0x2be>
 80002f2:	1a84      	subs	r4, r0, r2
 80002f4:	eb65 0203 	sbc.w	r2, r5, r3
 80002f8:	2001      	movs	r0, #1
 80002fa:	4617      	mov	r7, r2
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d0e2      	beq.n	80002c6 <__udivmoddi4+0xa2>
 8000300:	e9c6 4700 	strd	r4, r7, [r6]
 8000304:	e7df      	b.n	80002c6 <__udivmoddi4+0xa2>
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xe6>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f382 	clz	r3, r2
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x210>
 8000314:	1a8a      	subs	r2, r1, r2
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2101      	movs	r1, #1
 8000320:	fbb2 f5f7 	udiv	r5, r2, r7
 8000324:	fb07 2015 	mls	r0, r7, r5, r2
 8000328:	0c22      	lsrs	r2, r4, #16
 800032a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032e:	fb0e f005 	mul.w	r0, lr, r5
 8000332:	4290      	cmp	r0, r2
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x124>
 8000336:	eb1c 0202 	adds.w	r2, ip, r2
 800033a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4290      	cmp	r0, r2
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2b8>
 8000346:	4645      	mov	r5, r8
 8000348:	1a12      	subs	r2, r2, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000350:	fb07 2210 	mls	r2, r7, r0, r2
 8000354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x14e>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x14c>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2c2>
 8000370:	4610      	mov	r0, r2
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800037a:	e79f      	b.n	80002bc <__udivmoddi4+0x98>
 800037c:	f1c1 0720 	rsb	r7, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa05 f401 	lsl.w	r4, r5, r1
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	40fd      	lsrs	r5, r7
 8000394:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fbb5 f8f9 	udiv	r8, r5, r9
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	fb09 5518 	mls	r5, r9, r8, r5
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003ac:	fb08 f50e 	mul.w	r5, r8, lr
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2b4>
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2b4>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4464      	add	r4, ip
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	b29d      	uxth	r5, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2ac>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2ac>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000402:	fba3 9502 	umull	r9, r5, r3, r2
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	42ac      	cmp	r4, r5
 800040c:	46c8      	mov	r8, r9
 800040e:	46ae      	mov	lr, r5
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x29c>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x298>
 8000414:	b156      	cbz	r6, 800042c <__udivmoddi4+0x208>
 8000416:	ebb0 0208 	subs.w	r2, r0, r8
 800041a:	eb64 040e 	sbc.w	r4, r4, lr
 800041e:	fa04 f707 	lsl.w	r7, r4, r7
 8000422:	40ca      	lsrs	r2, r1
 8000424:	40cc      	lsrs	r4, r1
 8000426:	4317      	orrs	r7, r2
 8000428:	e9c6 7400 	strd	r7, r4, [r6]
 800042c:	4618      	mov	r0, r3
 800042e:	2100      	movs	r1, #0
 8000430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000434:	f1c3 0120 	rsb	r1, r3, #32
 8000438:	fa02 fc03 	lsl.w	ip, r2, r3
 800043c:	fa20 f201 	lsr.w	r2, r0, r1
 8000440:	fa25 f101 	lsr.w	r1, r5, r1
 8000444:	409d      	lsls	r5, r3
 8000446:	432a      	orrs	r2, r5
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1510 	mls	r5, r7, r0, r1
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045e:	fb00 f50e 	mul.w	r5, r0, lr
 8000462:	428d      	cmp	r5, r1
 8000464:	fa04 f403 	lsl.w	r4, r4, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x258>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 8000474:	428d      	cmp	r5, r1
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 8000478:	3802      	subs	r0, #2
 800047a:	4461      	add	r1, ip
 800047c:	1b49      	subs	r1, r1, r5
 800047e:	b292      	uxth	r2, r2
 8000480:	fbb1 f5f7 	udiv	r5, r1, r7
 8000484:	fb07 1115 	mls	r1, r7, r5, r1
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	fb05 f10e 	mul.w	r1, r5, lr
 8000490:	4291      	cmp	r1, r2
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x282>
 8000494:	eb1c 0202 	adds.w	r2, ip, r2
 8000498:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2a8>
 800049e:	4291      	cmp	r1, r2
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2a8>
 80004a2:	3d02      	subs	r5, #2
 80004a4:	4462      	add	r2, ip
 80004a6:	1a52      	subs	r2, r2, r1
 80004a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0xfc>
 80004ae:	4631      	mov	r1, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e708      	b.n	80002c6 <__udivmoddi4+0xa2>
 80004b4:	4639      	mov	r1, r7
 80004b6:	e6e6      	b.n	8000286 <__udivmoddi4+0x62>
 80004b8:	4610      	mov	r0, r2
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x90>
 80004bc:	4548      	cmp	r0, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c8:	3b01      	subs	r3, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004cc:	4645      	mov	r5, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x282>
 80004d0:	462b      	mov	r3, r5
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x258>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004dc:	3d02      	subs	r5, #2
 80004de:	4462      	add	r2, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x124>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e70a      	b.n	80002fc <__udivmoddi4+0xd8>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x14e>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80004fa:	680a      	ldr	r2, [r1, #0]
 80004fc:	f382 8808 	msr	MSP, r2
 8000500:	684a      	ldr	r2, [r1, #4]
 8000502:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8000504:	e7fe      	b.n	8000504 <branch_to_bootloader+0x14>
	...

08000508 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 800050e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8000512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000516:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 800051a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800051e:	f04f 0000 	mov.w	r0, #0
 8000522:	f04f 0100 	mov.w	r1, #0
 8000526:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800052a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800052e:	f04f 0000 	mov.w	r0, #0
 8000532:	f04f 0100 	mov.w	r1, #0
 8000536:	0028      	movs	r0, r5
 8000538:	2100      	movs	r1, #0
 800053a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800053e:	2300      	movs	r3, #0
 8000540:	4911      	ldr	r1, [pc, #68]	; (8000588 <check_enter_bootloader+0x80>)
 8000542:	4411      	add	r1, r2
 8000544:	430b      	orrs	r3, r1
 8000546:	d11a      	bne.n	800057e <check_enter_bootloader+0x76>
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <check_enter_bootloader+0x84>)
 800054a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d014      	beq.n	800057e <check_enter_bootloader+0x76>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <check_enter_bootloader+0x88>)
 8000556:	2201      	movs	r2, #1
 8000558:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 800055a:	683c      	ldr	r4, [r7, #0]
 800055c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000560:	f04f 0200 	mov.w	r2, #0
 8000564:	f04f 0300 	mov.w	r3, #0
 8000568:	000a      	movs	r2, r1
 800056a:	2300      	movs	r3, #0
 800056c:	4613      	mov	r3, r2
 800056e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000572:	f023 030f 	bic.w	r3, r3, #15
 8000576:	4619      	mov	r1, r3
 8000578:	4620      	mov	r0, r4
 800057a:	f7ff ffb9 	bl	80004f0 <branch_to_bootloader>
    }
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bdb0      	pop	{r4, r5, r7, pc}
 8000586:	bf00      	nop
 8000588:	fffffa5b 	.word	0xfffffa5b
 800058c:	40023800 	.word	0x40023800
 8000590:	40013800 	.word	0x40013800

08000594 <i2cdrvEventIsrHandler>:
  return status;
}


static void i2cdrvEventIsrHandler(I2cDrv* i2c)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint16_t SR1;
  uint16_t SR2;

  // read the status register first
  SR1 = i2c->def->i2cPort->SR1;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	81fb      	strh	r3, [r7, #14]
  }

  */


}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <i2cdrvErrorIsrHandler>:


static void i2cdrvErrorIsrHandler(I2cDrv* i2c)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  {
      I2C_ClearFlag(i2c->def->i2cPort,I2C_FLAG_ARLO);
  }

  */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <i2cdrvDmaIsrHandler>:
  DMA_ITConfig(i2c->def->dmaRxStream, DMA_IT_TC | DMA_IT_TE, DISABLE);
*/
}

static void i2cdrvDmaIsrHandler(I2cDrv* i2c)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
    i2cNotifyClient(i2c);
    i2cTryNextMessage(i2c);
  }
  */

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <I2C1_ER_IRQHandler>:


void __attribute__((used)) I2C1_ER_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  i2cdrvErrorIsrHandler(&deckBus);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <I2C1_ER_IRQHandler+0x10>)
 80005e2:	f7ff ffe6 	bl	80005b2 <i2cdrvErrorIsrHandler>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000f8 	.word	0x200000f8

080005f0 <I2C1_EV_IRQHandler>:

void __attribute__((used)) I2C1_EV_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  i2cdrvEventIsrHandler(&deckBus);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <I2C1_EV_IRQHandler+0x10>)
 80005f6:	f7ff ffcd 	bl	8000594 <i2cdrvEventIsrHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f8 	.word	0x200000f8

08000604 <DMA1_Stream0_IRQHandler>:
#ifdef CONFIG_DECK_USD_USE_ALT_PINS_AND_SPI
void __attribute__((used)) DMA1_Stream5_IRQHandler(void)
#else
void __attribute__((used)) DMA1_Stream0_IRQHandler(void)
#endif
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  i2cdrvDmaIsrHandler(&deckBus);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <DMA1_Stream0_IRQHandler+0x10>)
 800060a:	f7ff ffdc 	bl	80005c6 <i2cdrvDmaIsrHandler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000f8 	.word	0x200000f8

08000618 <I2C3_ER_IRQHandler>:

void __attribute__((used)) I2C3_ER_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  i2cdrvErrorIsrHandler(&sensorsBus);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <I2C3_ER_IRQHandler+0x10>)
 800061e:	f7ff ffc8 	bl	80005b2 <i2cdrvErrorIsrHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000

0800062c <I2C3_EV_IRQHandler>:

void __attribute__((used)) I2C3_EV_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  i2cdrvEventIsrHandler(&sensorsBus);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <I2C3_EV_IRQHandler+0x10>)
 8000632:	f7ff ffaf 	bl	8000594 <i2cdrvEventIsrHandler>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000000 	.word	0x20000000

08000640 <DMA1_Stream2_IRQHandler>:

void __attribute__((used)) DMA1_Stream2_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  i2cdrvDmaIsrHandler(&sensorsBus);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <DMA1_Stream2_IRQHandler+0x10>)
 8000646:	f7ff ffbe 	bl	80005c6 <i2cdrvDmaIsrHandler>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000

08000654 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f895 	bl	8000790 <platformGetListOfConfigurations>
 8000666:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4619      	mov	r1, r3
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f855 	bl	800071c <platformInitConfiguration>
 8000672:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b30      	cmp	r3, #48	; 0x30
 8000698:	d104      	bne.n	80006a4 <platformParseDeviceTypeString+0x1c>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b3b      	cmp	r3, #59	; 0x3b
 80006a2:	d001      	beq.n	80006a8 <platformParseDeviceTypeString+0x20>
    return 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e034      	b.n	8000712 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	3304      	adds	r3, #4
 80006b0:	60fb      	str	r3, [r7, #12]
  int end = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e00e      	b.n	80006da <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00c      	beq.n	80006e2 <platformParseDeviceTypeString+0x5a>
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b3b      	cmp	r3, #59	; 0x3b
 80006d2:	d006      	beq.n	80006e2 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	ddec      	ble.n	80006bc <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dd01      	ble.n	80006ee <platformParseDeviceTypeString+0x66>
    return 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e011      	b.n	8000712 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	4619      	mov	r1, r3
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f00c fe95 	bl	800d430 <memcpy>
  deviceType[length] = '\0';
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	4413      	add	r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b090      	sub	sp, #64	; 0x40
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f850 	bl	80007d0 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8000730:	f107 020c 	add.w	r2, r7, #12
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffa4 	bl	8000688 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000744:	e018      	b.n	8000778 <platformInitConfiguration+0x5c>
    const platformConfig_t* config = &configs[i];
 8000746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000748:	222c      	movs	r2, #44	; 0x2c
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8000754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd3f 	bl	80001e0 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <platformInitConfiguration+0x56>
      active_config = config;
 8000768:	4a08      	ldr	r2, [pc, #32]	; (800078c <platformInitConfiguration+0x70>)
 800076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800076c:	6013      	str	r3, [r2, #0]
      return 0;
 800076e:	2300      	movs	r3, #0
 8000770:	e007      	b.n	8000782 <platformInitConfiguration+0x66>
  for (int i = 0; i < nrOfConfigs; i++) {
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	3301      	adds	r3, #1
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	dbe2      	blt.n	8000746 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8000780:	2301      	movs	r3, #1
}
 8000782:	4618      	mov	r0, r3
 8000784:	3740      	adds	r7, #64	; 0x40
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200003e0 	.word	0x200003e0

08000790 <platformGetListOfConfigurations>:
#endif


};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2203      	movs	r2, #3
 800079c:	601a      	str	r2, [r3, #0]
  return configs;
 800079e:	4b03      	ldr	r3, [pc, #12]	; (80007ac <platformGetListOfConfigurations+0x1c>)
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001f0 	.word	0x200001f0

080007b0 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80007be:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80007c2:	015b      	lsls	r3, r3, #5
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  char* block = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	e00d      	b.n	80007fe <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 80007e2:	6938      	ldr	r0, [r7, #16]
 80007e4:	f7ff ffe4 	bl	80007b0 <getAddressOfOtpMemoryBlock>
 80007e8:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	617b      	str	r3, [r7, #20]
      break;
 80007f6:	e005      	b.n	8000804 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	3301      	adds	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	ddee      	ble.n	80007e2 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <platformGetDeviceTypeString+0x42>
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d101      	bne.n	8000816 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <platformGetDeviceTypeString+0x60>)
 8000814:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8000816:	2220      	movs	r2, #32
 8000818:	6979      	ldr	r1, [r7, #20]
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f00c fd78 	bl	800d310 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3320      	adds	r3, #32
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	0800d514 	.word	0x0800d514

08000834 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <_DoInit+0x8c>)
 800083c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2203      	movs	r2, #3
 8000842:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2203      	movs	r2, #3
 8000848:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <_DoInit+0x90>)
 800084e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <_DoInit+0x94>)
 8000854:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2202      	movs	r2, #2
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <_DoInit+0x90>)
 8000874:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <_DoInit+0x98>)
 800087a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2220      	movs	r2, #32
 8000880:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2202      	movs	r2, #2
 8000892:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3307      	adds	r3, #7
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <_DoInit+0x9c>)
 800089a:	6810      	ldr	r0, [r2, #0]
 800089c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <_DoInit+0xa0>)
 80008a2:	6810      	ldr	r0, [r2, #0]
 80008a4:	6018      	str	r0, [r3, #0]
 80008a6:	8891      	ldrh	r1, [r2, #4]
 80008a8:	7992      	ldrb	r2, [r2, #6]
 80008aa:	8099      	strh	r1, [r3, #4]
 80008ac:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2220      	movs	r2, #32
 80008b2:	719a      	strb	r2, [r3, #6]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	200003e4 	.word	0x200003e4
 80008c4:	0800d51c 	.word	0x0800d51c
 80008c8:	2000048c 	.word	0x2000048c
 80008cc:	2000148c 	.word	0x2000148c
 80008d0:	0800d528 	.word	0x0800d528
 80008d4:	0800d52c 	.word	0x0800d52c

080008d8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d905      	bls.n	8000908 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	3b01      	subs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	e007      	b.n	8000918 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	6939      	ldr	r1, [r7, #16]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	1acb      	subs	r3, r1, r3
 8000912:	4413      	add	r3, r2
 8000914:	3b01      	subs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	4293      	cmp	r3, r2
 8000924:	bf28      	it	cs
 8000926:	4613      	movcs	r3, r2
 8000928:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4293      	cmp	r3, r2
 8000930:	bf28      	it	cs
 8000932:	4613      	movcs	r3, r2
 8000934:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	4618      	mov	r0, r3
 8000944:	f00c fd74 	bl	800d430 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	4413      	add	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	4413      	add	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4413      	add	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	429a      	cmp	r2, r3
 8000970:	d101      	bne.n	8000976 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1b5      	bne.n	80008ee <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8000982:	69bb      	ldr	r3, [r7, #24]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d90e      	bls.n	80009ce <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	4413      	add	r3, r2
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	4618      	mov	r0, r3
 80009be:	f00c fd37 	bl	800d430 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	441a      	add	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80009cc:	e01a      	b.n	8000a04 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	4413      	add	r3, r2
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	4618      	mov	r0, r3
 80009e0:	f00c fd26 	bl	800d430 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6858      	ldr	r0, [r3, #4]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4413      	add	r3, r2
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f00c fd19 	bl	800d430 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d808      	bhi.n	8000a3a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4413      	add	r3, r2
 8000a34:	3b01      	subs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e004      	b.n	8000a44 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000a44:	697b      	ldr	r3, [r7, #20]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	371c      	adds	r7, #28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000a72:	4413      	add	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d029      	beq.n	8000ad2 <SEGGER_RTT_WriteNoLock+0x7e>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d82e      	bhi.n	8000ae0 <SEGGER_RTT_WriteNoLock+0x8c>
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <SEGGER_RTT_WriteNoLock+0x38>
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d013      	beq.n	8000ab2 <SEGGER_RTT_WriteNoLock+0x5e>
 8000a8a:	e029      	b.n	8000ae0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000a8c:	6978      	ldr	r0, [r7, #20]
 8000a8e:	f7ff ffbd 	bl	8000a0c <_GetAvailWriteSpace>
 8000a92:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d202      	bcs.n	8000aa2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000aa0:	e021      	b.n	8000ae6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	69b9      	ldr	r1, [r7, #24]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff6e 	bl	800098c <_WriteNoCheck>
    break;
 8000ab0:	e019      	b.n	8000ae6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ffaa 	bl	8000a0c <_GetAvailWriteSpace>
 8000ab8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	bf28      	it	cs
 8000ac2:	4613      	movcs	r3, r2
 8000ac4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	69b9      	ldr	r1, [r7, #24]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ff5e 	bl	800098c <_WriteNoCheck>
    break;
 8000ad0:	e009      	b.n	8000ae6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	69b9      	ldr	r1, [r7, #24]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff fefe 	bl	80008d8 <_WriteBlocking>
 8000adc:	61f8      	str	r0, [r7, #28]
    break;
 8000ade:	e002      	b.n	8000ae6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    break;
 8000ae4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000ae6:	69fb      	ldr	r3, [r7, #28]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200003e4 	.word	0x200003e4

08000af4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <SEGGER_RTT_Write+0x44>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <SEGGER_RTT_Write+0x18>
 8000b08:	f7ff fe94 	bl	8000834 <_DoInit>
  SEGGER_RTT_LOCK();
 8000b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8000b10:	f04f 0120 	mov.w	r1, #32
 8000b14:	f381 8811 	msr	BASEPRI, r1
 8000b18:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff ff98 	bl	8000a54 <SEGGER_RTT_WriteNoLock>
 8000b24:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000b2c:	693b      	ldr	r3, [r7, #16]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200003e4 	.word	0x200003e4

08000b3c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d80e      	bhi.n	8000b78 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	78fa      	ldrb	r2, [r7, #3]
 8000b64:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d115      	bne.n	8000bb0 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6918      	ldr	r0, [r3, #16]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	461a      	mov	r2, r3
 8000b92:	f7ff ffaf 	bl	8000af4 <SEGGER_RTT_Write>
 8000b96:	4602      	mov	r2, r0
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d004      	beq.n	8000baa <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000ba8:	e002      	b.n	8000bb0 <_StoreChar+0x74>
      p->Cnt = 0u;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000bd2:	e007      	b.n	8000be4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	623b      	str	r3, [r7, #32]
    Width++;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000be4:	6a3a      	ldr	r2, [r7, #32]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d2f3      	bcs.n	8000bd4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d901      	bls.n	8000bf8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d125      	bne.n	8000c4e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d022      	beq.n	8000c4e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <_PrintUnsigned+0x66>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_PrintUnsigned+0x66>
        c = '0';
 8000c18:	2330      	movs	r3, #48	; 0x30
 8000c1a:	76fb      	strb	r3, [r7, #27]
 8000c1c:	e001      	b.n	8000c22 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000c1e:	2320      	movs	r3, #32
 8000c20:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c22:	e00b      	b.n	8000c3c <_PrintUnsigned+0x84>
        FieldWidth--;
 8000c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c26:	3b01      	subs	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8000c2a:	7efb      	ldrb	r3, [r7, #27]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ff84 	bl	8000b3c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db07      	blt.n	8000c4c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <_PrintUnsigned+0x96>
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d3ec      	bcc.n	8000c24 <_PrintUnsigned+0x6c>
 8000c4a:	e000      	b.n	8000c4e <_PrintUnsigned+0x96>
          break;
 8000c4c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db55      	blt.n	8000d02 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d903      	bls.n	8000c64 <_PrintUnsigned+0xac>
        NumDigits--;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	e009      	b.n	8000c78 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d200      	bcs.n	8000c78 <_PrintUnsigned+0xc0>
          break;
 8000c76:	e005      	b.n	8000c84 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000c82:	e7e8      	b.n	8000c56 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <_PrintUnsigned+0x154>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff ff48 	bl	8000b3c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db08      	blt.n	8000cc6 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1df      	bne.n	8000c84 <_PrintUnsigned+0xcc>
 8000cc4:	e000      	b.n	8000cc8 <_PrintUnsigned+0x110>
        break;
 8000cc6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d017      	beq.n	8000d02 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d014      	beq.n	8000d02 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000cd8:	e00a      	b.n	8000cf0 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff ff2a 	bl	8000b3c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db07      	blt.n	8000d00 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <_PrintUnsigned+0x14a>
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3ed      	bcc.n	8000cda <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000cfe:	e000      	b.n	8000d02 <_PrintUnsigned+0x14a>
            break;
 8000d00:	bf00      	nop
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	0800dd58 	.word	0x0800dd58

08000d10 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bfb8      	it	lt
 8000d24:	425b      	neglt	r3, r3
 8000d26:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000d2c:	e007      	b.n	8000d3e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d36:	613b      	str	r3, [r7, #16]
    Width++;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	daf3      	bge.n	8000d2e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d901      	bls.n	8000d52 <_PrintInt+0x42>
    Width = NumDigits;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00a      	beq.n	8000d6e <_PrintInt+0x5e>
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db04      	blt.n	8000d68 <_PrintInt+0x58>
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <_PrintInt+0x5e>
    FieldWidth--;
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <_PrintInt+0x6e>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d01c      	beq.n	8000db8 <_PrintInt+0xa8>
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d117      	bne.n	8000db8 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d014      	beq.n	8000db8 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000d8e:	e00a      	b.n	8000da6 <_PrintInt+0x96>
        FieldWidth--;
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000d96:	2120      	movs	r1, #32
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fecf 	bl	8000b3c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db07      	blt.n	8000db6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <_PrintInt+0xa8>
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d3ed      	bcc.n	8000d90 <_PrintInt+0x80>
 8000db4:	e000      	b.n	8000db8 <_PrintInt+0xa8>
          break;
 8000db6:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db4a      	blt.n	8000e56 <_PrintInt+0x146>
    if (v < 0) {
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da07      	bge.n	8000dd6 <_PrintInt+0xc6>
      v = -v;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	425b      	negs	r3, r3
 8000dca:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000dcc:	212d      	movs	r1, #45	; 0x2d
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff feb4 	bl	8000b3c <_StoreChar>
 8000dd4:	e008      	b.n	8000de8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000de0:	212b      	movs	r1, #43	; 0x2b
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff feaa 	bl	8000b3c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db32      	blt.n	8000e56 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01f      	beq.n	8000e3a <_PrintInt+0x12a>
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d11a      	bne.n	8000e3a <_PrintInt+0x12a>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d117      	bne.n	8000e3a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d014      	beq.n	8000e3a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000e10:	e00a      	b.n	8000e28 <_PrintInt+0x118>
            FieldWidth--;
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000e18:	2130      	movs	r1, #48	; 0x30
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fe8e 	bl	8000b3c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db07      	blt.n	8000e38 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <_PrintInt+0x12a>
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d3ed      	bcc.n	8000e12 <_PrintInt+0x102>
 8000e36:	e000      	b.n	8000e3a <_PrintInt+0x12a>
              break;
 8000e38:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db09      	blt.n	8000e56 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff feb1 	bl	8000bb8 <_PrintUnsigned>
      }
    }
  }
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0d2      	sub	sp, #328	; 0x148
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e6e:	6018      	str	r0, [r3, #0]
 8000e70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e74:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e78:	6019      	str	r1, [r3, #0]
 8000e7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e82:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000e9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 8000eae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000eb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 8000ebe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ec2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000ec6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000eca:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 8000ed4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 825a 	beq.w	8001392 <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 8000ede:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000ee2:	2b25      	cmp	r3, #37	; 0x25
 8000ee4:	f040 8247 	bne.w	8001376 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 8000ef4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ef8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 8000f04:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000f08:	3b23      	subs	r3, #35	; 0x23
 8000f0a:	2b0d      	cmp	r3, #13
 8000f0c:	d866      	bhi.n	8000fdc <SEGGER_RTT_vprintf+0x17c>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <SEGGER_RTT_vprintf+0xb4>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000fb9 	.word	0x08000fb9
 8000f18:	08000fdd 	.word	0x08000fdd
 8000f1c:	08000fdd 	.word	0x08000fdd
 8000f20:	08000fdd 	.word	0x08000fdd
 8000f24:	08000fdd 	.word	0x08000fdd
 8000f28:	08000fdd 	.word	0x08000fdd
 8000f2c:	08000fdd 	.word	0x08000fdd
 8000f30:	08000fdd 	.word	0x08000fdd
 8000f34:	08000f95 	.word	0x08000f95
 8000f38:	08000fdd 	.word	0x08000fdd
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000fdd 	.word	0x08000fdd
 8000f44:	08000fdd 	.word	0x08000fdd
 8000f48:	08000f71 	.word	0x08000f71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000f58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f5c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f60:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000f64:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	3201      	adds	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e039      	b.n	8000fe4 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000f70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000f7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f84:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000f88:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	3201      	adds	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e027      	b.n	8000fe4 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000fa0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fa4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fa8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000fac:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	3201      	adds	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e015      	b.n	8000fe4 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fbc:	f043 0308 	orr.w	r3, r3, #8
 8000fc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000fc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fc8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000fcc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000fd0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	3201      	adds	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e003      	b.n	8000fe4 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000fe2:	bf00      	nop
        }
      } while (v);
 8000fe4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d183      	bne.n	8000ef4 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 8000ff2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ff6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 8001002:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001006:	2b2f      	cmp	r3, #47	; 0x2f
 8001008:	d91c      	bls.n	8001044 <SEGGER_RTT_vprintf+0x1e4>
 800100a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800100e:	2b39      	cmp	r3, #57	; 0x39
 8001010:	d818      	bhi.n	8001044 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 8001012:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001016:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800101a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800101e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	3201      	adds	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8001028:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	461a      	mov	r2, r3
 8001036:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800103a:	4413      	add	r3, r2
 800103c:	3b30      	subs	r3, #48	; 0x30
 800103e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 8001042:	e7d6      	b.n	8000ff2 <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 800104a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800104e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 800105a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800105e:	2b2e      	cmp	r3, #46	; 0x2e
 8001060:	d133      	bne.n	80010ca <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 8001062:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001066:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800106a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800106e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	3201      	adds	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 8001078:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800107c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 8001088:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800108c:	2b2f      	cmp	r3, #47	; 0x2f
 800108e:	d91c      	bls.n	80010ca <SEGGER_RTT_vprintf+0x26a>
 8001090:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001094:	2b39      	cmp	r3, #57	; 0x39
 8001096:	d818      	bhi.n	80010ca <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 8001098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800109c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80010a0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80010a4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	3201      	adds	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80010ae:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	461a      	mov	r2, r3
 80010bc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80010c0:	4413      	add	r3, r2
 80010c2:	3b30      	subs	r3, #48	; 0x30
 80010c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 80010c8:	e7d6      	b.n	8001078 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80010ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 80010da:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80010de:	2b6c      	cmp	r3, #108	; 0x6c
 80010e0:	d003      	beq.n	80010ea <SEGGER_RTT_vprintf+0x28a>
 80010e2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80010e6:	2b68      	cmp	r3, #104	; 0x68
 80010e8:	d113      	bne.n	8001112 <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 80010ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80010f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80010f6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	3201      	adds	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 8001100:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001104:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 8001110:	e7e3      	b.n	80010da <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8001112:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8001116:	2b25      	cmp	r3, #37	; 0x25
 8001118:	f000 8119 	beq.w	800134e <SEGGER_RTT_vprintf+0x4ee>
 800111c:	2b25      	cmp	r3, #37	; 0x25
 800111e:	f2c0 811d 	blt.w	800135c <SEGGER_RTT_vprintf+0x4fc>
 8001122:	2b78      	cmp	r3, #120	; 0x78
 8001124:	f300 811a 	bgt.w	800135c <SEGGER_RTT_vprintf+0x4fc>
 8001128:	2b58      	cmp	r3, #88	; 0x58
 800112a:	f2c0 8117 	blt.w	800135c <SEGGER_RTT_vprintf+0x4fc>
 800112e:	3b58      	subs	r3, #88	; 0x58
 8001130:	2b20      	cmp	r3, #32
 8001132:	f200 8113 	bhi.w	800135c <SEGGER_RTT_vprintf+0x4fc>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <SEGGER_RTT_vprintf+0x2dc>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800127b 	.word	0x0800127b
 8001140:	0800135d 	.word	0x0800135d
 8001144:	0800135d 	.word	0x0800135d
 8001148:	0800135d 	.word	0x0800135d
 800114c:	0800135d 	.word	0x0800135d
 8001150:	0800135d 	.word	0x0800135d
 8001154:	0800135d 	.word	0x0800135d
 8001158:	0800135d 	.word	0x0800135d
 800115c:	0800135d 	.word	0x0800135d
 8001160:	0800135d 	.word	0x0800135d
 8001164:	0800135d 	.word	0x0800135d
 8001168:	080011c1 	.word	0x080011c1
 800116c:	080011fb 	.word	0x080011fb
 8001170:	0800135d 	.word	0x0800135d
 8001174:	0800135d 	.word	0x0800135d
 8001178:	0800135d 	.word	0x0800135d
 800117c:	0800135d 	.word	0x0800135d
 8001180:	0800135d 	.word	0x0800135d
 8001184:	0800135d 	.word	0x0800135d
 8001188:	0800135d 	.word	0x0800135d
 800118c:	0800135d 	.word	0x0800135d
 8001190:	0800135d 	.word	0x0800135d
 8001194:	0800135d 	.word	0x0800135d
 8001198:	0800135d 	.word	0x0800135d
 800119c:	08001315 	.word	0x08001315
 80011a0:	0800135d 	.word	0x0800135d
 80011a4:	0800135d 	.word	0x0800135d
 80011a8:	080012bb 	.word	0x080012bb
 80011ac:	0800135d 	.word	0x0800135d
 80011b0:	0800123b 	.word	0x0800123b
 80011b4:	0800135d 	.word	0x0800135d
 80011b8:	0800135d 	.word	0x0800135d
 80011bc:	0800127b 	.word	0x0800127b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80011c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80011c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1d19      	adds	r1, r3, #4
 80011ce:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80011d2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	6011      	str	r1, [r2, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 80011e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 80011e8:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 80011ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fca2 	bl	8000b3c <_StoreChar>
        break;
 80011f8:	e0b1      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80011fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80011fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1d19      	adds	r1, r3, #4
 8001208:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800120c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6011      	str	r1, [r2, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800121a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800121e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800122e:	220a      	movs	r2, #10
 8001230:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8001234:	f7ff fd6c 	bl	8000d10 <_PrintInt>
        break;
 8001238:	e091      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 800123a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800123e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1d19      	adds	r1, r3, #4
 8001248:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800124c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	6011      	str	r1, [r2, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800125a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800125e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001262:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001272:	220a      	movs	r2, #10
 8001274:	f7ff fca0 	bl	8000bb8 <_PrintUnsigned>
        break;
 8001278:	e071      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800127a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800127e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1d19      	adds	r1, r3, #4
 8001288:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800128c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	6011      	str	r1, [r2, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800129a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800129e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80012a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012b2:	2210      	movs	r2, #16
 80012b4:	f7ff fc80 	bl	8000bb8 <_PrintUnsigned>
        break;
 80012b8:	e051      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80012ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1d19      	adds	r1, r3, #4
 80012c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80012cc:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	6011      	str	r1, [r2, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 80012da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 80012e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012e8:	3301      	adds	r3, #1
 80012ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 80012ee:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00c      	beq.n	8001310 <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80012f6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80012fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fc1b 	bl	8000b3c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8001306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800130a:	2b00      	cmp	r3, #0
 800130c:	dae5      	bge.n	80012da <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 800130e:	e026      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
              break;
 8001310:	bf00      	nop
        break;
 8001312:	e024      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 8001314:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001318:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	1d19      	adds	r1, r3, #4
 8001322:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001326:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	6011      	str	r1, [r2, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001334:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8001338:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2308      	movs	r3, #8
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2308      	movs	r3, #8
 8001346:	2210      	movs	r2, #16
 8001348:	f7ff fc36 	bl	8000bb8 <_PrintUnsigned>
        break;
 800134c:	e007      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800134e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001352:	2125      	movs	r1, #37	; 0x25
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fbf1 	bl	8000b3c <_StoreChar>
        break;
 800135a:	e000      	b.n	800135e <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 800135c:	bf00      	nop
      }
      sFormat++;
 800135e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001362:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001366:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800136a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	3201      	adds	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e007      	b.n	8001386 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 8001376:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800137a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fbdb 	bl	8000b3c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001386:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800138a:	2b00      	cmp	r3, #0
 800138c:	f6bf ad8f 	bge.w	8000eae <SEGGER_RTT_vprintf+0x4e>
 8001390:	e000      	b.n	8001394 <SEGGER_RTT_vprintf+0x534>
      break;
 8001392:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001394:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001398:	2b00      	cmp	r3, #0
 800139a:	dd15      	ble.n	80013c8 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800139c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80013a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013a8:	f107 0110 	add.w	r1, r7, #16
 80013ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80013b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	f7ff fb9d 	bl	8000af4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80013ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013c2:	4413      	add	r3, r2
 80013c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 80013c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop

080013d8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80013d8:	b40e      	push	{r1, r2, r3}
 80013da:	b580      	push	{r7, lr}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	461a      	mov	r2, r3
 80013ee:	69f9      	ldr	r1, [r7, #28]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fd35 	bl	8000e60 <SEGGER_RTT_vprintf>
 80013f6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001404:	b003      	add	sp, #12
 8001406:	4770      	bx	lr

08001408 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_ADC1_Init+0x98>)
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <MX_ADC1_Init+0x9c>)
 800141e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001436:	2201      	movs	r2, #1
 8001438:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_ADC1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_ADC1_Init+0x98>)
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <MX_ADC1_Init+0xa0>)
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001456:	2201      	movs	r2, #1
 8001458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_ADC1_Init+0x98>)
 8001464:	2201      	movs	r2, #1
 8001466:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_ADC1_Init+0x98>)
 800146a:	f000 ff55 	bl	8002318 <HAL_ADC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 fb82 	bl	8001b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001478:	2304      	movs	r3, #4
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_ADC1_Init+0x98>)
 800148a:	f001 f8b7 	bl	80025fc <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 fb72 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200014ac 	.word	0x200014ac
 80014a4:	40012000 	.word	0x40012000
 80014a8:	0f000001 	.word	0x0f000001

080014ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_ADC_MspInit+0xe8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d15e      	bne.n	800158c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_ADC_MspInit+0xec>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_IN4_Pin;
 8001506:	2310      	movs	r3, #16
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN4_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4820      	ldr	r0, [pc, #128]	; (800159c <HAL_ADC_MspInit+0xf0>)
 800151a:	f001 ff35 	bl	8003388 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001520:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <HAL_ADC_MspInit+0xf8>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001562:	f001 fb95 	bl	8002c90 <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800156c:	f000 fb06 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_ADC_MspInit+0xf4>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	2012      	movs	r0, #18
 8001582:	f001 fb4e 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001586:	2012      	movs	r0, #18
 8001588:	f001 fb67 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40012000 	.word	0x40012000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	200014f4 	.word	0x200014f4
 80015a4:	40026410 	.word	0x40026410

080015a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_DMA_Init+0x5c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <MX_DMA_Init+0x5c>)
 80015b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_DMA_Init+0x5c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	2038      	movs	r0, #56	; 0x38
 80015d0:	f001 fb27 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015d4:	2038      	movs	r0, #56	; 0x38
 80015d6:	f001 fb40 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2105      	movs	r1, #5
 80015de:	203a      	movs	r0, #58	; 0x3a
 80015e0:	f001 fb1f 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015e4:	203a      	movs	r0, #58	; 0x3a
 80015e6:	f001 fb38 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2105      	movs	r1, #5
 80015ee:	2046      	movs	r0, #70	; 0x46
 80015f0:	f001 fb17 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015f4:	2046      	movs	r0, #70	; 0x46
 80015f6:	f001 fb30 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <vApplicationGetIdleTaskMemory+0x2c>)
 800165c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <vApplicationGetIdleTaskMemory+0x30>)
 8001662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20001558 	.word	0x20001558
 800167c:	20001610 	.word	0x20001610

08001680 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <vApplicationGetTimerTaskMemory+0x2c>)
 8001690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <vApplicationGetTimerTaskMemory+0x30>)
 8001696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	20001810 	.word	0x20001810
 80016b0:	200018c8 	.word	0x200018c8

080016b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_FREERTOS_Init+0x30>)
 80016bc:	1d3c      	adds	r4, r7, #4
 80016be:	461d      	mov	r5, r3
 80016c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f008 fc12 	bl	8009efa <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <MX_FREERTOS_Init+0x34>)
 80016da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	0800d540 	.word	0x0800d540
 80016e8:	20001554 	.word	0x20001554

080016ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80016f4:	f00b f91a 	bl	800c92c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <StartDefaultTask+0x1c>)
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fe6c 	bl	80013d8 <SEGGER_RTT_printf>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f008 fc46 	bl	8009f92 <osDelay>
 8001706:	e7fb      	b.n	8001700 <StartDefaultTask+0x14>
 8001708:	0800d55c 	.word	0x0800d55c

0800170c <MX_GPIO_Init>:
     PB7   ------> S_TIM4_CH2
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a6c      	ldr	r2, [pc, #432]	; (80018dc <MX_GPIO_Init+0x1d0>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <MX_GPIO_Init+0x1d0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <MX_GPIO_Init+0x1d0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a57      	ldr	r2, [pc, #348]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <MX_GPIO_Init+0x1d0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GPIO_GREEN_R_Pin|LED_GPIO_RED_R_Pin|E_CS0_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001798:	4851      	ldr	r0, [pc, #324]	; (80018e0 <MX_GPIO_Init+0x1d4>)
 800179a:	f001 ff79 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GPIO_GREEN_L_Pin|LED_GPIO_RED_L_Pin|E_CS3_Pin|E_CS4_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80017a4:	484f      	ldr	r0, [pc, #316]	; (80018e4 <MX_GPIO_Init+0x1d8>)
 80017a6:	f001 ff73 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_CS1_Pin|E_CS2_Pin|LED_GPIO_BLUE_L_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f241 0103 	movw	r1, #4099	; 0x1003
 80017b0:	484d      	ldr	r0, [pc, #308]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 80017b2:	f001 ff6d 	bl	8003690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GPIO_GREEN_R_Pin|LED_GPIO_RED_R_Pin|E_CS0_Pin;
 80017b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4844      	ldr	r0, [pc, #272]	; (80018e0 <MX_GPIO_Init+0x1d4>)
 80017d0:	f001 fdda 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR4_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTOR4_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	483d      	ldr	r0, [pc, #244]	; (80018e4 <MX_GPIO_Init+0x1d8>)
 80017f0:	f001 fdca 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_GPIO_GREEN_L_Pin|LED_GPIO_RED_L_Pin|E_CS3_Pin|E_CS4_Pin;
 80017f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4835      	ldr	r0, [pc, #212]	; (80018e4 <MX_GPIO_Init+0x1d8>)
 800180e:	f001 fdbb 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = E_CS1_Pin|E_CS2_Pin|LED_GPIO_BLUE_L_Pin;
 8001812:	f241 0303 	movw	r3, #4099	; 0x1003
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	482f      	ldr	r0, [pc, #188]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 800182c:	f001 fdac 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR3_Pin;
 8001830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTOR3_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4826      	ldr	r0, [pc, #152]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 800184e:	f001 fd9b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_SDA_Pin;
 8001852:	2310      	movs	r3, #16
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001862:	2309      	movs	r3, #9
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(E_SDA_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	481e      	ldr	r0, [pc, #120]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 800186e:	f001 fd8b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_SCL_Pin;
 8001872:	2320      	movs	r3, #32
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001882:	2306      	movs	r3, #6
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(E_SCL_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 800188e:	f001 fd7b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR2_Pin|MOTOR1_Pin;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018a2:	2302      	movs	r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 80018ae:	f001 fd6b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80018b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b8:	2312      	movs	r3, #18
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c4:	2304      	movs	r3, #4
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_GPIO_Init+0x1dc>)
 80018d0:	f001 fd5a 	bl	8003388 <HAL_GPIO_Init>

}
 80018d4:	bf00      	nop
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f2:	f000 fc7b 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f843 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fa:	f7ff ff07 	bl	800170c <MX_GPIO_Init>
  MX_DMA_Init();
 80018fe:	f7ff fe53 	bl	80015a8 <MX_DMA_Init>
  MX_TIM11_Init();
 8001902:	f000 fa7b 	bl	8001dfc <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8001906:	f000 fae1 	bl	8001ecc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800190a:	f000 fb09 	bl	8001f20 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800190e:	f000 f93b 	bl	8001b88 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001912:	f7ff fd79 	bl	8001408 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  freertos_IntroTitle();
 8001916:	f000 f8a5 	bl	8001a64 <freertos_IntroTitle>

//  InitTSysTick(96000000, 1000000U);
  t1 = DWT->CYCCNT;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <main+0x80>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <main+0x84>)
 8001920:	6013      	str	r3, [r2, #0]
//  usDelay(1000);	// 1004 us
  usDelay(1000);
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f000 fab5 	bl	8001e94 <usDelay>
//  HAL_Delay(1);		// 1991 us
  t2 = DWT->CYCCNT;
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <main+0x80>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <main+0x88>)
 8001930:	6013      	str	r3, [r2, #0]
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <main+0x88>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <main+0x84>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <main+0x8c>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	099b      	lsrs	r3, r3, #6
 8001944:	461a      	mov	r2, r3
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <main+0x90>)
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fd45 	bl	80013d8 <SEGGER_RTT_printf>


  check_enter_bootloader();
 800194e:	f7fe fddb 	bl	8000508 <check_enter_bootloader>

  int err = platformInit();
 8001952:	f7fe fe7f 	bl	8000654 <platformInit>
 8001956:	6078      	str	r0, [r7, #4]
  if (err != 0) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d000      	beq.n	8001960 <main+0x74>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 800195e:	e7fe      	b.n	800195e <main+0x72>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001960:	f7ff fea8 	bl	80016b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001964:	f008 fac2 	bl	8009eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001968:	e7fe      	b.n	8001968 <main+0x7c>
 800196a:	bf00      	nop
 800196c:	e0001000 	.word	0xe0001000
 8001970:	200020c8 	.word	0x200020c8
 8001974:	200020cc 	.word	0x200020cc
 8001978:	aaaaaaab 	.word	0xaaaaaaab
 800197c:	0800d584 	.word	0x0800d584

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f00b fcb6 	bl	800d300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <SystemClock_Config+0xc8>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <SystemClock_Config+0xc8>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <SystemClock_Config+0xc8>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <SystemClock_Config+0xcc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <SystemClock_Config+0xcc>)
 80019ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <SystemClock_Config+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019f4:	23c0      	movs	r3, #192	; 0xc0
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019f8:	2304      	movs	r3, #4
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019fc:	2308      	movs	r3, #8
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f8ad 	bl	8004b64 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a10:	f000 f8b4 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2103      	movs	r1, #3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 fb0f 	bl	8005054 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a3c:	f000 f89e 	bl	8001b7c <Error_Handler>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <OSVersion>:
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}


char* OSVersion(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <OSVersion+0x10>)
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	0800d594 	.word	0x0800d594

08001a64 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8001a68:	492e      	ldr	r1, [pc, #184]	; (8001b24 <freertos_IntroTitle+0xc0>)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fcb4 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8001a70:	492d      	ldr	r1, [pc, #180]	; (8001b28 <freertos_IntroTitle+0xc4>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fcb0 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8001a78:	492c      	ldr	r1, [pc, #176]	; (8001b2c <freertos_IntroTitle+0xc8>)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fcac 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8001a80:	492b      	ldr	r1, [pc, #172]	; (8001b30 <freertos_IntroTitle+0xcc>)
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fca8 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8001a88:	492a      	ldr	r1, [pc, #168]	; (8001b34 <freertos_IntroTitle+0xd0>)
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fca4 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8001a90:	4929      	ldr	r1, [pc, #164]	; (8001b38 <freertos_IntroTitle+0xd4>)
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fca0 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8001a98:	4928      	ldr	r1, [pc, #160]	; (8001b3c <freertos_IntroTitle+0xd8>)
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fc9c 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8001aa0:	4927      	ldr	r1, [pc, #156]	; (8001b40 <freertos_IntroTitle+0xdc>)
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fc98 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8001aa8:	4926      	ldr	r1, [pc, #152]	; (8001b44 <freertos_IntroTitle+0xe0>)
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fc94 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8001ab0:	4925      	ldr	r1, [pc, #148]	; (8001b48 <freertos_IntroTitle+0xe4>)
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fc90 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8001ab8:	4924      	ldr	r1, [pc, #144]	; (8001b4c <freertos_IntroTitle+0xe8>)
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fc8c 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8001ac0:	4923      	ldr	r1, [pc, #140]	; (8001b50 <freertos_IntroTitle+0xec>)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fc88 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8001ac8:	4922      	ldr	r1, [pc, #136]	; (8001b54 <freertos_IntroTitle+0xf0>)
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fc84 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8001ad0:	4921      	ldr	r1, [pc, #132]	; (8001b58 <freertos_IntroTitle+0xf4>)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fc80 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8001ad8:	4920      	ldr	r1, [pc, #128]	; (8001b5c <freertos_IntroTitle+0xf8>)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff fc7c 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8001ae0:	491f      	ldr	r1, [pc, #124]	; (8001b60 <freertos_IntroTitle+0xfc>)
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fc78 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8001ae8:	491e      	ldr	r1, [pc, #120]	; (8001b64 <freertos_IntroTitle+0x100>)
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fc74 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8001af0:	491d      	ldr	r1, [pc, #116]	; (8001b68 <freertos_IntroTitle+0x104>)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fc70 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001af8:	491c      	ldr	r1, [pc, #112]	; (8001b6c <freertos_IntroTitle+0x108>)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fc6c 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8001b00:	f7ff ffa6 	bl	8001a50 <OSVersion>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4919      	ldr	r1, [pc, #100]	; (8001b70 <freertos_IntroTitle+0x10c>)
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff fc64 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001b10:	4918      	ldr	r1, [pc, #96]	; (8001b74 <freertos_IntroTitle+0x110>)
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fc60 	bl	80013d8 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 8001b18:	4917      	ldr	r1, [pc, #92]	; (8001b78 <freertos_IntroTitle+0x114>)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff fc5c 	bl	80013d8 <SEGGER_RTT_printf>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800d59c 	.word	0x0800d59c
 8001b28:	0800d5dc 	.word	0x0800d5dc
 8001b2c:	0800d630 	.word	0x0800d630
 8001b30:	0800d684 	.word	0x0800d684
 8001b34:	0800d6d8 	.word	0x0800d6d8
 8001b38:	0800d72c 	.word	0x0800d72c
 8001b3c:	0800d780 	.word	0x0800d780
 8001b40:	0800d7d4 	.word	0x0800d7d4
 8001b44:	0800d828 	.word	0x0800d828
 8001b48:	0800d87c 	.word	0x0800d87c
 8001b4c:	0800d8d0 	.word	0x0800d8d0
 8001b50:	0800d924 	.word	0x0800d924
 8001b54:	0800d978 	.word	0x0800d978
 8001b58:	0800d9cc 	.word	0x0800d9cc
 8001b5c:	0800da20 	.word	0x0800da20
 8001b60:	0800da74 	.word	0x0800da74
 8001b64:	0800dac8 	.word	0x0800dac8
 8001b68:	0800db1c 	.word	0x0800db1c
 8001b6c:	0800db64 	.word	0x0800db64
 8001b70:	0800db94 	.word	0x0800db94
 8001b74:	0800dbd8 	.word	0x0800dbd8
 8001b78:	0800dc04 	.word	0x0800dc04

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_SPI2_Init+0x64>)
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_SPI2_Init+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI2_Init+0x64>)
 8001b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI2_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_SPI2_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI2_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_SPI2_Init+0x64>)
 8001bda:	f003 fc5b 	bl	8005494 <HAL_SPI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001be4:	f7ff ffca 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200020d0 	.word	0x200020d0
 8001bf0:	40003800 	.word	0x40003800

08001bf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_SPI_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12c      	bne.n	8001c70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = E_SPI2_SCK_Pin|E_SPI2_MISO_Pin|E_SPI2_MOSI_Pin;
 8001c4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c60:	2305      	movs	r3, #5
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c6c:	f001 fb8c 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40003800 	.word	0x40003800
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400

08001c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x54>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_MspInit+0x54>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	f06f 0001 	mvn.w	r0, #1
 8001cca:	f000 ffaa 	bl	8002c22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <SysTick_Handler+0x2c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <SysTick_Handler+0x16>

		TimingDelay--;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <SysTick_Handler+0x2c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <SysTick_Handler+0x2c>)
 8001d1c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1e:	f000 fab7 	bl	8002290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d22:	f009 fd71 	bl	800b808 <xTaskGetSchedulerState>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d2c:	f00a fb84 	bl	800c438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20002128 	.word	0x20002128

08001d38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <ADC_IRQHandler+0x10>)
 8001d3e:	f000 fb2e 	bl	800239e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200014ac 	.word	0x200014ac

08001d4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001d52:	f003 fd08 	bl	8005766 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000212c 	.word	0x2000212c

08001d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <USART1_IRQHandler+0x10>)
 8001d66:	f003 ff11 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20002174 	.word	0x20002174

08001d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <USART2_IRQHandler+0x10>)
 8001d7a:	f003 ff07 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200021bc 	.word	0x200021bc

08001d88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA2_Stream0_IRQHandler+0x10>)
 8001d8e:	f001 f8bf 	bl	8002f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200014f4 	.word	0x200014f4

08001d9c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA2_Stream2_IRQHandler+0x10>)
 8001da2:	f001 f8b5 	bl	8002f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20002204 	.word	0x20002204

08001db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <OTG_FS_IRQHandler+0x10>)
 8001db6:	f001 fdc8 	bl	800394a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20007818 	.word	0x20007818

08001dc4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Stream7_IRQHandler+0x10>)
 8001dca:	f001 f8a1 	bl	8002f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20002264 	.word	0x20002264

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e02:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <MX_TIM11_Init+0x44>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 95;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e08:	225f      	movs	r2, #95	; 0x5f
 8001e0a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_TIM11_Init+0x40>)
 8001e28:	f003 fbbd 	bl	80055a6 <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001e32:	f7ff fea3 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000212c 	.word	0x2000212c
 8001e40:	40014800 	.word	0x40014800

08001e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_TIM_Base_MspInit+0x48>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d115      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_TIM_Base_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_TIM_Base_MspInit+0x4c>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_TIM_Base_MspInit+0x4c>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2105      	movs	r1, #5
 8001e76:	201a      	movs	r0, #26
 8001e78:	f000 fed3 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e7c:	201a      	movs	r0, #26
 8001e7e:	f000 feec 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40014800 	.word	0x40014800
 8001e90:	40023800 	.word	0x40023800

08001e94 <usDelay>:
}

/* USER CODE BEGIN 1 */

void usDelay (uint16_t us)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim11);
 8001e9e:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <usDelay+0x34>)
 8001ea0:	f003 fbd0 	bl	8005644 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim11,0);  // set the counter value a 0
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <usDelay+0x34>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim11) < us);  // wait for the counter to reach the us input in the parameter
 8001eac:	bf00      	nop
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <usDelay+0x34>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3f9      	bcc.n	8001eae <usDelay+0x1a>
	HAL_TIM_Base_Stop_IT(&htim11);
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <usDelay+0x34>)
 8001ebc:	f003 fc24 	bl	8005708 <HAL_TIM_Base_Stop_IT>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	2000212c 	.word	0x2000212c

08001ecc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f003 fdf2 	bl	8005aec <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff fe35 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20002174 	.word	0x20002174
 8001f1c:	40011000 	.word	0x40011000

08001f20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_USART2_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f5a:	f003 fdc7 	bl	8005aec <HAL_UART_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001f64:	f7ff fe0a 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200021bc 	.word	0x200021bc
 8001f70:	40004400 	.word	0x40004400

08001f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a78      	ldr	r2, [pc, #480]	; (8002174 <HAL_UART_MspInit+0x200>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f040 80b0 	bne.w	80020f8 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	4a75      	ldr	r2, [pc, #468]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa8:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc4:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a67      	ldr	r2, [pc, #412]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_UART_MspInit+0x204>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = E_USART1_TX_Pin;
 8001fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffe:	2307      	movs	r3, #7
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(E_USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	485c      	ldr	r0, [pc, #368]	; (800217c <HAL_UART_MspInit+0x208>)
 800200a:	f001 f9bd 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = E_USART1_RX_Pin;
 800200e:	2308      	movs	r3, #8
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800201e:	2307      	movs	r3, #7
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(E_USART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4855      	ldr	r0, [pc, #340]	; (8002180 <HAL_UART_MspInit+0x20c>)
 800202a:	f001 f9ad 	bl	8003388 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800202e:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002030:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_UART_MspInit+0x214>)
 8002032:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002036:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_UART_MspInit+0x210>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_UART_MspInit+0x210>)
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_UART_MspInit+0x210>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_UART_MspInit+0x210>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800206e:	4845      	ldr	r0, [pc, #276]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002070:	f000 fe0e 	bl	8002c90 <HAL_DMA_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800207a:	f7ff fd7f 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a40      	ldr	r2, [pc, #256]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
 8002084:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <HAL_UART_MspInit+0x210>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800208a:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_UART_MspInit+0x218>)
 800208c:	4a40      	ldr	r2, [pc, #256]	; (8002190 <HAL_UART_MspInit+0x21c>)
 800208e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_UART_MspInit+0x218>)
 8002092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002096:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002098:	4b3c      	ldr	r3, [pc, #240]	; (800218c <HAL_UART_MspInit+0x218>)
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_UART_MspInit+0x218>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_UART_MspInit+0x218>)
 80020a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_UART_MspInit+0x218>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_UART_MspInit+0x218>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_UART_MspInit+0x218>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_UART_MspInit+0x218>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_UART_MspInit+0x218>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020ca:	4830      	ldr	r0, [pc, #192]	; (800218c <HAL_UART_MspInit+0x218>)
 80020cc:	f000 fde0 	bl	8002c90 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80020d6:	f7ff fd51 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2b      	ldr	r2, [pc, #172]	; (800218c <HAL_UART_MspInit+0x218>)
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_UART_MspInit+0x218>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2105      	movs	r1, #5
 80020ea:	2025      	movs	r0, #37	; 0x25
 80020ec:	f000 fd99 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020f0:	2025      	movs	r0, #37	; 0x25
 80020f2:	f000 fdb2 	bl	8002c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020f6:	e038      	b.n	800216a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_UART_MspInit+0x220>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d133      	bne.n	800216a <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_UART_MspInit+0x204>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_UART_MspInit+0x204>)
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_UART_MspInit+0x204>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_UART_MspInit+0x204>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_UART_MspInit+0x204>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_UART_MspInit+0x204>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USART2_TX_NRF_RX_Pin|USART2_RX_NRF_TX_Pin;
 800213a:	230f      	movs	r3, #15
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214a:	2307      	movs	r3, #7
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <HAL_UART_MspInit+0x208>)
 8002156:	f001 f917 	bl	8003388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2105      	movs	r1, #5
 800215e:	2026      	movs	r0, #38	; 0x26
 8002160:	f000 fd5f 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002164:	2026      	movs	r0, #38	; 0x26
 8002166:	f000 fd78 	bl	8002c5a <HAL_NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40011000 	.word	0x40011000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	20002204 	.word	0x20002204
 8002188:	40026440 	.word	0x40026440
 800218c:	20002264 	.word	0x20002264
 8002190:	400264b8 	.word	0x400264b8
 8002194:	40004400 	.word	0x40004400

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219c:	f7ff fe1c 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f00b f90d 	bl	800d3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fb8f 	bl	80018ec <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 80021dc:	0800dd98 	.word	0x0800dd98
  ldr r2, =_sbss
 80021e0:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 80021e4:	2000805c 	.word	0x2000805c

080021e8 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <DMA1_Stream1_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 fcf9 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fd30 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fd11 	bl	8002c76 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800226c:	f000 fcd9 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000274 	.word	0x20000274
 8002288:	2000027c 	.word	0x2000027c
 800228c:	20000278 	.word	0x20000278

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000027c 	.word	0x2000027c
 80022b4:	200022c4 	.word	0x200022c4

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200022c4 	.word	0x200022c4

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000027c 	.word	0x2000027c

08002318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e033      	b.n	8002396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f8b8 	bl	80014ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235e:	f023 0302 	bic.w	r3, r3, #2
 8002362:	f043 0202 	orr.w	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa78 	bl	8002860 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
 8002386:	e001      	b.n	800238c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d049      	beq.n	8002468 <HAL_ADC_IRQHandler+0xca>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d046      	beq.n	8002468 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d12b      	bne.n	8002458 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002404:	2b00      	cmp	r3, #0
 8002406:	d127      	bne.n	8002458 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002420:	2b00      	cmp	r3, #0
 8002422:	d119      	bne.n	8002458 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0220 	bic.w	r2, r2, #32
 8002432:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8b0 	bl	80025be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0212 	mvn.w	r2, #18
 8002466:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d057      	beq.n	800252e <HAL_ADC_IRQHandler+0x190>
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d054      	beq.n	800252e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d139      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d12b      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d124      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11d      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fa9a 	bl	8002a58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 020c 	mvn.w	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_ADC_IRQHandler+0x1d6>
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d014      	beq.n	8002574 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10d      	bne.n	8002574 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f834 	bl	80025d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0201 	mvn.w	r2, #1
 8002572:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002582:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x218>
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f043 0202 	orr.w	r2, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0220 	mvn.w	r2, #32
 80025a4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f81d 	bl	80025e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0220 	mvn.w	r2, #32
 80025b4:	601a      	str	r2, [r3, #0]
  }
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1c>
 8002614:	2302      	movs	r3, #2
 8002616:	e113      	b.n	8002840 <HAL_ADC_ConfigChannel+0x244>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b09      	cmp	r3, #9
 8002626:	d925      	bls.n	8002674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	3b1e      	subs	r3, #30
 800263e:	2207      	movs	r2, #7
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43da      	mvns	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	400a      	ands	r2, r1
 800264c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	4603      	mov	r3, r0
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4403      	add	r3, r0
 8002666:	3b1e      	subs	r3, #30
 8002668:	409a      	lsls	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	e022      	b.n	80026ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	2207      	movs	r2, #7
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4403      	add	r3, r0
 80026b0:	409a      	lsls	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d824      	bhi.n	800270c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b05      	subs	r3, #5
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b05      	subs	r3, #5
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
 800270a:	e04c      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d824      	bhi.n	800275e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b23      	subs	r3, #35	; 0x23
 8002726:	221f      	movs	r2, #31
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43da      	mvns	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	400a      	ands	r2, r1
 8002734:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b23      	subs	r3, #35	; 0x23
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
 800275c:	e023      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b41      	subs	r3, #65	; 0x41
 8002770:	221f      	movs	r2, #31
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b41      	subs	r3, #65	; 0x41
 800279a:	fa00 f203 	lsl.w	r2, r0, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_ADC_ConfigChannel+0x250>)
 80027a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a28      	ldr	r2, [pc, #160]	; (8002850 <HAL_ADC_ConfigChannel+0x254>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10f      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d8>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d10b      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_ADC_ConfigChannel+0x254>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d12b      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_ADC_ConfigChannel+0x258>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <HAL_ADC_ConfigChannel+0x1f4>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d122      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x258>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_ADC_ConfigChannel+0x25c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_ADC_ConfigChannel+0x260>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9a      	lsrs	r2, r3, #18
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002828:	e002      	b.n	8002830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3b01      	subs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012300 	.word	0x40012300
 8002850:	40012000 	.word	0x40012000
 8002854:	10000012 	.word	0x10000012
 8002858:	20000274 	.word	0x20000274
 800285c:	431bde83 	.word	0x431bde83

08002860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002868:	4b79      	ldr	r3, [pc, #484]	; (8002a50 <ADC_Init+0x1f0>)
 800286a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	021a      	lsls	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <ADC_Init+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e00f      	b.n	800295e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0202 	bic.w	r2, r2, #2
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
 8002978:	005a      	lsls	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	3b01      	subs	r3, #1
 80029b8:	035a      	lsls	r2, r3, #13
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e007      	b.n	80029d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	051a      	lsls	r2, r3, #20
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a16:	025a      	lsls	r2, r3, #9
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	029a      	lsls	r2, r3, #10
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012300 	.word	0x40012300
 8002a54:	0f000001 	.word	0x0f000001

08002a58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff fb0c 	bl	80022b8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e099      	b.n	8002de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	e00f      	b.n	8002cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cce:	f7ff faf3 	bl	80022b8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d908      	bls.n	8002cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e078      	b.n	8002de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e8      	bne.n	8002cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_DMA_Init+0x158>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4313      	orrs	r3, r2
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d117      	bne.n	8002db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa7b 	bl	8003290 <DMA_CheckFifoParam>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dae:	2301      	movs	r3, #1
 8002db0:	e016      	b.n	8002de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa32 	bl	8003224 <DMA_CalcBaseAndBitshift>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	223f      	movs	r2, #63	; 0x3f
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	f010803f 	.word	0xf010803f

08002dec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dfa:	f7ff fa5d 	bl	80022b8 <HAL_GetTick>
 8002dfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d008      	beq.n	8002e1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e052      	b.n	8002ec4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0216 	bic.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <HAL_DMA_Abort+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0208 	bic.w	r2, r2, #8
 8002e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6e:	e013      	b.n	8002e98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e70:	f7ff fa22 	bl	80022b8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d90c      	bls.n	8002e98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2203      	movs	r2, #3
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e015      	b.n	8002ec4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e4      	bne.n	8002e70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	223f      	movs	r2, #63	; 0x3f
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d004      	beq.n	8002eea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00c      	b.n	8002f04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2205      	movs	r2, #5
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f1c:	4b8e      	ldr	r3, [pc, #568]	; (8003158 <HAL_DMA_IRQHandler+0x248>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a8e      	ldr	r2, [pc, #568]	; (800315c <HAL_DMA_IRQHandler+0x24c>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01a      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	2208      	movs	r2, #8
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d012      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f043 0202 	orr.w	r2, r3, #2
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d012      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2210      	movs	r2, #16
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d043      	beq.n	8003080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03c      	beq.n	8003080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2210      	movs	r2, #16
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d018      	beq.n	8003052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
 800303e:	e01f      	b.n	8003080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
 8003050:	e016      	b.n	8003080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0208 	bic.w	r2, r2, #8
 800306e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	2220      	movs	r2, #32
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 808f 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 8087 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	2220      	movs	r2, #32
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d136      	bne.n	8003128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0216 	bic.w	r2, r2, #22
 80030c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_DMA_IRQHandler+0x1da>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0208 	bic.w	r2, r2, #8
 80030f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	223f      	movs	r2, #63	; 0x3f
 8003100:	409a      	lsls	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311a:	2b00      	cmp	r3, #0
 800311c:	d07e      	beq.n	800321c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
        }
        return;
 8003126:	e079      	b.n	800321c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003148:	2b00      	cmp	r3, #0
 800314a:	d031      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
 8003154:	e02c      	b.n	80031b0 <HAL_DMA_IRQHandler+0x2a0>
 8003156:	bf00      	nop
 8003158:	20000274 	.word	0x20000274
 800315c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d023      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e01e      	b.n	80031b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10f      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0210 	bic.w	r2, r2, #16
 800318e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d032      	beq.n	800321e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d022      	beq.n	800320a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2205      	movs	r2, #5
 80031c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3301      	adds	r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d307      	bcc.n	80031f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f2      	bne.n	80031dc <HAL_DMA_IRQHandler+0x2cc>
 80031f6:	e000      	b.n	80031fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
 800321a:	e000      	b.n	800321e <HAL_DMA_IRQHandler+0x30e>
        return;
 800321c:	bf00      	nop
    }
  }
}
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3b10      	subs	r3, #16
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <DMA_CalcBaseAndBitshift+0x64>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <DMA_CalcBaseAndBitshift+0x68>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d909      	bls.n	8003266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	659a      	str	r2, [r3, #88]	; 0x58
 8003264:	e007      	b.n	8003276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	aaaaaaab 	.word	0xaaaaaaab
 800328c:	0800dd80 	.word	0x0800dd80

08003290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11f      	bne.n	80032ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d856      	bhi.n	800335e <DMA_CheckFifoParam+0xce>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <DMA_CheckFifoParam+0x28>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032db 	.word	0x080032db
 80032c0:	080032c9 	.word	0x080032c9
 80032c4:	0800335f 	.word	0x0800335f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d046      	beq.n	8003362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e043      	b.n	8003362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032e2:	d140      	bne.n	8003366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e03d      	b.n	8003366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	d121      	bne.n	8003338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d837      	bhi.n	800336a <DMA_CheckFifoParam+0xda>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <DMA_CheckFifoParam+0x70>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003311 	.word	0x08003311
 8003304:	08003317 	.word	0x08003317
 8003308:	08003311 	.word	0x08003311
 800330c:	08003329 	.word	0x08003329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e030      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d025      	beq.n	800336e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003326:	e022      	b.n	800336e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003330:	d11f      	bne.n	8003372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003336:	e01c      	b.n	8003372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d903      	bls.n	8003346 <DMA_CheckFifoParam+0xb6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003344:	e018      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      break;
 800334a:	e015      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00e      	beq.n	8003376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e00b      	b.n	8003376 <DMA_CheckFifoParam+0xe6>
      break;
 800335e:	bf00      	nop
 8003360:	e00a      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e008      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e006      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;   
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
    }
  } 
  
  return status; 
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e159      	b.n	8003658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8148 	bne.w	8003652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a2 	beq.w	8003652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b57      	ldr	r3, [pc, #348]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b54      	ldr	r3, [pc, #336]	; (8003670 <HAL_GPIO_Init+0x2e8>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a49      	ldr	r2, [pc, #292]	; (8003678 <HAL_GPIO_Init+0x2f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d019      	beq.n	800358a <HAL_GPIO_Init+0x202>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2f4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x1fe>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_GPIO_Init+0x2f8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x1fa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_GPIO_Init+0x2fc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x1f6>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a45      	ldr	r2, [pc, #276]	; (8003688 <HAL_GPIO_Init+0x300>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x1f2>
 8003576:	2304      	movs	r3, #4
 8003578:	e008      	b.n	800358c <HAL_GPIO_Init+0x204>
 800357a:	2307      	movs	r3, #7
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x204>
 800357e:	2303      	movs	r3, #3
 8003580:	e004      	b.n	800358c <HAL_GPIO_Init+0x204>
 8003582:	2302      	movs	r3, #2
 8003584:	e002      	b.n	800358c <HAL_GPIO_Init+0x204>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_GPIO_Init+0x204>
 800358a:	2300      	movs	r3, #0
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f002 0203 	and.w	r2, r2, #3
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	4093      	lsls	r3, r2
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800359c:	4935      	ldr	r1, [pc, #212]	; (8003674 <HAL_GPIO_Init+0x2ec>)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	3302      	adds	r3, #2
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035aa:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_GPIO_Init+0x304>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_GPIO_Init+0x304>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_GPIO_Init+0x304>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_GPIO_Init+0x304>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <HAL_GPIO_Init+0x304>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003622:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_GPIO_Init+0x304>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <HAL_GPIO_Init+0x304>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800364c:	4a0f      	ldr	r2, [pc, #60]	; (800368c <HAL_GPIO_Init+0x304>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3301      	adds	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	f67f aea2 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40013800 	.word	0x40013800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e101      	b.n	80038d8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f009 fafc 	bl	800ccec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003702:	d102      	bne.n	800370a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fa21 	bl	8006b56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7c1a      	ldrb	r2, [r3, #16]
 800371c:	f88d 2000 	strb.w	r2, [sp]
 8003720:	3304      	adds	r3, #4
 8003722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003724:	f003 f900 	bl	8006928 <USB_CoreInit>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0ce      	b.n	80038d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f003 fa19 	bl	8006b78 <USB_SetCurrentMode>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0bf      	b.n	80038d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e04a      	b.n	80037f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3315      	adds	r3, #21
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3314      	adds	r3, #20
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	b298      	uxth	r0, r3
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	332e      	adds	r3, #46	; 0x2e
 800379a:	4602      	mov	r2, r0
 800379c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3318      	adds	r3, #24
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	331c      	adds	r3, #28
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3320      	adds	r3, #32
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3324      	adds	r3, #36	; 0x24
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	3301      	adds	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	791b      	ldrb	r3, [r3, #4]
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3af      	bcc.n	800375e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e044      	b.n	800388e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3301      	adds	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	791b      	ldrb	r3, [r3, #4]
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	429a      	cmp	r2, r3
 8003896:	d3b5      	bcc.n	8003804 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7c1a      	ldrb	r2, [r3, #16]
 80038a0:	f88d 2000 	strb.w	r2, [sp]
 80038a4:	3304      	adds	r3, #4
 80038a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a8:	f003 f9b2 	bl	8006c10 <USB_DevInit>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00c      	b.n	80038d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 f9f6 	bl	8007cc2 <USB_DevDisconnect>

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_PCD_Start+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e022      	b.n	8003942 <HAL_PCD_Start+0x62>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f003 f903 	bl	8006b34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 f9a4 	bl	8007c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800394a:	b590      	push	{r4, r7, lr}
 800394c:	b08d      	sub	sp, #52	; 0x34
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fa62 	bl	8007e2a <USB_GetMode>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	f040 848c 	bne.w	8004286 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f004 f9c6 	bl	8007d04 <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8482 	beq.w	8004284 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f004 f9b3 	bl	8007d04 <USB_ReadInterrupts>
 800399e:	4603      	mov	r3, r0
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f002 0202 	and.w	r2, r2, #2
 80039b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 f9a1 	bl	8007d04 <USB_ReadInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d161      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0210 	bic.w	r2, r2, #16
 80039da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 020f 	and.w	r2, r3, #15
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	3304      	adds	r3, #4
 80039fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	0c5b      	lsrs	r3, r3, #17
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d124      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d035      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6a38      	ldr	r0, [r7, #32]
 8003a28:	f003 ffd8 	bl	80079dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a38:	441a      	add	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4a:	441a      	add	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	615a      	str	r2, [r3, #20]
 8003a50:	e016      	b.n	8003a80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	0c5b      	lsrs	r3, r3, #17
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d110      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a64:	2208      	movs	r2, #8
 8003a66:	4619      	mov	r1, r3
 8003a68:	6a38      	ldr	r0, [r7, #32]
 8003a6a:	f003 ffb7 	bl	80079dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7a:	441a      	add	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0210 	orr.w	r2, r2, #16
 8003a8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f004 f935 	bl	8007d04 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aa4:	f040 80a7 	bne.w	8003bf6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 f93a 	bl	8007d2a <USB_ReadDevAllOutEpInterrupt>
 8003ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ab8:	e099      	b.n	8003bee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808e 	beq.w	8003be2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f004 f95e 	bl	8007d92 <USB_ReadDevOutEPInterrupt>
 8003ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	2301      	movs	r3, #1
 8003af2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fea2 	bl	8004840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	2308      	movs	r3, #8
 8003b16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 ff78 	bl	8004a10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	461a      	mov	r2, r3
 8003b38:	2310      	movs	r3, #16
 8003b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d030      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b80      	cmp	r3, #128	; 0x80
 8003b50:	d109      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	78db      	ldrb	r3, [r3, #3]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d108      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f009 f9a7 	bl	800cee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	3301      	adds	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f af62 	bne.w	8003aba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f004 f882 	bl	8007d04 <USB_ReadInterrupts>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0a:	f040 80db 	bne.w	8003dc4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 f8a3 	bl	8007d5e <USB_ReadDevAllInEpInterrupt>
 8003c18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c1e:	e0cd      	b.n	8003dbc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80c2 	beq.w	8003db0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 f8c9 	bl	8007dce <USB_ReadDevInEPInterrupt>
 8003c3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d057      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	2201      	movs	r2, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69f9      	ldr	r1, [r7, #28]
 8003c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c68:	4013      	ands	r3, r2
 8003c6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	799b      	ldrb	r3, [r3, #6]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d132      	bne.n	8003cec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3320      	adds	r3, #32
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4403      	add	r3, r0
 8003ca6:	331c      	adds	r3, #28
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4419      	add	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4403      	add	r3, r0
 8003cba:	3320      	adds	r3, #32
 8003cbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d113      	bne.n	8003cec <HAL_PCD_IRQHandler+0x3a2>
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	f004 f8d0 	bl	8007e8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f009 f87b 	bl	800cdee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2308      	movs	r3, #8
 8003d12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	461a      	mov	r2, r3
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d023      	beq.n	8003d9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d58:	6a38      	ldr	r0, [r7, #32]
 8003d5a:	f003 f8bd 	bl	8006ed8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3310      	adds	r3, #16
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	78db      	ldrb	r3, [r3, #3]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d108      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f009 f8be 	bl	800cf08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fcbb 	bl	8004726 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	3301      	adds	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f47f af2e 	bne.w	8003c20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 ff9b 	bl	8007d04 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd8:	d122      	bne.n	8003e20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d108      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e00:	2100      	movs	r1, #0
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fea2 	bl	8004b4c <HAL_PCDEx_LPM_Callback>
 8003e08:	e002      	b.n	8003e10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f009 f85c 	bl	800cec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 ff6d 	bl	8007d04 <USB_ReadInterrupts>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d112      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f009 f818 	bl	800ce7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e5a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f003 ff4f 	bl	8007d04 <USB_ReadInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	f040 80b7 	bne.w	8003fe2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2110      	movs	r1, #16
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f003 f822 	bl	8006ed8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e98:	e046      	b.n	8003f28 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	461a      	mov	r2, r3
 8003edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ee0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	3301      	adds	r3, #1
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	791b      	ldrb	r3, [r3, #4]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d3b2      	bcc.n	8003e9a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7bdb      	ldrb	r3, [r3, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f60:	f043 030b 	orr.w	r3, r3, #11
 8003f64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f76:	f043 030b 	orr.w	r3, r3, #11
 8003f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7c:	e015      	b.n	8003faa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa4:	f043 030b 	orr.w	r3, r3, #11
 8003fa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f003 ff5d 	bl	8007e8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 fe8c 	bl	8007d04 <USB_ReadInterrupts>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff6:	d123      	bne.n	8004040 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 ff22 	bl	8007e46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f002 ffdf 	bl	8006fca <USB_GetDevSpeed>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681c      	ldr	r4, [r3, #0]
 8004018:	f001 fa08 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800401c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004022:	461a      	mov	r2, r3
 8004024:	4620      	mov	r0, r4
 8004026:	f002 fce3 	bl	80069f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f008 ff07 	bl	800ce3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800403e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f003 fe5d 	bl	8007d04 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10a      	bne.n	800406a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f008 fee4 	bl	800ce22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f002 0208 	and.w	r2, r2, #8
 8004068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f003 fe48 	bl	8007d04 <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d123      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800408a:	2301      	movs	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e014      	b.n	80040ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb08 	bl	80046c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	3301      	adds	r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	791b      	ldrb	r3, [r3, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d3e4      	bcc.n	8004090 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fe1a 	bl	8007d04 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d13c      	bne.n	8004156 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040dc:	2301      	movs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
 80040e0:	e02b      	b.n	800413a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3318      	adds	r3, #24
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d115      	bne.n	8004134 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004108:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	da12      	bge.n	8004134 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3317      	adds	r3, #23
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fac8 	bl	80046c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	3301      	adds	r3, #1
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	461a      	mov	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	4293      	cmp	r3, r2
 8004144:	d3cd      	bcc.n	80040e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 fdd2 	bl	8007d04 <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416a:	d156      	bne.n	800421a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e045      	b.n	80041fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d12e      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800419a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800419c:	2b00      	cmp	r3, #0
 800419e:	da2b      	bge.n	80041f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80041ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d121      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041f4:	6053      	str	r3, [r2, #4]
            break;
 80041f6:	e008      	b.n	800420a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	3301      	adds	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	4293      	cmp	r3, r2
 8004208:	d3b3      	bcc.n	8004172 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fd70 	bl	8007d04 <USB_ReadInterrupts>
 8004224:	4603      	mov	r3, r0
 8004226:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d10a      	bne.n	8004246 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f008 fe7b 	bl	800cf2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f003 fd5a 	bl	8007d04 <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d115      	bne.n	8004286 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f008 fe6b 	bl	800cf48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	e000      	b.n	8004286 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004284:	bf00      	nop
    }
  }
}
 8004286:	3734      	adds	r7, #52	; 0x34
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}

0800428c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_PCD_SetAddress+0x1a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e012      	b.n	80042cc <HAL_PCD_SetAddress+0x40>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 fcb9 	bl	8007c34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	70fb      	strb	r3, [r7, #3]
 80042e6:	460b      	mov	r3, r1
 80042e8:	803b      	strh	r3, [r7, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da0f      	bge.n	800431a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	3310      	adds	r3, #16
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	705a      	strb	r2, [r3, #1]
 8004318:	e00f      	b.n	800433a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004346:	883a      	ldrh	r2, [r7, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	78ba      	ldrb	r2, [r7, #2]
 8004350:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004364:	78bb      	ldrb	r3, [r7, #2]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d102      	bne.n	8004370 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_PCD_EP_Open+0xaa>
 800437a:	2302      	movs	r3, #2
 800437c:	e00e      	b.n	800439c <HAL_PCD_EP_Open+0xc8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	4618      	mov	r0, r3
 800438e:	f002 fe41 	bl	8007014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800439a:	7afb      	ldrb	r3, [r7, #11]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da0f      	bge.n	80043d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	3310      	adds	r3, #16
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	705a      	strb	r2, [r3, #1]
 80043d6:	e00f      	b.n	80043f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 020f 	and.w	r2, r3, #15
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_PCD_EP_Close+0x6e>
 800440e:	2302      	movs	r3, #2
 8004410:	e00e      	b.n	8004430 <HAL_PCD_EP_Close+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fe7f 	bl	8007124 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	b2da      	uxtb	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	799b      	ldrb	r3, [r3, #6]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	799b      	ldrb	r3, [r3, #6]
 800449c:	461a      	mov	r2, r3
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	f002 ff1c 	bl	80072dc <USB_EPStartXfer>

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80044d0:	681b      	ldr	r3, [r3, #0]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	460b      	mov	r3, r1
 80044ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3310      	adds	r3, #16
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	3304      	adds	r3, #4
 8004504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2201      	movs	r2, #1
 800451c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	799b      	ldrb	r3, [r3, #6]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d102      	bne.n	8004538 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	799b      	ldrb	r3, [r3, #6]
 8004540:	461a      	mov	r2, r3
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	f002 feca 	bl	80072dc <USB_EPStartXfer>

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	7912      	ldrb	r2, [r2, #4]
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e04f      	b.n	8004610 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da0f      	bge.n	8004598 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	3310      	adds	r3, #16
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	705a      	strb	r2, [r3, #1]
 8004596:	e00d      	b.n	80045b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	3304      	adds	r3, #4
 80045ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_PCD_EP_SetStall+0x82>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e01d      	b.n	8004610 <HAL_PCD_EP_SetStall+0xbe>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fa52 	bl	8007a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7999      	ldrb	r1, [r3, #6]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004600:	461a      	mov	r2, r3
 8004602:	f003 fc43 	bl	8007e8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	7912      	ldrb	r2, [r2, #4]
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e042      	b.n	80046bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	da0f      	bge.n	800465e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	f003 020f 	and.w	r2, r3, #15
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3310      	adds	r3, #16
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	3304      	adds	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	705a      	strb	r2, [r3, #1]
 800465c:	e00f      	b.n	800467e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_PCD_EP_ClrStall+0x86>
 800469a:	2302      	movs	r3, #2
 800469c:	e00e      	b.n	80046bc <HAL_PCD_EP_ClrStall+0xa4>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f003 fa5b 	bl	8007b68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da0c      	bge.n	80046f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	3310      	adds	r3, #16
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e00c      	b.n	800470c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	f003 020f 	and.w	r2, r3, #15
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f003 f87a 	bl	800780c <USB_EPStopXfer>
 8004718:	4603      	mov	r3, r0
 800471a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800471c:	7afb      	ldrb	r3, [r7, #11]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08a      	sub	sp, #40	; 0x28
 800472a:	af02      	add	r7, sp, #8
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	3310      	adds	r3, #16
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	429a      	cmp	r2, r3
 8004758:	d901      	bls.n	800475e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06b      	b.n	8004836 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	429a      	cmp	r2, r3
 8004772:	d902      	bls.n	800477a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3303      	adds	r3, #3
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004782:	e02a      	b.n	80047da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	429a      	cmp	r2, r3
 8004798:	d902      	bls.n	80047a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3303      	adds	r3, #3
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68d9      	ldr	r1, [r3, #12]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	4603      	mov	r3, r0
 80047bc:	6978      	ldr	r0, [r7, #20]
 80047be:	f003 f8cf 	bl	8007960 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d809      	bhi.n	8004804 <PCD_WriteEmptyTxFifo+0xde>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d203      	bcs.n	8004804 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1bf      	bne.n	8004784 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d811      	bhi.n	8004834 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	43db      	mvns	r3, r3
 800482a:	6939      	ldr	r1, [r7, #16]
 800482c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004830:	4013      	ands	r3, r2
 8004832:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	333c      	adds	r3, #60	; 0x3c
 8004858:	3304      	adds	r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	799b      	ldrb	r3, [r3, #6]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d17b      	bne.n	800496e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	4a61      	ldr	r2, [pc, #388]	; (8004a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	f240 80b9 	bls.w	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80b3 	beq.w	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a8:	6093      	str	r3, [r2, #8]
 80048aa:	e0a7      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	461a      	mov	r2, r3
 80048c4:	2320      	movs	r3, #32
 80048c6:	6093      	str	r3, [r2, #8]
 80048c8:	e098      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 8093 	bne.w	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d90f      	bls.n	80048fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	461a      	mov	r2, r3
 80048f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fa:	6093      	str	r3, [r2, #8]
 80048fc:	e07e      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	3304      	adds	r3, #4
 8004912:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	0159      	lsls	r1, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	440b      	add	r3, r1
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d114      	bne.n	8004960 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004948:	461a      	mov	r2, r3
 800494a:	2101      	movs	r1, #1
 800494c:	f003 fa9e 	bl	8007e8c <USB_EP0_OutStart>
 8004950:	e006      	b.n	8004960 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	441a      	add	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f008 fa26 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
 800496c:	e046      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d124      	bne.n	80049c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	461a      	mov	r2, r3
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	6093      	str	r3, [r2, #8]
 8004994:	e032      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	2320      	movs	r3, #32
 80049b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f008 f9fd 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
 80049be:	e01d      	b.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d114      	bne.n	80049f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80049e8:	461a      	mov	r2, r3
 80049ea:	2100      	movs	r1, #0
 80049ec:	f003 fa4e 	bl	8007e8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f008 f9de 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	4f54300a 	.word	0x4f54300a
 8004a0c:	4f54310a 	.word	0x4f54310a

08004a10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	333c      	adds	r3, #60	; 0x3c
 8004a28:	3304      	adds	r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d90e      	bls.n	8004a64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f008 f995 	bl	800cd94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d90c      	bls.n	8004a8c <PCD_EP_OutSetupPacket_int+0x7c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	799b      	ldrb	r3, [r3, #6]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d108      	bne.n	8004a8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a84:	461a      	mov	r2, r3
 8004a86:	2101      	movs	r1, #1
 8004a88:	f003 fa00 	bl	8007e8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	4f54300a 	.word	0x4f54300a

08004a9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004aba:	883b      	ldrh	r3, [r7, #0]
 8004abc:	0419      	lsls	r1, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ac8:	e028      	b.n	8004b1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e00d      	b.n	8004afa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	3340      	adds	r3, #64	; 0x40
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	3301      	adds	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d3ec      	bcc.n	8004ade <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b04:	883b      	ldrh	r3, [r7, #0]
 8004b06:	0418      	lsls	r0, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4302      	orrs	r2, r0
 8004b14:	3340      	adds	r3, #64	; 0x40
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	887a      	ldrh	r2, [r7, #2]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e267      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d075      	beq.n	8004c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8e:	4b85      	ldr	r3, [pc, #532]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d112      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b82      	ldr	r3, [pc, #520]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	4b7e      	ldr	r3, [pc, #504]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05b      	beq.n	8004c6c <HAL_RCC_OscConfig+0x108>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d157      	bne.n	8004c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e242      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x74>
 8004bca:	4b76      	ldr	r3, [pc, #472]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a75      	ldr	r2, [pc, #468]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e01d      	b.n	8004c14 <HAL_RCC_OscConfig+0xb0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x98>
 8004be2:	4b70      	ldr	r3, [pc, #448]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6f      	ldr	r2, [pc, #444]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b6d      	ldr	r3, [pc, #436]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6c      	ldr	r2, [pc, #432]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCC_OscConfig+0xb0>
 8004bfc:	4b69      	ldr	r3, [pc, #420]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a68      	ldr	r2, [pc, #416]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a65      	ldr	r2, [pc, #404]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fb4c 	bl	80022b8 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fd fb48 	bl	80022b8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e207      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	4b5b      	ldr	r3, [pc, #364]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0xc0>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fd fb38 	bl	80022b8 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fd fb34 	bl	80022b8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1f3      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5e:	4b51      	ldr	r3, [pc, #324]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0xe8>
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d063      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c86:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d11c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c92:	4b44      	ldr	r3, [pc, #272]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d116      	bne.n	8004ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	4b41      	ldr	r3, [pc, #260]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x152>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1c7      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4937      	ldr	r1, [pc, #220]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	e03a      	b.n	8004d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd4:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCC_OscConfig+0x244>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7fd faed 	bl	80022b8 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7fd fae9 	bl	80022b8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e1a8      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4925      	ldr	r1, [pc, #148]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_RCC_OscConfig+0x244>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fd facc 	bl	80022b8 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fd fac8 	bl	80022b8 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e187      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d036      	beq.n	8004dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_RCC_OscConfig+0x248>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd faac 	bl	80022b8 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd faa8 	bl	80022b8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e167      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x200>
 8004d82:	e01b      	b.n	8004dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_OscConfig+0x248>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fd fa95 	bl	80022b8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	e00e      	b.n	8004db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d92:	f7fd fa91 	bl	80022b8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d907      	bls.n	8004db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e150      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	42470000 	.word	0x42470000
 8004dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ea      	bne.n	8004d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8097 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a7c      	ldr	r2, [pc, #496]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dea:	4b7a      	ldr	r3, [pc, #488]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d118      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e06:	4b74      	ldr	r3, [pc, #464]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e12:	f7fd fa51 	bl	80022b8 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fd fa4d 	bl	80022b8 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e10c      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2ea>
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a63      	ldr	r2, [pc, #396]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e01c      	b.n	8004e88 <HAL_RCC_OscConfig+0x324>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x30c>
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4a5e      	ldr	r2, [pc, #376]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	6713      	str	r3, [r2, #112]	; 0x70
 8004e62:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a5b      	ldr	r2, [pc, #364]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0x324>
 8004e70:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7c:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a54      	ldr	r2, [pc, #336]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f023 0304 	bic.w	r3, r3, #4
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fd fa12 	bl	80022b8 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e98:	f7fd fa0e 	bl	80022b8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0cb      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eae:	4b49      	ldr	r3, [pc, #292]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ee      	beq.n	8004e98 <HAL_RCC_OscConfig+0x334>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd f9fc 	bl	80022b8 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fd f9f8 	bl	80022b8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0b5      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ee      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eec:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	4a38      	ldr	r2, [pc, #224]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a1 	beq.w	8005044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d05c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d141      	bne.n	8004f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fd f9cc 	bl	80022b8 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fd f9c8 	bl	80022b8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e087      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	491b      	ldr	r1, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fd f9a1 	bl	80022b8 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fd f99d 	bl	80022b8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e05c      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x416>
 8004f98:	e054      	b.n	8005044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd f98a 	bl	80022b8 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd f986 	bl	80022b8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e045      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x444>
 8004fc6:	e03d      	b.n	8005044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e038      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <HAL_RCC_OscConfig+0x4ec>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d028      	beq.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d121      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d11a      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005018:	4293      	cmp	r3, r2
 800501a:	d111      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	3b01      	subs	r3, #1
 800502a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800

08005054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0cc      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005068:	4b68      	ldr	r3, [pc, #416]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90c      	bls.n	8005090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005076:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0b8      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a8:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a58      	ldr	r2, [pc, #352]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a52      	ldr	r2, [pc, #328]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	494d      	ldr	r1, [pc, #308]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d044      	beq.n	8005174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d119      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d003      	beq.n	8005112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510e:	2b03      	cmp	r3, #3
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005112:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e06f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005122:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e067      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005132:	4b37      	ldr	r3, [pc, #220]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 0203 	bic.w	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4934      	ldr	r1, [pc, #208]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005144:	f7fd f8b8 	bl	80022b8 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514a:	e00a      	b.n	8005162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7fd f8b4 	bl	80022b8 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e04f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 020c 	and.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	429a      	cmp	r2, r3
 8005172:	d1eb      	bne.n	800514c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d20c      	bcs.n	800519c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e032      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4916      	ldr	r1, [pc, #88]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	490e      	ldr	r1, [pc, #56]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051da:	f000 f821 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd f818 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023c00 	.word	0x40023c00
 8005210:	40023800 	.word	0x40023800
 8005214:	0800dd68 	.word	0x0800dd68
 8005218:	20000274 	.word	0x20000274
 800521c:	20000278 	.word	0x20000278

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b094      	sub	sp, #80	; 0x50
 8005226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
 800522c:	2300      	movs	r3, #0
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005230:	2300      	movs	r3, #0
 8005232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005238:	4b79      	ldr	r3, [pc, #484]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d00d      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x40>
 8005244:	2b08      	cmp	r3, #8
 8005246:	f200 80e1 	bhi.w	800540c <HAL_RCC_GetSysClockFreq+0x1ec>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 800524e:	2b04      	cmp	r3, #4
 8005250:	d003      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x3a>
 8005252:	e0db      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005254:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_GetSysClockFreq+0x204>)
 8005256:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005258:	e0db      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800525a:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCC_GetSysClockFreq+0x208>)
 800525c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525e:	e0d8      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800526a:	4b6d      	ldr	r3, [pc, #436]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d063      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005280:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	0159      	lsls	r1, r3, #5
 80052a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a4:	0150      	lsls	r0, r2, #5
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4621      	mov	r1, r4
 80052ac:	1a51      	subs	r1, r2, r1
 80052ae:	6139      	str	r1, [r7, #16]
 80052b0:	4629      	mov	r1, r5
 80052b2:	eb63 0301 	sbc.w	r3, r3, r1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c4:	4659      	mov	r1, fp
 80052c6:	018b      	lsls	r3, r1, #6
 80052c8:	4651      	mov	r1, sl
 80052ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ce:	4651      	mov	r1, sl
 80052d0:	018a      	lsls	r2, r1, #6
 80052d2:	4651      	mov	r1, sl
 80052d4:	ebb2 0801 	subs.w	r8, r2, r1
 80052d8:	4659      	mov	r1, fp
 80052da:	eb63 0901 	sbc.w	r9, r3, r1
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f2:	4690      	mov	r8, r2
 80052f4:	4699      	mov	r9, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	eb18 0303 	adds.w	r3, r8, r3
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	462b      	mov	r3, r5
 8005300:	eb49 0303 	adc.w	r3, r9, r3
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005312:	4629      	mov	r1, r5
 8005314:	024b      	lsls	r3, r1, #9
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800531c:	4621      	mov	r1, r4
 800531e:	024a      	lsls	r2, r1, #9
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	2200      	movs	r2, #0
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
 800532a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005330:	f7fa ff60 	bl	80001f4 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	e058      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	2200      	movs	r2, #0
 8005346:	4618      	mov	r0, r3
 8005348:	4611      	mov	r1, r2
 800534a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	2300      	movs	r3, #0
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
 8005354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	0159      	lsls	r1, r3, #5
 8005366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536a:	0150      	lsls	r0, r2, #5
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4641      	mov	r1, r8
 8005372:	ebb2 0a01 	subs.w	sl, r2, r1
 8005376:	4649      	mov	r1, r9
 8005378:	eb63 0b01 	sbc.w	fp, r3, r1
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800538c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005390:	ebb2 040a 	subs.w	r4, r2, sl
 8005394:	eb63 050b 	sbc.w	r5, r3, fp
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	00eb      	lsls	r3, r5, #3
 80053a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a6:	00e2      	lsls	r2, r4, #3
 80053a8:	4614      	mov	r4, r2
 80053aa:	461d      	mov	r5, r3
 80053ac:	4643      	mov	r3, r8
 80053ae:	18e3      	adds	r3, r4, r3
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	464b      	mov	r3, r9
 80053b4:	eb45 0303 	adc.w	r3, r5, r3
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053c6:	4629      	mov	r1, r5
 80053c8:	028b      	lsls	r3, r1, #10
 80053ca:	4621      	mov	r1, r4
 80053cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d0:	4621      	mov	r1, r4
 80053d2:	028a      	lsls	r2, r1, #10
 80053d4:	4610      	mov	r0, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053da:	2200      	movs	r2, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	61fa      	str	r2, [r7, #28]
 80053e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e4:	f7fa ff06 	bl	80001f4 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4613      	mov	r3, r2
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	3301      	adds	r3, #1
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540a:	e002      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_GetSysClockFreq+0x204>)
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005414:	4618      	mov	r0, r3
 8005416:	3750      	adds	r7, #80	; 0x50
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800
 8005424:	00f42400 	.word	0x00f42400
 8005428:	007a1200 	.word	0x007a1200

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000274 	.word	0x20000274

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a9b      	lsrs	r3, r3, #10
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	0800dd78 	.word	0x0800dd78

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005470:	f7ff ffdc 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0b5b      	lsrs	r3, r3, #13
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	0800dd78 	.word	0x0800dd78

08005494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07b      	b.n	800559e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d009      	beq.n	80054cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e005      	b.n	80054cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc fb84 	bl	8001bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0104 	and.w	r1, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0210 	and.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e041      	b.n	800563c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fc fc39 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 f9e1 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d001      	beq.n	800565c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e044      	b.n	80056e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x6c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d013      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x6c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a19      	ldr	r2, [pc, #100]	; (80056fc <HAL_TIM_Base_Start_IT+0xb8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x6c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <HAL_TIM_Base_Start_IT+0xbc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x6c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a16      	ldr	r2, [pc, #88]	; (8005704 <HAL_TIM_Base_Start_IT+0xc0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d111      	bne.n	80056d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d010      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	e007      	b.n	80056e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40014000 	.word	0x40014000

08005708 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	f241 1311 	movw	r3, #4369	; 0x1111
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10f      	bne.n	8005750 <HAL_TIM_Base_Stop_IT+0x48>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f240 4344 	movw	r3, #1092	; 0x444
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d107      	bne.n	8005750 <HAL_TIM_Base_Stop_IT+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01b      	beq.n	80057ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f06f 0202 	mvn.w	r2, #2
 800579a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8dc 	bl	800596e <HAL_TIM_IC_CaptureCallback>
 80057b6:	e005      	b.n	80057c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8ce 	bl	800595a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8df 	bl	8005982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d020      	beq.n	8005816 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01b      	beq.n	8005816 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0204 	mvn.w	r2, #4
 80057e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f8b6 	bl	800596e <HAL_TIM_IC_CaptureCallback>
 8005802:	e005      	b.n	8005810 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8a8 	bl	800595a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8b9 	bl	8005982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d020      	beq.n	8005862 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01b      	beq.n	8005862 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0208 	mvn.w	r2, #8
 8005832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2204      	movs	r2, #4
 8005838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f890 	bl	800596e <HAL_TIM_IC_CaptureCallback>
 800584e:	e005      	b.n	800585c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f882 	bl	800595a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f893 	bl	8005982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d020      	beq.n	80058ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f06f 0210 	mvn.w	r2, #16
 800587e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2208      	movs	r2, #8
 8005884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f86a 	bl	800596e <HAL_TIM_IC_CaptureCallback>
 800589a:	e005      	b.n	80058a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f85c 	bl	800595a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f86d 	bl	8005982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0201 	mvn.w	r2, #1
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f83a 	bl	8005946 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8f1 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f83e 	bl	8005996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0220 	mvn.w	r2, #32
 8005936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f8c3 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3a      	ldr	r2, [pc, #232]	; (8005aa8 <TIM_Base_SetConfig+0xfc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00f      	beq.n	80059e4 <TIM_Base_SetConfig+0x38>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d00b      	beq.n	80059e4 <TIM_Base_SetConfig+0x38>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a37      	ldr	r2, [pc, #220]	; (8005aac <TIM_Base_SetConfig+0x100>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_Base_SetConfig+0x38>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a36      	ldr	r2, [pc, #216]	; (8005ab0 <TIM_Base_SetConfig+0x104>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_Base_SetConfig+0x38>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a35      	ldr	r2, [pc, #212]	; (8005ab4 <TIM_Base_SetConfig+0x108>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <TIM_Base_SetConfig+0xfc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01b      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a04:	d017      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a28      	ldr	r2, [pc, #160]	; (8005aac <TIM_Base_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <TIM_Base_SetConfig+0x104>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <TIM_Base_SetConfig+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0x10c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a24      	ldr	r2, [pc, #144]	; (8005abc <TIM_Base_SetConfig+0x110>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <TIM_Base_SetConfig+0x114>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d108      	bne.n	8005a48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0e      	ldr	r2, [pc, #56]	; (8005aa8 <TIM_Base_SetConfig+0xfc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	611a      	str	r2, [r3, #16]
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e042      	b.n	8005b84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fa2e 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	; 0x24
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fc85 	bl	8006440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b0ba      	sub	sp, #232	; 0xe8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x66>
 8005bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fb69 	bl	80062c2 <UART_Receive_IT>
      return;
 8005bf0:	e25b      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80de 	beq.w	8005db8 <HAL_UART_IRQHandler+0x22c>
 8005bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80d1 	beq.w	8005db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_UART_IRQHandler+0xae>
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_UART_IRQHandler+0xd2>
 8005c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
 8005c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f043 0204 	orr.w	r2, r3, #4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d011      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f043 0208 	orr.w	r2, r3, #8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 81f2 	beq.w	80060a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_UART_IRQHandler+0x14e>
 8005cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 faf4 	bl	80062c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	bf0c      	ite	eq
 8005ce8:	2301      	moveq	r3, #1
 8005cea:	2300      	movne	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_UART_IRQHandler+0x17a>
 8005cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04f      	beq.n	8005da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f9fc 	bl	8006104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d141      	bne.n	8005d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1d9      	bne.n	8005d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d013      	beq.n	8005d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	4a7e      	ldr	r2, [pc, #504]	; (8005f6c <HAL_UART_IRQHandler+0x3e0>)
 8005d74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fd f8a6 	bl	8002ecc <HAL_DMA_Abort_IT>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e00e      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f99e 	bl	80060d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e00a      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f99a 	bl	80060d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e006      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f996 	bl	80060d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005db2:	e175      	b.n	80060a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	bf00      	nop
    return;
 8005db6:	e173      	b.n	80060a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f040 814f 	bne.w	8006060 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8148 	beq.w	8006060 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8141 	beq.w	8006060 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	f040 80b6 	bne.w	8005f70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8145 	beq.w	80060a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e22:	429a      	cmp	r2, r3
 8005e24:	f080 813e 	bcs.w	80060a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3a:	f000 8088 	beq.w	8005f4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1d9      	bne.n	8005e3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3314      	adds	r3, #20
 8005e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e1      	bne.n	8005e8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e3      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1e:	f023 0310 	bic.w	r3, r3, #16
 8005f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e3      	bne.n	8005f0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fc ff4f 	bl	8002dec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2202      	movs	r2, #2
 8005f52:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8c1 	bl	80060ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f6a:	e09b      	b.n	80060a4 <HAL_UART_IRQHandler+0x518>
 8005f6c:	080061cb 	.word	0x080061cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 808e 	beq.w	80060a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8089 	beq.w	80060a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fba:	647a      	str	r2, [r7, #68]	; 0x44
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	617b      	str	r3, [r7, #20]
   return(result);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f847 	bl	80060ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800605e:	e023      	b.n	80060a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_UART_IRQHandler+0x4f4>
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8ba 	bl	80061f2 <UART_Transmit_IT>
    return;
 800607e:	e014      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <HAL_UART_IRQHandler+0x51e>
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8fa 	bl	8006292 <UART_EndTransmit_IT>
    return;
 800609e:	e004      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
    return;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
      return;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
      return;
 80060a8:	bf00      	nop
  }
}
 80060aa:	37e8      	adds	r7, #232	; 0xe8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b095      	sub	sp, #84	; 0x54
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800612c:	643a      	str	r2, [r7, #64]	; 0x40
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	64bb      	str	r3, [r7, #72]	; 0x48
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006160:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60bb      	str	r3, [r7, #8]
   return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619c:	61ba      	str	r2, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061be:	bf00      	nop
 80061c0:	3754      	adds	r7, #84	; 0x54
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff77 	bl	80060d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b21      	cmp	r3, #33	; 0x21
 8006204:	d13e      	bne.n	8006284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d114      	bne.n	800623a <UART_Transmit_IT+0x48>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d110      	bne.n	800623a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]
 8006238:	e008      	b.n	800624c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6211      	str	r1, [r2, #32]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4619      	mov	r1, r3
 800625a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10f      	bne.n	8006280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800626e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	e000      	b.n	8006286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
  }
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fefc 	bl	80060b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b08c      	sub	sp, #48	; 0x30
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b22      	cmp	r3, #34	; 0x22
 80062d4:	f040 80ae 	bne.w	8006434 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	d117      	bne.n	8006312 <UART_Receive_IT+0x50>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	b29a      	uxth	r2, r3
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
 8006310:	e026      	b.n	8006360 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d007      	beq.n	8006336 <UART_Receive_IT+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <UART_Receive_IT+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e008      	b.n	8006356 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006370:	2b00      	cmp	r3, #0
 8006372:	d15d      	bne.n	8006430 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0220 	bic.w	r2, r2, #32
 8006382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0201 	bic.w	r2, r2, #1
 80063a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d135      	bne.n	8006426 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	613b      	str	r3, [r7, #16]
   return(result);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	623a      	str	r2, [r7, #32]
 80063e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d10a      	bne.n	8006418 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff fe64 	bl	80060ec <HAL_UARTEx_RxEventCallback>
 8006424:	e002      	b.n	800642c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fe4c 	bl	80060c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e002      	b.n	8006436 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006444:	b0c0      	sub	sp, #256	; 0x100
 8006446:	af00      	add	r7, sp, #0
 8006448:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	68d9      	ldr	r1, [r3, #12]
 800645e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	ea40 0301 	orr.w	r3, r0, r1
 8006468:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800646a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	431a      	orrs	r2, r3
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	431a      	orrs	r2, r3
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006498:	f021 010c 	bic.w	r1, r1, #12
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064a6:	430b      	orrs	r3, r1
 80064a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ba:	6999      	ldr	r1, [r3, #24]
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	ea40 0301 	orr.w	r3, r0, r1
 80064c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b8f      	ldr	r3, [pc, #572]	; (800670c <UART_SetConfig+0x2cc>)
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d005      	beq.n	80064e0 <UART_SetConfig+0xa0>
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b8d      	ldr	r3, [pc, #564]	; (8006710 <UART_SetConfig+0x2d0>)
 80064dc:	429a      	cmp	r2, r3
 80064de:	d104      	bne.n	80064ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064e0:	f7fe ffc4 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 80064e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064e8:	e003      	b.n	80064f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ea:	f7fe ffab 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 80064ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fc:	f040 810c 	bne.w	8006718 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006504:	2200      	movs	r2, #0
 8006506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800650a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800650e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006512:	4622      	mov	r2, r4
 8006514:	462b      	mov	r3, r5
 8006516:	1891      	adds	r1, r2, r2
 8006518:	65b9      	str	r1, [r7, #88]	; 0x58
 800651a:	415b      	adcs	r3, r3
 800651c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006522:	4621      	mov	r1, r4
 8006524:	eb12 0801 	adds.w	r8, r2, r1
 8006528:	4629      	mov	r1, r5
 800652a:	eb43 0901 	adc.w	r9, r3, r1
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800653a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800653e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006542:	4690      	mov	r8, r2
 8006544:	4699      	mov	r9, r3
 8006546:	4623      	mov	r3, r4
 8006548:	eb18 0303 	adds.w	r3, r8, r3
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006550:	462b      	mov	r3, r5
 8006552:	eb49 0303 	adc.w	r3, r9, r3
 8006556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006566:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800656a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800656e:	460b      	mov	r3, r1
 8006570:	18db      	adds	r3, r3, r3
 8006572:	653b      	str	r3, [r7, #80]	; 0x50
 8006574:	4613      	mov	r3, r2
 8006576:	eb42 0303 	adc.w	r3, r2, r3
 800657a:	657b      	str	r3, [r7, #84]	; 0x54
 800657c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006580:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006584:	f7f9 fe36 	bl	80001f4 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b61      	ldr	r3, [pc, #388]	; (8006714 <UART_SetConfig+0x2d4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80065b0:	415b      	adcs	r3, r3
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065b8:	4641      	mov	r1, r8
 80065ba:	eb12 0a01 	adds.w	sl, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb43 0b01 	adc.w	fp, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065d8:	4692      	mov	sl, r2
 80065da:	469b      	mov	fp, r3
 80065dc:	4643      	mov	r3, r8
 80065de:	eb1a 0303 	adds.w	r3, sl, r3
 80065e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e6:	464b      	mov	r3, r9
 80065e8:	eb4b 0303 	adc.w	r3, fp, r3
 80065ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006600:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006604:	460b      	mov	r3, r1
 8006606:	18db      	adds	r3, r3, r3
 8006608:	643b      	str	r3, [r7, #64]	; 0x40
 800660a:	4613      	mov	r3, r2
 800660c:	eb42 0303 	adc.w	r3, r2, r3
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006616:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800661a:	f7f9 fdeb 	bl	80001f4 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4611      	mov	r1, r2
 8006624:	4b3b      	ldr	r3, [pc, #236]	; (8006714 <UART_SetConfig+0x2d4>)
 8006626:	fba3 2301 	umull	r2, r3, r3, r1
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2264      	movs	r2, #100	; 0x64
 800662e:	fb02 f303 	mul.w	r3, r2, r3
 8006632:	1acb      	subs	r3, r1, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800663a:	4b36      	ldr	r3, [pc, #216]	; (8006714 <UART_SetConfig+0x2d4>)
 800663c:	fba3 2302 	umull	r2, r3, r3, r2
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006648:	441c      	add	r4, r3
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006654:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006658:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	63b9      	str	r1, [r7, #56]	; 0x38
 8006664:	415b      	adcs	r3, r3
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6339      	str	r1, [r7, #48]	; 0x30
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a0:	464b      	mov	r3, r9
 80066a2:	460a      	mov	r2, r1
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066c0:	460b      	mov	r3, r1
 80066c2:	18db      	adds	r3, r3, r3
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c6:	4613      	mov	r3, r2
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066d6:	f7f9 fd8d 	bl	80001f4 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <UART_SetConfig+0x2d4>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	; 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3332      	adds	r3, #50	; 0x32
 80066f2:	4a08      	ldr	r2, [pc, #32]	; (8006714 <UART_SetConfig+0x2d4>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 0207 	and.w	r2, r3, #7
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4422      	add	r2, r4
 8006706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006708:	e106      	b.n	8006918 <UART_SetConfig+0x4d8>
 800670a:	bf00      	nop
 800670c:	40011000 	.word	0x40011000
 8006710:	40011400 	.word	0x40011400
 8006714:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800671c:	2200      	movs	r2, #0
 800671e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006726:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800672a:	4642      	mov	r2, r8
 800672c:	464b      	mov	r3, r9
 800672e:	1891      	adds	r1, r2, r2
 8006730:	6239      	str	r1, [r7, #32]
 8006732:	415b      	adcs	r3, r3
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800673a:	4641      	mov	r1, r8
 800673c:	1854      	adds	r4, r2, r1
 800673e:	4649      	mov	r1, r9
 8006740:	eb43 0501 	adc.w	r5, r3, r1
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	00eb      	lsls	r3, r5, #3
 800674e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006752:	00e2      	lsls	r2, r4, #3
 8006754:	4614      	mov	r4, r2
 8006756:	461d      	mov	r5, r3
 8006758:	4643      	mov	r3, r8
 800675a:	18e3      	adds	r3, r4, r3
 800675c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006760:	464b      	mov	r3, r9
 8006762:	eb45 0303 	adc.w	r3, r5, r3
 8006766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006786:	4629      	mov	r1, r5
 8006788:	008b      	lsls	r3, r1, #2
 800678a:	4621      	mov	r1, r4
 800678c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006790:	4621      	mov	r1, r4
 8006792:	008a      	lsls	r2, r1, #2
 8006794:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006798:	f7f9 fd2c 	bl	80001f4 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4b60      	ldr	r3, [pc, #384]	; (8006924 <UART_SetConfig+0x4e4>)
 80067a2:	fba3 2302 	umull	r2, r3, r3, r2
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	011c      	lsls	r4, r3, #4
 80067aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067bc:	4642      	mov	r2, r8
 80067be:	464b      	mov	r3, r9
 80067c0:	1891      	adds	r1, r2, r2
 80067c2:	61b9      	str	r1, [r7, #24]
 80067c4:	415b      	adcs	r3, r3
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067cc:	4641      	mov	r1, r8
 80067ce:	1851      	adds	r1, r2, r1
 80067d0:	6139      	str	r1, [r7, #16]
 80067d2:	4649      	mov	r1, r9
 80067d4:	414b      	adcs	r3, r1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067e4:	4659      	mov	r1, fp
 80067e6:	00cb      	lsls	r3, r1, #3
 80067e8:	4651      	mov	r1, sl
 80067ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ee:	4651      	mov	r1, sl
 80067f0:	00ca      	lsls	r2, r1, #3
 80067f2:	4610      	mov	r0, r2
 80067f4:	4619      	mov	r1, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	4642      	mov	r2, r8
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006800:	464b      	mov	r3, r9
 8006802:	460a      	mov	r2, r1
 8006804:	eb42 0303 	adc.w	r3, r2, r3
 8006808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	67bb      	str	r3, [r7, #120]	; 0x78
 8006816:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006824:	4649      	mov	r1, r9
 8006826:	008b      	lsls	r3, r1, #2
 8006828:	4641      	mov	r1, r8
 800682a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682e:	4641      	mov	r1, r8
 8006830:	008a      	lsls	r2, r1, #2
 8006832:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006836:	f7f9 fcdd 	bl	80001f4 <__aeabi_uldivmod>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	4611      	mov	r1, r2
 8006840:	4b38      	ldr	r3, [pc, #224]	; (8006924 <UART_SetConfig+0x4e4>)
 8006842:	fba3 2301 	umull	r2, r3, r3, r1
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2264      	movs	r2, #100	; 0x64
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	1acb      	subs	r3, r1, r3
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	3332      	adds	r3, #50	; 0x32
 8006854:	4a33      	ldr	r2, [pc, #204]	; (8006924 <UART_SetConfig+0x4e4>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006860:	441c      	add	r4, r3
 8006862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006866:	2200      	movs	r2, #0
 8006868:	673b      	str	r3, [r7, #112]	; 0x70
 800686a:	677a      	str	r2, [r7, #116]	; 0x74
 800686c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	415b      	adcs	r3, r3
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b2:	464b      	mov	r3, r9
 80068b4:	460a      	mov	r2, r1
 80068b6:	eb42 0303 	adc.w	r3, r2, r3
 80068ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	663b      	str	r3, [r7, #96]	; 0x60
 80068c6:	667a      	str	r2, [r7, #100]	; 0x64
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068d4:	4649      	mov	r1, r9
 80068d6:	008b      	lsls	r3, r1, #2
 80068d8:	4641      	mov	r1, r8
 80068da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068de:	4641      	mov	r1, r8
 80068e0:	008a      	lsls	r2, r1, #2
 80068e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068e6:	f7f9 fc85 	bl	80001f4 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <UART_SetConfig+0x4e4>)
 80068f0:	fba3 1302 	umull	r1, r3, r3, r2
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	2164      	movs	r1, #100	; 0x64
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	3332      	adds	r3, #50	; 0x32
 8006902:	4a08      	ldr	r2, [pc, #32]	; (8006924 <UART_SetConfig+0x4e4>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4422      	add	r2, r4
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800691e:	46bd      	mov	sp, r7
 8006920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006924:	51eb851f 	.word	0x51eb851f

08006928 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006928:	b084      	sub	sp, #16
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	f107 001c 	add.w	r0, r7, #28
 8006936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800693a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800693e:	2b01      	cmp	r3, #1
 8006940:	d123      	bne.n	800698a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800696a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800696e:	2b01      	cmp	r3, #1
 8006970:	d105      	bne.n	800697e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fae2 	bl	8007f48 <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]
 8006988:	e01b      	b.n	80069c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fad6 	bl	8007f48 <USB_CoreReset>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
 80069b4:	e005      	b.n	80069c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069c2:	7fbb      	ldrb	r3, [r7, #30]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10b      	bne.n	80069e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f043 0206 	orr.w	r2, r3, #6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr

080069f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069fe:	79fb      	ldrb	r3, [r7, #7]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d165      	bne.n	8006ad0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4a41      	ldr	r2, [pc, #260]	; (8006b0c <USB_SetTurnaroundTime+0x11c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d906      	bls.n	8006a1a <USB_SetTurnaroundTime+0x2a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4a40      	ldr	r2, [pc, #256]	; (8006b10 <USB_SetTurnaroundTime+0x120>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d202      	bcs.n	8006a1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a14:	230f      	movs	r3, #15
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e062      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4a3c      	ldr	r2, [pc, #240]	; (8006b10 <USB_SetTurnaroundTime+0x120>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d306      	bcc.n	8006a30 <USB_SetTurnaroundTime+0x40>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4a3b      	ldr	r2, [pc, #236]	; (8006b14 <USB_SetTurnaroundTime+0x124>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d202      	bcs.n	8006a30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a2a:	230e      	movs	r3, #14
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e057      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4a38      	ldr	r2, [pc, #224]	; (8006b14 <USB_SetTurnaroundTime+0x124>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d306      	bcc.n	8006a46 <USB_SetTurnaroundTime+0x56>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4a37      	ldr	r2, [pc, #220]	; (8006b18 <USB_SetTurnaroundTime+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d202      	bcs.n	8006a46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a40:	230d      	movs	r3, #13
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e04c      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <USB_SetTurnaroundTime+0x128>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d306      	bcc.n	8006a5c <USB_SetTurnaroundTime+0x6c>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4a32      	ldr	r2, [pc, #200]	; (8006b1c <USB_SetTurnaroundTime+0x12c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d802      	bhi.n	8006a5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a56:	230c      	movs	r3, #12
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	e041      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4a2f      	ldr	r2, [pc, #188]	; (8006b1c <USB_SetTurnaroundTime+0x12c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d906      	bls.n	8006a72 <USB_SetTurnaroundTime+0x82>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4a2e      	ldr	r2, [pc, #184]	; (8006b20 <USB_SetTurnaroundTime+0x130>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d802      	bhi.n	8006a72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a6c:	230b      	movs	r3, #11
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e036      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <USB_SetTurnaroundTime+0x130>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d906      	bls.n	8006a88 <USB_SetTurnaroundTime+0x98>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <USB_SetTurnaroundTime+0x134>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d802      	bhi.n	8006a88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a82:	230a      	movs	r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e02b      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <USB_SetTurnaroundTime+0x134>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d906      	bls.n	8006a9e <USB_SetTurnaroundTime+0xae>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <USB_SetTurnaroundTime+0x138>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d202      	bcs.n	8006a9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a98:	2309      	movs	r3, #9
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e020      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a21      	ldr	r2, [pc, #132]	; (8006b28 <USB_SetTurnaroundTime+0x138>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d306      	bcc.n	8006ab4 <USB_SetTurnaroundTime+0xc4>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <USB_SetTurnaroundTime+0x13c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d802      	bhi.n	8006ab4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006aae:	2308      	movs	r3, #8
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e015      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a1d      	ldr	r2, [pc, #116]	; (8006b2c <USB_SetTurnaroundTime+0x13c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d906      	bls.n	8006aca <USB_SetTurnaroundTime+0xda>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <USB_SetTurnaroundTime+0x140>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d202      	bcs.n	8006aca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ac4:	2307      	movs	r3, #7
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e00a      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006aca:	2306      	movs	r3, #6
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e007      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d102      	bne.n	8006adc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006ad6:	2309      	movs	r3, #9
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e001      	b.n	8006ae0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006adc:	2309      	movs	r3, #9
 8006ade:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	00d8acbf 	.word	0x00d8acbf
 8006b10:	00e4e1c0 	.word	0x00e4e1c0
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	01067380 	.word	0x01067380
 8006b1c:	011a499f 	.word	0x011a499f
 8006b20:	01312cff 	.word	0x01312cff
 8006b24:	014ca43f 	.word	0x014ca43f
 8006b28:	016e3600 	.word	0x016e3600
 8006b2c:	01a6ab1f 	.word	0x01a6ab1f
 8006b30:	01e84800 	.word	0x01e84800

08006b34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f043 0201 	orr.w	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d115      	bne.n	8006bc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ba6:	200a      	movs	r0, #10
 8006ba8:	f7fb fb92 	bl	80022d0 <HAL_Delay>
      ms += 10U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	330a      	adds	r3, #10
 8006bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f939 	bl	8007e2a <USB_GetMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d01e      	beq.n	8006bfc <USB_SetCurrentMode+0x84>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2bc7      	cmp	r3, #199	; 0xc7
 8006bc2:	d9f0      	bls.n	8006ba6 <USB_SetCurrentMode+0x2e>
 8006bc4:	e01a      	b.n	8006bfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d115      	bne.n	8006bf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bd8:	200a      	movs	r0, #10
 8006bda:	f7fb fb79 	bl	80022d0 <HAL_Delay>
      ms += 10U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	330a      	adds	r3, #10
 8006be2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 f920 	bl	8007e2a <USB_GetMode>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <USB_SetCurrentMode+0x84>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2bc7      	cmp	r3, #199	; 0xc7
 8006bf4:	d9f0      	bls.n	8006bd8 <USB_SetCurrentMode+0x60>
 8006bf6:	e001      	b.n	8006bfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e005      	b.n	8006c08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2bc8      	cmp	r3, #200	; 0xc8
 8006c00:	d101      	bne.n	8006c06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c10:	b084      	sub	sp, #16
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	e009      	b.n	8006c44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3340      	adds	r3, #64	; 0x40
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b0e      	cmp	r3, #14
 8006c48:	d9f2      	bls.n	8006c30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11c      	bne.n	8006c8c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
 8006c8a:	e00b      	b.n	8006ca4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006caa:	461a      	mov	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cb0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10d      	bne.n	8006cd4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d104      	bne.n	8006cca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f968 	bl	8006f98 <USB_SetDevSpeed>
 8006cc8:	e008      	b.n	8006cdc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f963 	bl	8006f98 <USB_SetDevSpeed>
 8006cd2:	e003      	b.n	8006cdc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cd4:	2103      	movs	r1, #3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f95e 	bl	8006f98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cdc:	2110      	movs	r1, #16
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8fa 	bl	8006ed8 <USB_FlushTxFifo>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f924 	bl	8006f3c <USB_FlushRxFifo>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	461a      	mov	r2, r3
 8006d12:	2300      	movs	r3, #0
 8006d14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	e043      	b.n	8006db0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	d118      	bne.n	8006d72 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d52:	461a      	mov	r2, r3
 8006d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e013      	b.n	8006d84 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	e008      	b.n	8006d84 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	461a      	mov	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	461a      	mov	r2, r3
 8006da4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006da8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	3301      	adds	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006db4:	461a      	mov	r2, r3
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d3b5      	bcc.n	8006d28 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e043      	b.n	8006e4a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd8:	d118      	bne.n	8006e0c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	461a      	mov	r2, r3
 8006dee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	e013      	b.n	8006e1e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	461a      	mov	r2, r3
 8006e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e008      	b.n	8006e1e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	3301      	adds	r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e4e:	461a      	mov	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d3b5      	bcc.n	8006dc2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f043 0210 	orr.w	r2, r3, #16
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <USB_DevInit+0x2c4>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f043 0208 	orr.w	r2, r3, #8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ebc:	f043 0304 	orr.w	r3, r3, #4
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ed0:	b004      	add	sp, #16
 8006ed2:	4770      	bx	lr
 8006ed4:	803c3800 	.word	0x803c3800

08006ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ef2:	d901      	bls.n	8006ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e01b      	b.n	8006f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	daf2      	bge.n	8006ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	019b      	lsls	r3, r3, #6
 8006f08:	f043 0220 	orr.w	r2, r3, #32
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f1c:	d901      	bls.n	8006f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e006      	b.n	8006f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d0f0      	beq.n	8006f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f54:	d901      	bls.n	8006f5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e018      	b.n	8006f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	daf2      	bge.n	8006f48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2210      	movs	r2, #16
 8006f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f78:	d901      	bls.n	8006f7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e006      	b.n	8006f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	2b10      	cmp	r3, #16
 8006f88:	d0f0      	beq.n	8006f6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b087      	sub	sp, #28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0306 	and.w	r3, r3, #6
 8006fe2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]
 8006fee:	e00a      	b.n	8007006 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d002      	beq.n	8006ffc <USB_GetDevSpeed+0x32>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d102      	bne.n	8007002 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	75fb      	strb	r3, [r7, #23]
 8007000:	e001      	b.n	8007006 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007002:	230f      	movs	r3, #15
 8007004:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
}
 8007008:	4618      	mov	r0, r3
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d13a      	bne.n	80070a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	2101      	movs	r1, #1
 8007042:	fa01 f303 	lsl.w	r3, r1, r3
 8007046:	b29b      	uxth	r3, r3
 8007048:	68f9      	ldr	r1, [r7, #12]
 800704a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704e:	4313      	orrs	r3, r2
 8007050:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d155      	bne.n	8007114 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007084:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	059b      	lsls	r3, r3, #22
 800708a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800708c:	4313      	orrs	r3, r2
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e036      	b.n	8007114 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ac:	69da      	ldr	r2, [r3, #28]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	2101      	movs	r1, #1
 80070b8:	fa01 f303 	lsl.w	r3, r1, r3
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	68f9      	ldr	r1, [r7, #12]
 80070c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d11a      	bne.n	8007114 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	791b      	ldrb	r3, [r3, #4]
 80070f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070fa:	430b      	orrs	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007112:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d161      	bne.n	8007204 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007156:	d11f      	bne.n	8007198 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007176:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007196:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	43db      	mvns	r3, r3
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b8:	4013      	ands	r3, r2
 80071ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	2101      	movs	r1, #1
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	43db      	mvns	r3, r3
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071dc:	4013      	ands	r3, r2
 80071de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	0159      	lsls	r1, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	440b      	add	r3, r1
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	4619      	mov	r1, r3
 80071fc:	4b35      	ldr	r3, [pc, #212]	; (80072d4 <USB_DeactivateEndpoint+0x1b0>)
 80071fe:	4013      	ands	r3, r2
 8007200:	600b      	str	r3, [r1, #0]
 8007202:	e060      	b.n	80072c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721a:	d11f      	bne.n	800725c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	440a      	add	r2, r1
 8007232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800723a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800725a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f303 	lsl.w	r3, r1, r3
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	43db      	mvns	r3, r3
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800727c:	4013      	ands	r3, r2
 800727e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	2101      	movs	r1, #1
 8007292:	fa01 f303 	lsl.w	r3, r1, r3
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	43db      	mvns	r3, r3
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a0:	4013      	ands	r3, r2
 80072a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	0159      	lsls	r1, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	440b      	add	r3, r1
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	4619      	mov	r1, r3
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <USB_DeactivateEndpoint+0x1b4>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	ec337800 	.word	0xec337800
 80072d8:	eff37800 	.word	0xeff37800

080072dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 817a 	bne.w	80075f2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d132      	bne.n	800736c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007324:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007328:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007364:	0cdb      	lsrs	r3, r3, #19
 8007366:	04db      	lsls	r3, r3, #19
 8007368:	6113      	str	r3, [r2, #16]
 800736a:	e092      	b.n	8007492 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007386:	0cdb      	lsrs	r3, r3, #19
 8007388:	04db      	lsls	r3, r3, #19
 800738a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d11a      	bne.n	80073ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d903      	bls.n	80073ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073e8:	6113      	str	r3, [r2, #16]
 80073ea:	e01b      	b.n	8007424 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6919      	ldr	r1, [r3, #16]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	440b      	add	r3, r1
 8007404:	1e59      	subs	r1, r3, #1
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	fbb1 f3f3 	udiv	r3, r1, r3
 800740e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007410:	4ba2      	ldr	r3, [pc, #648]	; (800769c <USB_EPStartXfer+0x3c0>)
 8007412:	400b      	ands	r3, r1
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	0148      	lsls	r0, r1, #5
 8007418:	69f9      	ldr	r1, [r7, #28]
 800741a:	4401      	add	r1, r0
 800741c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007420:	4313      	orrs	r3, r2
 8007422:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743a:	69b9      	ldr	r1, [r7, #24]
 800743c:	0148      	lsls	r0, r1, #5
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	4401      	add	r1, r0
 8007442:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007446:	4313      	orrs	r3, r2
 8007448:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d11f      	bne.n	8007492 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007470:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007490:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d14b      	bne.n	8007530 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d009      	beq.n	80074b4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	461a      	mov	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	791b      	ldrb	r3, [r3, #4]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d128      	bne.n	800750e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d110      	bne.n	80074ee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	e00f      	b.n	800750e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	440a      	add	r2, r1
 8007524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007528:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	e165      	b.n	80077fc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800754e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	791b      	ldrb	r3, [r3, #4]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d015      	beq.n	8007584 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 814d 	beq.w	80077fc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	2101      	movs	r1, #1
 8007574:	fa01 f303 	lsl.w	r3, r1, r3
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800757e:	4313      	orrs	r3, r2
 8007580:	634b      	str	r3, [r1, #52]	; 0x34
 8007582:	e13b      	b.n	80077fc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d110      	bne.n	80075b6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e00f      	b.n	80075d6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	68d9      	ldr	r1, [r3, #12]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	b298      	uxth	r0, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4603      	mov	r3, r0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f9b8 	bl	8007960 <USB_WritePacket>
 80075f0:	e104      	b.n	80077fc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760c:	0cdb      	lsrs	r3, r3, #19
 800760e:	04db      	lsls	r3, r3, #19
 8007610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007634:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d131      	bne.n	80076a0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	0148      	lsls	r0, r1, #5
 800766e:	69f9      	ldr	r1, [r7, #28]
 8007670:	4401      	add	r1, r0
 8007672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007676:	4313      	orrs	r3, r2
 8007678:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007698:	6113      	str	r3, [r2, #16]
 800769a:	e061      	b.n	8007760 <USB_EPStartXfer+0x484>
 800769c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d123      	bne.n	80076f0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	0148      	lsls	r0, r1, #5
 80076c2:	69f9      	ldr	r1, [r7, #28]
 80076c4:	4401      	add	r1, r0
 80076c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ca:	4313      	orrs	r3, r2
 80076cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	0151      	lsls	r1, r2, #5
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	440a      	add	r2, r1
 80076e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076ec:	6113      	str	r3, [r2, #16]
 80076ee:	e037      	b.n	8007760 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	1e5a      	subs	r2, r3, #1
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	8afa      	ldrh	r2, [r7, #22]
 800770c:	fb03 f202 	mul.w	r2, r3, r2
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	8afb      	ldrh	r3, [r7, #22]
 8007724:	04d9      	lsls	r1, r3, #19
 8007726:	4b38      	ldr	r3, [pc, #224]	; (8007808 <USB_EPStartXfer+0x52c>)
 8007728:	400b      	ands	r3, r1
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	0148      	lsls	r0, r1, #5
 800772e:	69f9      	ldr	r1, [r7, #28]
 8007730:	4401      	add	r1, r0
 8007732:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007736:	4313      	orrs	r3, r2
 8007738:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	0148      	lsls	r0, r1, #5
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	4401      	add	r1, r0
 8007758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800775c:	4313      	orrs	r3, r2
 800775e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d10d      	bne.n	8007782 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	460a      	mov	r2, r1
 8007780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	791b      	ldrb	r3, [r3, #4]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d128      	bne.n	80077dc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007796:	2b00      	cmp	r3, #0
 8007798:	d110      	bne.n	80077bc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e00f      	b.n	80077dc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	1ff80000 	.word	0x1ff80000

0800780c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d14a      	bne.n	80078c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007842:	f040 8086 	bne.w	8007952 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	7812      	ldrb	r2, [r2, #0]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007868:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	7812      	ldrb	r2, [r2, #0]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800788c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3301      	adds	r3, #1
 8007892:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f242 7210 	movw	r2, #10000	; 0x2710
 800789a:	4293      	cmp	r3, r2
 800789c:	d902      	bls.n	80078a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
          break;
 80078a2:	e056      	b.n	8007952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078bc:	d0e7      	beq.n	800788e <USB_EPStopXfer+0x82>
 80078be:	e048      	b.n	8007952 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d8:	d13b      	bne.n	8007952 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	0151      	lsls	r1, r2, #5
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	440a      	add	r2, r1
 8007918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007920:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f242 7210 	movw	r2, #10000	; 0x2710
 800792e:	4293      	cmp	r3, r2
 8007930:	d902      	bls.n	8007938 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
          break;
 8007936:	e00c      	b.n	8007952 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800794c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007950:	d0e7      	beq.n	8007922 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
}
 8007954:	4618      	mov	r0, r3
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	; 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	460b      	mov	r3, r1
 8007970:	71fb      	strb	r3, [r7, #7]
 8007972:	4613      	mov	r3, r2
 8007974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800797e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007982:	2b00      	cmp	r3, #0
 8007984:	d123      	bne.n	80079ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007986:	88bb      	ldrh	r3, [r7, #4]
 8007988:	3303      	adds	r3, #3
 800798a:	089b      	lsrs	r3, r3, #2
 800798c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	e018      	b.n	80079c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	031a      	lsls	r2, r3, #12
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	461a      	mov	r2, r3
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3301      	adds	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3301      	adds	r3, #1
 80079be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d3e2      	bcc.n	8007994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3724      	adds	r7, #36	; 0x24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079dc:	b480      	push	{r7}
 80079de:	b08b      	sub	sp, #44	; 0x2c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	089b      	lsrs	r3, r3, #2
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	e014      	b.n	8007a32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	3301      	adds	r3, #1
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	3301      	adds	r3, #1
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	3301      	adds	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	623b      	str	r3, [r7, #32]
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d3e6      	bcc.n	8007a08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a3a:	8bfb      	ldrh	r3, [r7, #30]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01e      	beq.n	8007a7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f107 0310 	add.w	r3, r7, #16
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	701a      	strb	r2, [r3, #0]
      i++;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	3301      	adds	r3, #1
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a72:	8bfb      	ldrh	r3, [r7, #30]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a78:	8bfb      	ldrh	r3, [r7, #30]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1ea      	bne.n	8007a54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	372c      	adds	r7, #44	; 0x2c
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d12c      	bne.n	8007b02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	db12      	blt.n	8007ae0 <USB_EPSetStall+0x54>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00f      	beq.n	8007ae0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ade:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e02b      	b.n	8007b5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db12      	blt.n	8007b3a <USB_EPSetStall+0xae>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00f      	beq.n	8007b3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d128      	bne.n	8007bd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ba2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d003      	beq.n	8007bb4 <USB_EPClearStall+0x4c>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	791b      	ldrb	r3, [r3, #4]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d138      	bne.n	8007c26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e027      	b.n	8007c26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d003      	beq.n	8007c06 <USB_EPClearStall+0x9e>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	791b      	ldrb	r3, [r3, #4]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d10f      	bne.n	8007c26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cae:	f023 0302 	bic.w	r3, r3, #2
 8007cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf0:	f043 0302 	orr.w	r3, r3, #2
 8007cf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	0c1b      	lsrs	r3, r3, #16
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	b29b      	uxth	r3, r3
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b087      	sub	sp, #28
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfe:	01db      	lsls	r3, r3, #7
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	f003 0301 	and.w	r3, r3, #1
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e64:	f023 0307 	bic.w	r3, r3, #7
 8007e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	460b      	mov	r3, r1
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	333c      	adds	r3, #60	; 0x3c
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	4a26      	ldr	r2, [pc, #152]	; (8007f44 <USB_EP0_OutStart+0xb8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d90a      	bls.n	8007ec6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec0:	d101      	bne.n	8007ec6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e037      	b.n	8007f36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	461a      	mov	r2, r3
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ee4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef4:	f043 0318 	orr.w	r3, r3, #24
 8007ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10f      	bne.n	8007f34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	4f54300a 	.word	0x4f54300a

08007f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f60:	d901      	bls.n	8007f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e01b      	b.n	8007f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	daf2      	bge.n	8007f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f8a:	d901      	bls.n	8007f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e006      	b.n	8007f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d0f0      	beq.n	8007f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007fbc:	f005 f95c 	bl	800d278 <USBD_static_malloc>
 8007fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	; 0xb0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e0d4      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007fdc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f005 f98c 	bl	800d300 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32b0      	adds	r2, #176	; 0xb0
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32b0      	adds	r2, #176	; 0xb0
 8008002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1b      	ldrb	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d138      	bne.n	8008086 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008014:	4b5e      	ldr	r3, [pc, #376]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800801c:	2202      	movs	r2, #2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f005 f807 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008024:	4b5a      	ldr	r3, [pc, #360]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	f003 020f 	and.w	r2, r3, #15
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	3324      	adds	r3, #36	; 0x24
 800803a:	2201      	movs	r2, #1
 800803c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800803e:	4b55      	ldr	r3, [pc, #340]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008040:	7819      	ldrb	r1, [r3, #0]
 8008042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008046:	2202      	movs	r2, #2
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f004 fff2 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 020f 	and.w	r2, r3, #15
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008066:	2201      	movs	r2, #1
 8008068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <USBD_CDC_Init+0x1ec>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3326      	adds	r3, #38	; 0x26
 8008080:	2210      	movs	r2, #16
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e035      	b.n	80080f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008086:	4b42      	ldr	r3, [pc, #264]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008088:	7819      	ldrb	r1, [r3, #0]
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	2202      	movs	r2, #2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f004 ffcf 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008094:	4b3e      	ldr	r3, [pc, #248]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3324      	adds	r3, #36	; 0x24
 80080aa:	2201      	movs	r2, #1
 80080ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080ae:	4b39      	ldr	r3, [pc, #228]	; (8008194 <USBD_CDC_Init+0x1e8>)
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	2202      	movs	r2, #2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f004 ffbb 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080bc:	4b35      	ldr	r3, [pc, #212]	; (8008194 <USBD_CDC_Init+0x1e8>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080d4:	2201      	movs	r2, #1
 80080d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080d8:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <USBD_CDC_Init+0x1ec>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	f003 020f 	and.w	r2, r3, #15
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	3326      	adds	r3, #38	; 0x26
 80080ee:	2210      	movs	r2, #16
 80080f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <USBD_CDC_Init+0x1ec>)
 80080f4:	7819      	ldrb	r1, [r3, #0]
 80080f6:	2308      	movs	r3, #8
 80080f8:	2203      	movs	r2, #3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f004 ff99 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008100:	4b25      	ldr	r3, [pc, #148]	; (8008198 <USBD_CDC_Init+0x1ec>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3324      	adds	r3, #36	; 0x24
 8008116:	2201      	movs	r2, #1
 8008118:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	33b0      	adds	r3, #176	; 0xb0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008150:	2302      	movs	r3, #2
 8008152:	e018      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <USBD_CDC_Init+0x1e8>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f005 f850 	bl	800d210 <USBD_LL_PrepareReceive>
 8008170:	e008      	b.n	8008184 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008174:	7819      	ldrb	r1, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800817c:	2340      	movs	r3, #64	; 0x40
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f005 f846 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000307 	.word	0x20000307
 8008194:	20000308 	.word	0x20000308
 8008198:	20000309 	.word	0x20000309

0800819c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80081a8:	4b3a      	ldr	r3, [pc, #232]	; (8008294 <USBD_CDC_DeInit+0xf8>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f004 ff65 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80081b4:	4b37      	ldr	r3, [pc, #220]	; (8008294 <USBD_CDC_DeInit+0xf8>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 020f 	and.w	r2, r3, #15
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	2200      	movs	r2, #0
 80081cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80081ce:	4b32      	ldr	r3, [pc, #200]	; (8008298 <USBD_CDC_DeInit+0xfc>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f004 ff52 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80081da:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <USBD_CDC_DeInit+0xfc>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f2:	2200      	movs	r2, #0
 80081f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <USBD_CDC_DeInit+0x100>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f004 ff3e 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <USBD_CDC_DeInit+0x100>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800821c:	4b1f      	ldr	r3, [pc, #124]	; (800829c <USBD_CDC_DeInit+0x100>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3326      	adds	r3, #38	; 0x26
 8008232:	2200      	movs	r2, #0
 8008234:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	32b0      	adds	r2, #176	; 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01f      	beq.n	8008288 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	33b0      	adds	r3, #176	; 0xb0
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32b0      	adds	r2, #176	; 0xb0
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	4618      	mov	r0, r3
 800826c:	f005 f812 	bl	800d294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	; 0xb0
 800827a:	2100      	movs	r1, #0
 800827c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000307 	.word	0x20000307
 8008298:	20000308 	.word	0x20000308
 800829c:	20000309 	.word	0x20000309

080082a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	32b0      	adds	r2, #176	; 0xb0
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e0bf      	b.n	8008450 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d050      	beq.n	800837e <USBD_CDC_Setup+0xde>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 80af 	bne.w	8008440 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d03a      	beq.n	8008360 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da1b      	bge.n	800832c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	33b0      	adds	r3, #176	; 0xb0
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800830a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	88d2      	ldrh	r2, [r2, #6]
 8008310:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88db      	ldrh	r3, [r3, #6]
 8008316:	2b07      	cmp	r3, #7
 8008318:	bf28      	it	cs
 800831a:	2307      	movcs	r3, #7
 800831c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	89fa      	ldrh	r2, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fd49 	bl	8009dbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800832a:	e090      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785a      	ldrb	r2, [r3, #1]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	2b3f      	cmp	r3, #63	; 0x3f
 800833c:	d803      	bhi.n	8008346 <USBD_CDC_Setup+0xa6>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	88db      	ldrh	r3, [r3, #6]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	e000      	b.n	8008348 <USBD_CDC_Setup+0xa8>
 8008346:	2240      	movs	r2, #64	; 0x40
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800834e:	6939      	ldr	r1, [r7, #16]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008356:	461a      	mov	r2, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fd5b 	bl	8009e14 <USBD_CtlPrepareRx>
      break;
 800835e:	e076      	b.n	800844e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	33b0      	adds	r3, #176	; 0xb0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7850      	ldrb	r0, [r2, #1]
 8008376:	2200      	movs	r2, #0
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4798      	blx	r3
      break;
 800837c:	e067      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b0b      	cmp	r3, #11
 8008384:	d851      	bhi.n	800842a <USBD_CDC_Setup+0x18a>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_CDC_Setup+0xec>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083bd 	.word	0x080083bd
 8008390:	08008439 	.word	0x08008439
 8008394:	0800842b 	.word	0x0800842b
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800842b 	.word	0x0800842b
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	080083e7 	.word	0x080083e7
 80083b8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d107      	bne.n	80083d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083c8:	f107 030a 	add.w	r3, r7, #10
 80083cc:	2202      	movs	r2, #2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fcf3 	bl	8009dbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d6:	e032      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fc7d 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          break;
 80083e4:	e02b      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d107      	bne.n	8008402 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083f2:	f107 030d 	add.w	r3, r7, #13
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fcde 	bl	8009dbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008400:	e01d      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fc68 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
          break;
 800840e:	e016      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d00f      	beq.n	800843c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fc5b 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008428:	e008      	b.n	800843c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fc54 	bl	8009cda <USBD_CtlError>
          ret = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
          break;
 8008436:	e002      	b.n	800843e <USBD_CDC_Setup+0x19e>
          break;
 8008438:	bf00      	nop
 800843a:	e008      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          break;
 800843c:	bf00      	nop
      }
      break;
 800843e:	e006      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fc49 	bl	8009cda <USBD_CtlError>
      ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  return (uint8_t)ret;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800846a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32b0      	adds	r2, #176	; 0xb0
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	e065      	b.n	800854e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	32b0      	adds	r2, #176	; 0xb0
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	f003 020f 	and.w	r2, r3, #15
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	3318      	adds	r3, #24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d02f      	beq.n	800850c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3318      	adds	r3, #24
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 010f 	and.w	r1, r3, #15
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	460b      	mov	r3, r1
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	440b      	add	r3, r1
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4403      	add	r3, r0
 80084d4:	331c      	adds	r3, #28
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d112      	bne.n	800850c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3318      	adds	r3, #24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084fe:	78f9      	ldrb	r1, [r7, #3]
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 fe62 	bl	800d1ce <USBD_LL_Transmit>
 800850a:	e01f      	b.n	800854c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	; 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	33b0      	adds	r3, #176	; 0xb0
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32b0      	adds	r2, #176	; 0xb0
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e01a      	b.n	80085be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 fe60 	bl	800d252 <USBD_LL_GetRxDataSize>
 8008592:	4602      	mov	r2, r0
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	33b0      	adds	r3, #176	; 0xb0
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085b8:	4611      	mov	r1, r2
 80085ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	32b0      	adds	r2, #176	; 0xb0
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e025      	b.n	8008634 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	33b0      	adds	r3, #176	; 0xb0
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01a      	beq.n	8008632 <USBD_CDC_EP0_RxReady+0x6c>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008602:	2bff      	cmp	r3, #255	; 0xff
 8008604:	d015      	beq.n	8008632 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	33b0      	adds	r3, #176	; 0xb0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800861e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008626:	b292      	uxth	r2, r2
 8008628:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	; 0xff
 800862e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008644:	2182      	movs	r1, #130	; 0x82
 8008646:	4818      	ldr	r0, [pc, #96]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008648:	f000 fd0f 	bl	800906a <USBD_GetEpDesc>
 800864c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800864e:	2101      	movs	r1, #1
 8008650:	4815      	ldr	r0, [pc, #84]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008652:	f000 fd0a 	bl	800906a <USBD_GetEpDesc>
 8008656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008658:	2181      	movs	r1, #129	; 0x81
 800865a:	4813      	ldr	r0, [pc, #76]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800865c:	f000 fd05 	bl	800906a <USBD_GetEpDesc>
 8008660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2210      	movs	r2, #16
 800866c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2200      	movs	r2, #0
 8008678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867c:	711a      	strb	r2, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d006      	beq.n	8008696 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008690:	711a      	strb	r2, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2243      	movs	r2, #67	; 0x43
 800869a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200002c4 	.word	0x200002c4

080086ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086b4:	2182      	movs	r1, #130	; 0x82
 80086b6:	4818      	ldr	r0, [pc, #96]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086b8:	f000 fcd7 	bl	800906a <USBD_GetEpDesc>
 80086bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086be:	2101      	movs	r1, #1
 80086c0:	4815      	ldr	r0, [pc, #84]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086c2:	f000 fcd2 	bl	800906a <USBD_GetEpDesc>
 80086c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086c8:	2181      	movs	r1, #129	; 0x81
 80086ca:	4813      	ldr	r0, [pc, #76]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086cc:	f000 fccd 	bl	800906a <USBD_GetEpDesc>
 80086d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2210      	movs	r2, #16
 80086dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2200      	movs	r2, #0
 80086e8:	711a      	strb	r2, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f042 0202 	orr.w	r2, r2, #2
 8008704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2243      	movs	r2, #67	; 0x43
 800870a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800870c:	4b02      	ldr	r3, [pc, #8]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200002c4 	.word	0x200002c4

0800871c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008724:	2182      	movs	r1, #130	; 0x82
 8008726:	4818      	ldr	r0, [pc, #96]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008728:	f000 fc9f 	bl	800906a <USBD_GetEpDesc>
 800872c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800872e:	2101      	movs	r1, #1
 8008730:	4815      	ldr	r0, [pc, #84]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008732:	f000 fc9a 	bl	800906a <USBD_GetEpDesc>
 8008736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008738:	2181      	movs	r1, #129	; 0x81
 800873a:	4813      	ldr	r0, [pc, #76]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800873c:	f000 fc95 	bl	800906a <USBD_GetEpDesc>
 8008740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2210      	movs	r2, #16
 800874c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2200      	movs	r2, #0
 8008758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800875c:	711a      	strb	r2, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008770:	711a      	strb	r2, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2243      	movs	r2, #67	; 0x43
 800877a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200002c4 	.word	0x200002c4

0800878c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	220a      	movs	r2, #10
 8008798:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20000280 	.word	0x20000280

080087ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e009      	b.n	80087d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	33b0      	adds	r3, #176	; 0xb0
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	32b0      	adds	r2, #176	; 0xb0
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	e008      	b.n	8008818 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	; 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e004      	b.n	8008852 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32b0      	adds	r2, #176	; 0xb0
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32b0      	adds	r2, #176	; 0xb0
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	e018      	b.n	80088c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <USBD_CDC_ReceivePacket+0x68>)
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f004 fcb3 	bl	800d210 <USBD_LL_PrepareReceive>
 80088aa:	e008      	b.n	80088be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <USBD_CDC_ReceivePacket+0x68>)
 80088ae:	7819      	ldrb	r1, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088b6:	2340      	movs	r3, #64	; 0x40
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f004 fca9 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000308 	.word	0x20000308

080088cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e01f      	b.n	8008924 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	79fa      	ldrb	r2, [r7, #7]
 8008916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f004 fb23 	bl	800cf64 <USBD_LL_Init>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	e025      	b.n	8008990 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32ae      	adds	r2, #174	; 0xae
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00f      	beq.n	8008980 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	32ae      	adds	r2, #174	; 0xae
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	f107 020e 	add.w	r2, r7, #14
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f004 fb2b 	bl	800cffc <USBD_LL_Start>
 80089a6:	4603      	mov	r3, r0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	4611      	mov	r1, r2
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4611      	mov	r1, r2
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 f90e 	bl	8009c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d01a      	beq.n	8008aa4 <USBD_LL_SetupStage+0x72>
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d822      	bhi.n	8008ab8 <USBD_LL_SetupStage+0x86>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <USBD_LL_SetupStage+0x4a>
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d00a      	beq.n	8008a90 <USBD_LL_SetupStage+0x5e>
 8008a7a:	e01d      	b.n	8008ab8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb65 	bl	8009154 <USBD_StdDevReq>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8e:	e020      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fbcd 	bl	8009238 <USBD_StdItfReq>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa2:	e016      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc2f 	bl	8009310 <USBD_StdEPReq>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab6:	e00c      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008abe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f004 faf8 	bl	800d0bc <USBD_LL_StallEP>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	bf00      	nop
  }

  return ret;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d16e      	bne.n	8008bd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008afa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f040 8098 	bne.w	8008c38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d913      	bls.n	8008b3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	bf28      	it	cs
 8008b2e:	4613      	movcs	r3, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f001 f98a 	bl	8009e4e <USBD_CtlContinueRx>
 8008b3a:	e07d      	b.n	8008c38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d014      	beq.n	8008b74 <USBD_LL_DataOutStage+0x98>
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d81d      	bhi.n	8008b8a <USBD_LL_DataOutStage+0xae>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <USBD_LL_DataOutStage+0x7c>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d003      	beq.n	8008b5e <USBD_LL_DataOutStage+0x82>
 8008b56:	e018      	b.n	8008b8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b5c:	e018      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fa64 	bl	8009036 <USBD_CoreFindIF>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75bb      	strb	r3, [r7, #22]
            break;
 8008b72:	e00d      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fa66 	bl	8009050 <USBD_CoreFindEP>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75bb      	strb	r3, [r7, #22]
            break;
 8008b88:	e002      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b90:	7dbb      	ldrb	r3, [r7, #22]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d119      	bne.n	8008bca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d113      	bne.n	8008bca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ba2:	7dba      	ldrb	r2, [r7, #22]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	32ae      	adds	r2, #174	; 0xae
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bb2:	7dba      	ldrb	r2, [r7, #22]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bba:	7dba      	ldrb	r2, [r7, #22]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	32ae      	adds	r2, #174	; 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f001 f950 	bl	8009e70 <USBD_CtlSendStatus>
 8008bd0:	e032      	b.n	8008c38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fa37 	bl	8009050 <USBD_CoreFindEP>
 8008be2:	4603      	mov	r3, r0
 8008be4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008be6:	7dbb      	ldrb	r3, [r7, #22]
 8008be8:	2bff      	cmp	r3, #255	; 0xff
 8008bea:	d025      	beq.n	8008c38 <USBD_LL_DataOutStage+0x15c>
 8008bec:	7dbb      	ldrb	r3, [r7, #22]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d122      	bne.n	8008c38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d117      	bne.n	8008c2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bfe:	7dba      	ldrb	r2, [r7, #22]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	32ae      	adds	r2, #174	; 0xae
 8008c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c0e:	7dba      	ldrb	r2, [r7, #22]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c16:	7dba      	ldrb	r2, [r7, #22]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	32ae      	adds	r2, #174	; 0xae
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	7afa      	ldrb	r2, [r7, #11]
 8008c24:	4611      	mov	r1, r2
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	e000      	b.n	8008c3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d16f      	bne.n	8008d36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3314      	adds	r3, #20
 8008c5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d15a      	bne.n	8008d1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d914      	bls.n	8008c9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f001 f8b2 	bl	8009df2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f004 fabb 	bl	800d210 <USBD_LL_PrepareReceive>
 8008c9a:	e03f      	b.n	8008d1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d11c      	bne.n	8008ce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d316      	bcc.n	8008ce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d20f      	bcs.n	8008ce2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 f893 	bl	8009df2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f004 fa98 	bl	800d210 <USBD_LL_PrepareReceive>
 8008ce0:	e01c      	b.n	8008d1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d10f      	bne.n	8008d0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f004 f9d3 	bl	800d0bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 f8bd 	bl	8009e96 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d03a      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fe42 	bl	80089b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d34:	e032      	b.n	8008d9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	4619      	mov	r1, r3
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f985 	bl	8009050 <USBD_CoreFindEP>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2bff      	cmp	r3, #255	; 0xff
 8008d4e:	d025      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d122      	bne.n	8008d9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d11c      	bne.n	8008d9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d62:	7dfa      	ldrb	r2, [r7, #23]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	32ae      	adds	r2, #174	; 0xae
 8008d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d014      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d72:	7dfa      	ldrb	r2, [r7, #23]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d7a:	7dfa      	ldrb	r2, [r7, #23]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	32ae      	adds	r2, #174	; 0xae
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	7afa      	ldrb	r2, [r7, #11]
 8008d88:	4611      	mov	r1, r2
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d98:	7dbb      	ldrb	r3, [r7, #22]
 8008d9a:	e000      	b.n	8008d9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d014      	beq.n	8008e0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00e      	beq.n	8008e0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6852      	ldr	r2, [r2, #4]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e0c:	2340      	movs	r3, #64	; 0x40
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 f90d 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e28:	2340      	movs	r3, #64	; 0x40
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2180      	movs	r1, #128	; 0x80
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f004 f8ff 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	621a      	str	r2, [r3, #32]

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d006      	beq.n	8008e8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d106      	bne.n	8008ec4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d110      	bne.n	8008f08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e01c      	b.n	8008f6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d115      	bne.n	8008f6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32ae      	adds	r2, #174	; 0xae
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	32ae      	adds	r2, #174	; 0xae
 8008f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01c      	b.n	8008fd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d115      	bne.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	; 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	32ae      	adds	r2, #174	; 0xae
 8008fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00e      	beq.n	800902c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6852      	ldr	r2, [r2, #4]
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	4611      	mov	r1, r2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009042:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800905c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b086      	sub	sp, #24
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	429a      	cmp	r2, r3
 8009090:	d920      	bls.n	80090d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800909a:	e013      	b.n	80090c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800909c:	f107 030a 	add.w	r3, r7, #10
 80090a0:	4619      	mov	r1, r3
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f000 f81b 	bl	80090de <USBD_GetNextDesc>
 80090a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d108      	bne.n	80090c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	789b      	ldrb	r3, [r3, #2]
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d008      	beq.n	80090d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	885b      	ldrh	r3, [r3, #2]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	897b      	ldrh	r3, [r7, #10]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d8e5      	bhi.n	800909c <USBD_GetEpDesc+0x32>
 80090d0:	e000      	b.n	80090d4 <USBD_GetEpDesc+0x6a>
          break;
 80090d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090d4:	693b      	ldr	r3, [r7, #16]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800910a:	68fb      	ldr	r3, [r7, #12]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3301      	adds	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009136:	8a3b      	ldrh	r3, [r7, #16]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	b21a      	sxth	r2, r3
 800913c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009140:	4313      	orrs	r3, r2
 8009142:	b21b      	sxth	r3, r3
 8009144:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009146:	89fb      	ldrh	r3, [r7, #14]
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d005      	beq.n	800917a <USBD_StdDevReq+0x26>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d857      	bhi.n	8009222 <USBD_StdDevReq+0xce>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00f      	beq.n	8009196 <USBD_StdDevReq+0x42>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d153      	bne.n	8009222 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	32ae      	adds	r2, #174	; 0xae
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
      break;
 8009194:	e04a      	b.n	800922c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b09      	cmp	r3, #9
 800919c:	d83b      	bhi.n	8009216 <USBD_StdDevReq+0xc2>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <USBD_StdDevReq+0x50>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	0800920d 	.word	0x0800920d
 80091ac:	08009217 	.word	0x08009217
 80091b0:	08009203 	.word	0x08009203
 80091b4:	08009217 	.word	0x08009217
 80091b8:	080091d7 	.word	0x080091d7
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	08009217 	.word	0x08009217
 80091c4:	080091ef 	.word	0x080091ef
 80091c8:	080091e1 	.word	0x080091e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa3c 	bl	800964c <USBD_GetDescriptor>
          break;
 80091d4:	e024      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fba1 	bl	8009920 <USBD_SetAddress>
          break;
 80091de:	e01f      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fbe0 	bl	80099a8 <USBD_SetConfig>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
          break;
 80091ec:	e018      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fc83 	bl	8009afc <USBD_GetConfig>
          break;
 80091f6:	e013      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fcb4 	bl	8009b68 <USBD_GetStatus>
          break;
 8009200:	e00e      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fce3 	bl	8009bd0 <USBD_SetFeature>
          break;
 800920a:	e009      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fd07 	bl	8009c22 <USBD_ClrFeature>
          break;
 8009214:	e004      	b.n	8009220 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd5e 	bl	8009cda <USBD_CtlError>
          break;
 800921e:	bf00      	nop
      }
      break;
 8009220:	e004      	b.n	800922c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fd58 	bl	8009cda <USBD_CtlError>
      break;
 800922a:	bf00      	nop
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop

08009238 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800924e:	2b40      	cmp	r3, #64	; 0x40
 8009250:	d005      	beq.n	800925e <USBD_StdItfReq+0x26>
 8009252:	2b40      	cmp	r3, #64	; 0x40
 8009254:	d852      	bhi.n	80092fc <USBD_StdItfReq+0xc4>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <USBD_StdItfReq+0x26>
 800925a:	2b20      	cmp	r3, #32
 800925c:	d14e      	bne.n	80092fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	2b02      	cmp	r3, #2
 800926a:	d840      	bhi.n	80092ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	889b      	ldrh	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d836      	bhi.n	80092e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	889b      	ldrh	r3, [r3, #4]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fed9 	bl	8009036 <USBD_CoreFindIF>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2bff      	cmp	r3, #255	; 0xff
 800928c:	d01d      	beq.n	80092ca <USBD_StdItfReq+0x92>
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11a      	bne.n	80092ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009294:	7bba      	ldrb	r2, [r7, #14]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	; 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092a4:	7bba      	ldrb	r2, [r7, #14]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092ac:	7bba      	ldrb	r2, [r7, #14]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	32ae      	adds	r2, #174	; 0xae
 80092b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092c2:	e004      	b.n	80092ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092c8:	e001      	b.n	80092ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d110      	bne.n	80092f8 <USBD_StdItfReq+0xc0>
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fdc7 	bl	8009e70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092e2:	e009      	b.n	80092f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fcf7 	bl	8009cda <USBD_CtlError>
          break;
 80092ec:	e004      	b.n	80092f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fcf2 	bl	8009cda <USBD_CtlError>
          break;
 80092f6:	e000      	b.n	80092fa <USBD_StdItfReq+0xc2>
          break;
 80092f8:	bf00      	nop
      }
      break;
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fceb 	bl	8009cda <USBD_CtlError>
      break;
 8009304:	bf00      	nop
  }

  return ret;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	889b      	ldrh	r3, [r3, #4]
 8009322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	d007      	beq.n	8009340 <USBD_StdEPReq+0x30>
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	f200 817f 	bhi.w	8009634 <USBD_StdEPReq+0x324>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d02a      	beq.n	8009390 <USBD_StdEPReq+0x80>
 800933a:	2b20      	cmp	r3, #32
 800933c:	f040 817a 	bne.w	8009634 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fe83 	bl	8009050 <USBD_CoreFindEP>
 800934a:	4603      	mov	r3, r0
 800934c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800934e:	7b7b      	ldrb	r3, [r7, #13]
 8009350:	2bff      	cmp	r3, #255	; 0xff
 8009352:	f000 8174 	beq.w	800963e <USBD_StdEPReq+0x32e>
 8009356:	7b7b      	ldrb	r3, [r7, #13]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 8170 	bne.w	800963e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800935e:	7b7a      	ldrb	r2, [r7, #13]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009366:	7b7a      	ldrb	r2, [r7, #13]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	32ae      	adds	r2, #174	; 0xae
 800936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8163 	beq.w	800963e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009378:	7b7a      	ldrb	r2, [r7, #13]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32ae      	adds	r2, #174	; 0xae
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800938e:	e156      	b.n	800963e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	2b03      	cmp	r3, #3
 8009396:	d008      	beq.n	80093aa <USBD_StdEPReq+0x9a>
 8009398:	2b03      	cmp	r3, #3
 800939a:	f300 8145 	bgt.w	8009628 <USBD_StdEPReq+0x318>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 809b 	beq.w	80094da <USBD_StdEPReq+0x1ca>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d03c      	beq.n	8009422 <USBD_StdEPReq+0x112>
 80093a8:	e13e      	b.n	8009628 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d002      	beq.n	80093bc <USBD_StdEPReq+0xac>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d016      	beq.n	80093e8 <USBD_StdEPReq+0xd8>
 80093ba:	e02c      	b.n	8009416 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <USBD_StdEPReq+0xce>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d00a      	beq.n	80093de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f003 fe75 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f003 fe71 	bl	800d0bc <USBD_LL_StallEP>
 80093da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093dc:	e020      	b.n	8009420 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fc7a 	bl	8009cda <USBD_CtlError>
              break;
 80093e6:	e01b      	b.n	8009420 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	885b      	ldrh	r3, [r3, #2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10e      	bne.n	800940e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <USBD_StdEPReq+0xfe>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d008      	beq.n	800940e <USBD_StdEPReq+0xfe>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d104      	bne.n	800940e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f003 fe57 	bl	800d0bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fd2e 	bl	8009e70 <USBD_CtlSendStatus>

              break;
 8009414:	e004      	b.n	8009420 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fc5e 	bl	8009cda <USBD_CtlError>
              break;
 800941e:	bf00      	nop
          }
          break;
 8009420:	e107      	b.n	8009632 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d002      	beq.n	8009434 <USBD_StdEPReq+0x124>
 800942e:	2b03      	cmp	r3, #3
 8009430:	d016      	beq.n	8009460 <USBD_StdEPReq+0x150>
 8009432:	e04b      	b.n	80094cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <USBD_StdEPReq+0x146>
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b80      	cmp	r3, #128	; 0x80
 800943e:	d00a      	beq.n	8009456 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f003 fe39 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f003 fe35 	bl	800d0bc <USBD_LL_StallEP>
 8009452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009454:	e040      	b.n	80094d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fc3e 	bl	8009cda <USBD_CtlError>
              break;
 800945e:	e03b      	b.n	80094d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	885b      	ldrh	r3, [r3, #2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d136      	bne.n	80094d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f003 fe3f 	bl	800d0fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fcf7 	bl	8009e70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fde2 	bl	8009050 <USBD_CoreFindEP>
 800948c:	4603      	mov	r3, r0
 800948e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009490:	7b7b      	ldrb	r3, [r7, #13]
 8009492:	2bff      	cmp	r3, #255	; 0xff
 8009494:	d01f      	beq.n	80094d6 <USBD_StdEPReq+0x1c6>
 8009496:	7b7b      	ldrb	r3, [r7, #13]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d11c      	bne.n	80094d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800949c:	7b7a      	ldrb	r2, [r7, #13]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32ae      	adds	r2, #174	; 0xae
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d010      	beq.n	80094d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094b4:	7b7a      	ldrb	r2, [r7, #13]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32ae      	adds	r2, #174	; 0xae
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094ca:	e004      	b.n	80094d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc03 	bl	8009cda <USBD_CtlError>
              break;
 80094d4:	e000      	b.n	80094d8 <USBD_StdEPReq+0x1c8>
              break;
 80094d6:	bf00      	nop
          }
          break;
 80094d8:	e0ab      	b.n	8009632 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d002      	beq.n	80094ec <USBD_StdEPReq+0x1dc>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d032      	beq.n	8009550 <USBD_StdEPReq+0x240>
 80094ea:	e097      	b.n	800961c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <USBD_StdEPReq+0x1f2>
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d004      	beq.n	8009502 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fbed 	bl	8009cda <USBD_CtlError>
                break;
 8009500:	e091      	b.n	8009626 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009506:	2b00      	cmp	r3, #0
 8009508:	da0b      	bge.n	8009522 <USBD_StdEPReq+0x212>
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	3310      	adds	r3, #16
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	3304      	adds	r3, #4
 8009520:	e00b      	b.n	800953a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	3304      	adds	r3, #4
 800953a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2202      	movs	r2, #2
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc37 	bl	8009dbc <USBD_CtlSendData>
              break;
 800954e:	e06a      	b.n	8009626 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009554:	2b00      	cmp	r3, #0
 8009556:	da11      	bge.n	800957c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	f003 020f 	and.w	r2, r3, #15
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d117      	bne.n	80095a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fbb0 	bl	8009cda <USBD_CtlError>
                  break;
 800957a:	e054      	b.n	8009626 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f003 020f 	and.w	r2, r3, #15
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb9d 	bl	8009cda <USBD_CtlError>
                  break;
 80095a0:	e041      	b.n	8009626 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da0b      	bge.n	80095c2 <USBD_StdEPReq+0x2b2>
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
 80095ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	3310      	adds	r3, #16
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	e00b      	b.n	80095da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4413      	add	r3, r2
 80095d8:	3304      	adds	r3, #4
 80095da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <USBD_StdEPReq+0x2d8>
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d103      	bne.n	80095f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e00e      	b.n	800960e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f003 fd9f 	bl	800d138 <USBD_LL_IsStallEP>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e002      	b.n	800960e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2202      	movs	r2, #2
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fbd1 	bl	8009dbc <USBD_CtlSendData>
              break;
 800961a:	e004      	b.n	8009626 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb5b 	bl	8009cda <USBD_CtlError>
              break;
 8009624:	bf00      	nop
          }
          break;
 8009626:	e004      	b.n	8009632 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb55 	bl	8009cda <USBD_CtlError>
          break;
 8009630:	bf00      	nop
      }
      break;
 8009632:	e005      	b.n	8009640 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb4f 	bl	8009cda <USBD_CtlError>
      break;
 800963c:	e000      	b.n	8009640 <USBD_StdEPReq+0x330>
      break;
 800963e:	bf00      	nop
  }

  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	885b      	ldrh	r3, [r3, #2]
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	2b06      	cmp	r3, #6
 800966e:	f200 8128 	bhi.w	80098c2 <USBD_GetDescriptor+0x276>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USBD_GetDescriptor+0x2c>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009695 	.word	0x08009695
 800967c:	080096ad 	.word	0x080096ad
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080098c3 	.word	0x080098c3
 8009688:	080098c3 	.word	0x080098c3
 800968c:	08009863 	.word	0x08009863
 8009690:	0800988f 	.word	0x0800988f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
      break;
 80096aa:	e112      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7c1b      	ldrb	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10d      	bne.n	80096d0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	f107 0208 	add.w	r2, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3301      	adds	r3, #1
 80096ca:	2202      	movs	r2, #2
 80096cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096ce:	e100      	b.n	80098d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	f107 0208 	add.w	r2, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	2202      	movs	r2, #2
 80096e8:	701a      	strb	r2, [r3, #0]
      break;
 80096ea:	e0f2      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	f200 80ac 	bhi.w	8009850 <USBD_GetDescriptor+0x204>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBD_GetDescriptor+0xb4>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009719 	.word	0x08009719
 8009704:	0800974d 	.word	0x0800974d
 8009708:	08009781 	.word	0x08009781
 800970c:	080097b5 	.word	0x080097b5
 8009710:	080097e9 	.word	0x080097e9
 8009714:	0800981d 	.word	0x0800981d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e091      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 facb 	bl	8009cda <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e089      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e077      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fab1 	bl	8009cda <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e06f      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e05d      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa97 	bl	8009cda <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e055      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e043      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa7d 	bl	8009cda <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e03b      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7c12      	ldrb	r2, [r2, #16]
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	4610      	mov	r0, r2
 8009806:	4798      	blx	r3
 8009808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980a:	e029      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa63 	bl	8009cda <USBD_CtlError>
            err++;
 8009814:	7afb      	ldrb	r3, [r7, #11]
 8009816:	3301      	adds	r3, #1
 8009818:	72fb      	strb	r3, [r7, #11]
          break;
 800981a:	e021      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	7c12      	ldrb	r2, [r2, #16]
 8009834:	f107 0108 	add.w	r1, r7, #8
 8009838:	4610      	mov	r0, r2
 800983a:	4798      	blx	r3
 800983c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983e:	e00f      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa49 	bl	8009cda <USBD_CtlError>
            err++;
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	3301      	adds	r3, #1
 800984c:	72fb      	strb	r3, [r7, #11]
          break;
 800984e:	e007      	b.n	8009860 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa41 	bl	8009cda <USBD_CtlError>
          err++;
 8009858:	7afb      	ldrb	r3, [r7, #11]
 800985a:	3301      	adds	r3, #1
 800985c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800985e:	bf00      	nop
      }
      break;
 8009860:	e037      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009872:	f107 0208 	add.w	r2, r7, #8
 8009876:	4610      	mov	r0, r2
 8009878:	4798      	blx	r3
 800987a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800987c:	e029      	b.n	80098d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fa2a 	bl	8009cda <USBD_CtlError>
        err++;
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	3301      	adds	r3, #1
 800988a:	72fb      	strb	r3, [r7, #11]
      break;
 800988c:	e021      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	7c1b      	ldrb	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10d      	bne.n	80098b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	f107 0208 	add.w	r2, r7, #8
 80098a2:	4610      	mov	r0, r2
 80098a4:	4798      	blx	r3
 80098a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	2207      	movs	r2, #7
 80098ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098b0:	e00f      	b.n	80098d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fa10 	bl	8009cda <USBD_CtlError>
        err++;
 80098ba:	7afb      	ldrb	r3, [r7, #11]
 80098bc:	3301      	adds	r3, #1
 80098be:	72fb      	strb	r3, [r7, #11]
      break;
 80098c0:	e007      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fa08 	bl	8009cda <USBD_CtlError>
      err++;
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	3301      	adds	r3, #1
 80098ce:	72fb      	strb	r3, [r7, #11]
      break;
 80098d0:	bf00      	nop
  }

  if (err != 0U)
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11e      	bne.n	8009916 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	88db      	ldrh	r3, [r3, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d016      	beq.n	800990e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098e0:	893b      	ldrh	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00e      	beq.n	8009904 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	88da      	ldrh	r2, [r3, #6]
 80098ea:	893b      	ldrh	r3, [r7, #8]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bf28      	it	cs
 80098f0:	4613      	movcs	r3, r2
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098f6:	893b      	ldrh	r3, [r7, #8]
 80098f8:	461a      	mov	r2, r3
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa5d 	bl	8009dbc <USBD_CtlSendData>
 8009902:	e009      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9e7 	bl	8009cda <USBD_CtlError>
 800990c:	e004      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 faae 	bl	8009e70 <USBD_CtlSendStatus>
 8009914:	e000      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    return;
 8009916:	bf00      	nop
  }
}
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop

08009920 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	889b      	ldrh	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d131      	bne.n	8009996 <USBD_SetAddress+0x76>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d12d      	bne.n	8009996 <USBD_SetAddress+0x76>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	2b7f      	cmp	r3, #127	; 0x7f
 8009940:	d829      	bhi.n	8009996 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	885b      	ldrh	r3, [r3, #2]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b03      	cmp	r3, #3
 8009958:	d104      	bne.n	8009964 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9bc 	bl	8009cda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	e01d      	b.n	80099a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	7bfa      	ldrb	r2, [r7, #15]
 8009968:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f003 fc0d 	bl	800d190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa7a 	bl	8009e70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998a:	e009      	b.n	80099a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009994:	e004      	b.n	80099a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f99e 	bl	8009cda <USBD_CtlError>
  }
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	885b      	ldrh	r3, [r3, #2]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b4e      	ldr	r3, [pc, #312]	; (8009af8 <USBD_SetConfig+0x150>)
 80099be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099c0:	4b4d      	ldr	r3, [pc, #308]	; (8009af8 <USBD_SetConfig+0x150>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d905      	bls.n	80099d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f985 	bl	8009cda <USBD_CtlError>
    return USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e08c      	b.n	8009aee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d002      	beq.n	80099e6 <USBD_SetConfig+0x3e>
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d029      	beq.n	8009a38 <USBD_SetConfig+0x90>
 80099e4:	e075      	b.n	8009ad2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099e6:	4b44      	ldr	r3, [pc, #272]	; (8009af8 <USBD_SetConfig+0x150>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d020      	beq.n	8009a30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099ee:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <USBD_SetConfig+0x150>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099f8:	4b3f      	ldr	r3, [pc, #252]	; (8009af8 <USBD_SetConfig+0x150>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe ffe1 	bl	80089c6 <USBD_SetClassConfig>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d008      	beq.n	8009a20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f962 	bl	8009cda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a1e:	e065      	b.n	8009aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fa25 	bl	8009e70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a2e:	e05d      	b.n	8009aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa1d 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009a36:	e059      	b.n	8009aec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a38:	4b2f      	ldr	r3, [pc, #188]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d112      	bne.n	8009a66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a48:	4b2b      	ldr	r3, [pc, #172]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a52:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7fe ffd0 	bl	80089fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa06 	bl	8009e70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a64:	e042      	b.n	8009aec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d02a      	beq.n	8009aca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe ffbe 	bl	80089fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fe ff97 	bl	80089c6 <USBD_SetClassConfig>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f918 	bl	8009cda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe ffa3 	bl	80089fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ac0:	e014      	b.n	8009aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9d4 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009ac8:	e010      	b.n	8009aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9d0 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009ad0:	e00c      	b.n	8009aec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f900 	bl	8009cda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <USBD_SetConfig+0x150>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fe ff8c 	bl	80089fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aea:	bf00      	nop
  }

  return ret;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200022c8 	.word	0x200022c8

08009afc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	88db      	ldrh	r3, [r3, #6]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d004      	beq.n	8009b18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8e2 	bl	8009cda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b16:	e023      	b.n	8009b60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	dc02      	bgt.n	8009b2a <USBD_GetConfig+0x2e>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dc03      	bgt.n	8009b30 <USBD_GetConfig+0x34>
 8009b28:	e015      	b.n	8009b56 <USBD_GetConfig+0x5a>
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d00b      	beq.n	8009b46 <USBD_GetConfig+0x4a>
 8009b2e:	e012      	b.n	8009b56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f93c 	bl	8009dbc <USBD_CtlSendData>
        break;
 8009b44:	e00c      	b.n	8009b60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f934 	bl	8009dbc <USBD_CtlSendData>
        break;
 8009b54:	e004      	b.n	8009b60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f8be 	bl	8009cda <USBD_CtlError>
        break;
 8009b5e:	bf00      	nop
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d81e      	bhi.n	8009bbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	88db      	ldrh	r3, [r3, #6]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d004      	beq.n	8009b92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8a5 	bl	8009cda <USBD_CtlError>
        break;
 8009b90:	e01a      	b.n	8009bc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d005      	beq.n	8009bae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f043 0202 	orr.w	r2, r3, #2
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f900 	bl	8009dbc <USBD_CtlSendData>
      break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f88a 	bl	8009cda <USBD_CtlError>
      break;
 8009bc6:	bf00      	nop
  }
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d107      	bne.n	8009bf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f940 	bl	8009e70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bf0:	e013      	b.n	8009c1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d10b      	bne.n	8009c12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f930 	bl	8009e70 <USBD_CtlSendStatus>
}
 8009c10:	e003      	b.n	8009c1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f860 	bl	8009cda <USBD_CtlError>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d80b      	bhi.n	8009c52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10c      	bne.n	8009c5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f910 	bl	8009e70 <USBD_CtlSendStatus>
      }
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f840 	bl	8009cda <USBD_CtlError>
      break;
 8009c5a:	e000      	b.n	8009c5e <USBD_ClrFeature+0x3c>
      break;
 8009c5c:	bf00      	nop
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	781a      	ldrb	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fa41 	bl	8009118 <SWAPBYTE>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff fa34 	bl	8009118 <SWAPBYTE>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fa27 	bl	8009118 <SWAPBYTE>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	80da      	strh	r2, [r3, #6]
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce4:	2180      	movs	r1, #128	; 0x80
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f003 f9e8 	bl	800d0bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f003 f9e4 	bl	800d0bc <USBD_LL_StallEP>
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d036      	beq.n	8009d80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d16:	6938      	ldr	r0, [r7, #16]
 8009d18:	f000 f836 	bl	8009d88 <USBD_GetLen>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	4413      	add	r3, r2
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	7812      	ldrb	r2, [r2, #0]
 8009d34:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	2203      	movs	r2, #3
 8009d44:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d4c:	e013      	b.n	8009d76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]
    idx++;
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	3301      	adds	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	3301      	adds	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e7      	bne.n	8009d4e <USBD_GetString+0x52>
 8009d7e:	e000      	b.n	8009d82 <USBD_GetString+0x86>
    return;
 8009d80:	bf00      	nop
  }
}
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d98:	e005      	b.n	8009da6 <USBD_GetLen+0x1e>
  {
    len++;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3301      	adds	r3, #1
 8009da4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f5      	bne.n	8009d9a <USBD_GetLen+0x12>
  }

  return len;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	2100      	movs	r1, #0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f003 f9f3 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	2100      	movs	r1, #0
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f003 f9e2 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f003 f9e6 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f003 f9d5 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e80:	2300      	movs	r3, #0
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f003 f9a1 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f003 f9af 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ece:	2b84      	cmp	r3, #132	; 0x84
 8009ed0:	d005      	beq.n	8009ede <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	3303      	adds	r3, #3
 8009edc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ede:	68fb      	ldr	r3, [r7, #12]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ef0:	f000 fff8 	bl	800aee4 <vTaskStartScheduler>
  
  return osOK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efc:	b089      	sub	sp, #36	; 0x24
 8009efe:	af04      	add	r7, sp, #16
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d020      	beq.n	8009f4e <osThreadCreate+0x54>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01c      	beq.n	8009f4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685c      	ldr	r4, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691e      	ldr	r6, [r3, #16]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ffc8 	bl	8009ebc <makeFreeRtosPriority>
 8009f2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f36:	9202      	str	r2, [sp, #8]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	9100      	str	r1, [sp, #0]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	4632      	mov	r2, r6
 8009f40:	4629      	mov	r1, r5
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fdda 	bl	800aafc <xTaskCreateStatic>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e01c      	b.n	8009f88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685c      	ldr	r4, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff ffaa 	bl	8009ebc <makeFreeRtosPriority>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	9200      	str	r2, [sp, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	4632      	mov	r2, r6
 8009f76:	4629      	mov	r1, r5
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fe1c 	bl	800abb6 <xTaskCreate>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d001      	beq.n	8009f88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e000      	b.n	8009f8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f88:	68fb      	ldr	r3, [r7, #12]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <osDelay+0x16>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	e000      	b.n	8009faa <osDelay+0x18>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 ff66 	bl	800ae7c <vTaskDelay>
  
  return osOK;
 8009fb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f103 0208 	add.w	r2, r3, #8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f103 0208 	add.w	r2, r3, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f103 0208 	add.w	r2, r3, #8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	601a      	str	r2, [r3, #0]
}
 800a050:	bf00      	nop
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a072:	d103      	bne.n	800a07c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e00c      	b.n	800a096 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3308      	adds	r3, #8
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	e002      	b.n	800a08a <vListInsert+0x2e>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d2f6      	bcs.n	800a084 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6892      	ldr	r2, [r2, #8]
 800a0e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6852      	ldr	r2, [r2, #4]
 800a0ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d103      	bne.n	800a102 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	1e5a      	subs	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10a      	bne.n	800a14e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a14e:	f002 f8e1 	bl	800c314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	441a      	add	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17e:	3b01      	subs	r3, #1
 800a180:	68f9      	ldr	r1, [r7, #12]
 800a182:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a184:	fb01 f303 	mul.w	r3, r1, r3
 800a188:	441a      	add	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	22ff      	movs	r2, #255	; 0xff
 800a192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	22ff      	movs	r2, #255	; 0xff
 800a19a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d114      	bne.n	800a1ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01a      	beq.n	800a1e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3310      	adds	r3, #16
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 f967 	bl	800b484 <xTaskRemoveFromEventList>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d012      	beq.n	800a1e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <xQueueGenericReset+0xcc>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	e009      	b.n	800a1e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3310      	adds	r3, #16
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fef1 	bl	8009fba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3324      	adds	r3, #36	; 0x24
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff feec 	bl	8009fba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1e2:	f002 f8c7 	bl	800c374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1e6:	2301      	movs	r3, #1
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08e      	sub	sp, #56	; 0x38
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <xQueueGenericCreateStatic+0x52>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <xQueueGenericCreateStatic+0x56>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <xQueueGenericCreateStatic+0x58>
 800a24a:	2300      	movs	r3, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10a      	bne.n	800a266 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	623b      	str	r3, [r7, #32]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <xQueueGenericCreateStatic+0x7e>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <xQueueGenericCreateStatic+0x82>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <xQueueGenericCreateStatic+0x84>
 800a276:	2300      	movs	r3, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	61fb      	str	r3, [r7, #28]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a292:	2350      	movs	r3, #80	; 0x50
 800a294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2b50      	cmp	r3, #80	; 0x50
 800a29a:	d00a      	beq.n	800a2b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	61bb      	str	r3, [r7, #24]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00d      	beq.n	800a2da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	68b9      	ldr	r1, [r7, #8]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f805 	bl	800a2e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3730      	adds	r7, #48	; 0x30
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d103      	bne.n	800a300 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	e002      	b.n	800a306 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a312:	2101      	movs	r1, #1
 800a314:	69b8      	ldr	r0, [r7, #24]
 800a316:	f7ff ff05 	bl	800a124 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	78fa      	ldrb	r2, [r7, #3]
 800a31e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	; 0x38
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a33a:	2300      	movs	r3, #0
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xQueueGenericSend+0x32>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <xQueueGenericSend+0x40>
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <xQueueGenericSend+0x44>
 800a36c:	2301      	movs	r3, #1
 800a36e:	e000      	b.n	800a372 <xQueueGenericSend+0x46>
 800a370:	2300      	movs	r3, #0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <xQueueGenericSend+0x60>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d103      	bne.n	800a39a <xQueueGenericSend+0x6e>
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <xQueueGenericSend+0x72>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <xQueueGenericSend+0x74>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueGenericSend+0x8e>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	623b      	str	r3, [r7, #32]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3ba:	f001 fa25 	bl	800b808 <xTaskGetSchedulerState>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <xQueueGenericSend+0x9e>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <xQueueGenericSend+0xa2>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e000      	b.n	800a3d0 <xQueueGenericSend+0xa4>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <xQueueGenericSend+0xbe>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	61fb      	str	r3, [r7, #28]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3ea:	f001 ff93 	bl	800c314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d302      	bcc.n	800a400 <xQueueGenericSend+0xd4>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d129      	bne.n	800a454 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a406:	f000 fa0b 	bl	800a820 <prvCopyDataToQueue>
 800a40a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	2b00      	cmp	r3, #0
 800a412:	d010      	beq.n	800a436 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	3324      	adds	r3, #36	; 0x24
 800a418:	4618      	mov	r0, r3
 800a41a:	f001 f833 	bl	800b484 <xTaskRemoveFromEventList>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d013      	beq.n	800a44c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a424:	4b3f      	ldr	r3, [pc, #252]	; (800a524 <xQueueGenericSend+0x1f8>)
 800a426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	e00a      	b.n	800a44c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d007      	beq.n	800a44c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a43c:	4b39      	ldr	r3, [pc, #228]	; (800a524 <xQueueGenericSend+0x1f8>)
 800a43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a44c:	f001 ff92 	bl	800c374 <vPortExitCritical>
				return pdPASS;
 800a450:	2301      	movs	r3, #1
 800a452:	e063      	b.n	800a51c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a45a:	f001 ff8b 	bl	800c374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	e05c      	b.n	800a51c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a468:	f107 0314 	add.w	r3, r7, #20
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f86b 	bl	800b548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a472:	2301      	movs	r3, #1
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a476:	f001 ff7d 	bl	800c374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a47a:	f000 fda5 	bl	800afc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a47e:	f001 ff49 	bl	800c314 <vPortEnterCritical>
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a488:	b25b      	sxtb	r3, r3
 800a48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48e:	d103      	bne.n	800a498 <xQueueGenericSend+0x16c>
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a49e:	b25b      	sxtb	r3, r3
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a4:	d103      	bne.n	800a4ae <xQueueGenericSend+0x182>
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ae:	f001 ff61 	bl	800c374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4b2:	1d3a      	adds	r2, r7, #4
 800a4b4:	f107 0314 	add.w	r3, r7, #20
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f001 f85a 	bl	800b574 <xTaskCheckForTimeOut>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d124      	bne.n	800a510 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c8:	f000 faa2 	bl	800aa10 <prvIsQueueFull>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d018      	beq.n	800a504 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 ff82 	bl	800b3e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4e2:	f000 fa2d 	bl	800a940 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4e6:	f000 fd7d 	bl	800afe4 <xTaskResumeAll>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f47f af7c 	bne.w	800a3ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <xQueueGenericSend+0x1f8>)
 800a4f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	e772      	b.n	800a3ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a506:	f000 fa1b 	bl	800a940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a50a:	f000 fd6b 	bl	800afe4 <xTaskResumeAll>
 800a50e:	e76c      	b.n	800a3ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a512:	f000 fa15 	bl	800a940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a516:	f000 fd65 	bl	800afe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a51a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3738      	adds	r7, #56	; 0x38
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b090      	sub	sp, #64	; 0x40
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d103      	bne.n	800a564 <xQueueGenericSendFromISR+0x3c>
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <xQueueGenericSendFromISR+0x40>
 800a564:	2301      	movs	r3, #1
 800a566:	e000      	b.n	800a56a <xQueueGenericSendFromISR+0x42>
 800a568:	2300      	movs	r3, #0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b02      	cmp	r3, #2
 800a588:	d103      	bne.n	800a592 <xQueueGenericSendFromISR+0x6a>
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <xQueueGenericSendFromISR+0x6e>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <xQueueGenericSendFromISR+0x70>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5b2:	f001 ff91 	bl	800c4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5b6:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	61fa      	str	r2, [r7, #28]
 800a5cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d302      	bcc.n	800a5e4 <xQueueGenericSendFromISR+0xbc>
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d12f      	bne.n	800a644 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5fa:	f000 f911 	bl	800a820 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a606:	d112      	bne.n	800a62e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d016      	beq.n	800a63e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	3324      	adds	r3, #36	; 0x24
 800a614:	4618      	mov	r0, r3
 800a616:	f000 ff35 	bl	800b484 <xTaskRemoveFromEventList>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00e      	beq.n	800a63e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	e007      	b.n	800a63e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a62e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a632:	3301      	adds	r3, #1
 800a634:	b2db      	uxtb	r3, r3
 800a636:	b25a      	sxtb	r2, r3
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a63e:	2301      	movs	r3, #1
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a642:	e001      	b.n	800a648 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a652:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a656:	4618      	mov	r0, r3
 800a658:	3740      	adds	r7, #64	; 0x40
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08c      	sub	sp, #48	; 0x30
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <xQueueReceive+0x30>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	623b      	str	r3, [r7, #32]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d103      	bne.n	800a69e <xQueueReceive+0x3e>
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <xQueueReceive+0x42>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e000      	b.n	800a6a4 <xQueueReceive+0x44>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <xQueueReceive+0x5e>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	61fb      	str	r3, [r7, #28]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6be:	f001 f8a3 	bl	800b808 <xTaskGetSchedulerState>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d102      	bne.n	800a6ce <xQueueReceive+0x6e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <xQueueReceive+0x72>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e000      	b.n	800a6d4 <xQueueReceive+0x74>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueReceive+0x8e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	61bb      	str	r3, [r7, #24]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ee:	f001 fe11 	bl	800c314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01f      	beq.n	800a73e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6fe:	68b9      	ldr	r1, [r7, #8]
 800a700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a702:	f000 f8f7 	bl	800a8f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	1e5a      	subs	r2, r3, #1
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	3310      	adds	r3, #16
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 feb2 	bl	800b484 <xTaskRemoveFromEventList>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d007      	beq.n	800a736 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a726:	4b3d      	ldr	r3, [pc, #244]	; (800a81c <xQueueReceive+0x1bc>)
 800a728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a736:	f001 fe1d 	bl	800c374 <vPortExitCritical>
				return pdPASS;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e069      	b.n	800a812 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d103      	bne.n	800a74c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a744:	f001 fe16 	bl	800c374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a748:	2300      	movs	r3, #0
 800a74a:	e062      	b.n	800a812 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a752:	f107 0310 	add.w	r3, r7, #16
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fef6 	bl	800b548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a760:	f001 fe08 	bl	800c374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a764:	f000 fc30 	bl	800afc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a768:	f001 fdd4 	bl	800c314 <vPortEnterCritical>
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a772:	b25b      	sxtb	r3, r3
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a778:	d103      	bne.n	800a782 <xQueueReceive+0x122>
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a788:	b25b      	sxtb	r3, r3
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a78e:	d103      	bne.n	800a798 <xQueueReceive+0x138>
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a798:	f001 fdec 	bl	800c374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a79c:	1d3a      	adds	r2, r7, #4
 800a79e:	f107 0310 	add.w	r3, r7, #16
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fee5 	bl	800b574 <xTaskCheckForTimeOut>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d123      	bne.n	800a7f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b2:	f000 f917 	bl	800a9e4 <prvIsQueueEmpty>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d017      	beq.n	800a7ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	3324      	adds	r3, #36	; 0x24
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fe0d 	bl	800b3e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7cc:	f000 f8b8 	bl	800a940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7d0:	f000 fc08 	bl	800afe4 <xTaskResumeAll>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d189      	bne.n	800a6ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a7da:	4b10      	ldr	r3, [pc, #64]	; (800a81c <xQueueReceive+0x1bc>)
 800a7dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	e780      	b.n	800a6ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ee:	f000 f8a7 	bl	800a940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7f2:	f000 fbf7 	bl	800afe4 <xTaskResumeAll>
 800a7f6:	e77a      	b.n	800a6ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7fa:	f000 f8a1 	bl	800a940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7fe:	f000 fbf1 	bl	800afe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a804:	f000 f8ee 	bl	800a9e4 <prvIsQueueEmpty>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f43f af6f 	beq.w	800a6ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a810:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a812:	4618      	mov	r0, r3
 800a814:	3730      	adds	r7, #48	; 0x30
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d14d      	bne.n	800a8e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fffa 	bl	800b844 <xTaskPriorityDisinherit>
 800a850:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	609a      	str	r2, [r3, #8]
 800a858:	e043      	b.n	800a8e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d119      	bne.n	800a894 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6858      	ldr	r0, [r3, #4]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	461a      	mov	r2, r3
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	f002 fde0 	bl	800d430 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	441a      	add	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	429a      	cmp	r2, r3
 800a888:	d32b      	bcc.n	800a8e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	605a      	str	r2, [r3, #4]
 800a892:	e026      	b.n	800a8e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68d8      	ldr	r0, [r3, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	461a      	mov	r2, r3
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	f002 fdc6 	bl	800d430 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	425b      	negs	r3, r3
 800a8ae:	441a      	add	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d207      	bcs.n	800a8d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	689a      	ldr	r2, [r3, #8]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c8:	425b      	negs	r3, r3
 800a8ca:	441a      	add	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d105      	bne.n	800a8e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8ea:	697b      	ldr	r3, [r7, #20]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d018      	beq.n	800a938 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68da      	ldr	r2, [r3, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	441a      	add	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d303      	bcc.n	800a928 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68d9      	ldr	r1, [r3, #12]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	461a      	mov	r2, r3
 800a932:	6838      	ldr	r0, [r7, #0]
 800a934:	f002 fd7c 	bl	800d430 <memcpy>
	}
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a948:	f001 fce4 	bl	800c314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a952:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a954:	e011      	b.n	800a97a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d012      	beq.n	800a984 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3324      	adds	r3, #36	; 0x24
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fd8e 	bl	800b484 <xTaskRemoveFromEventList>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a96e:	f000 fe63 	bl	800b638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	3b01      	subs	r3, #1
 800a976:	b2db      	uxtb	r3, r3
 800a978:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dce9      	bgt.n	800a956 <prvUnlockQueue+0x16>
 800a982:	e000      	b.n	800a986 <prvUnlockQueue+0x46>
					break;
 800a984:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a98e:	f001 fcf1 	bl	800c374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a992:	f001 fcbf 	bl	800c314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a99e:	e011      	b.n	800a9c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d012      	beq.n	800a9ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3310      	adds	r3, #16
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fd69 	bl	800b484 <xTaskRemoveFromEventList>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9b8:	f000 fe3e 	bl	800b638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dce9      	bgt.n	800a9a0 <prvUnlockQueue+0x60>
 800a9cc:	e000      	b.n	800a9d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	22ff      	movs	r2, #255	; 0xff
 800a9d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9d8:	f001 fccc 	bl	800c374 <vPortExitCritical>
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9ec:	f001 fc92 	bl	800c314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	e001      	b.n	800aa02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa02:	f001 fcb7 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800aa06:	68fb      	ldr	r3, [r7, #12]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa18:	f001 fc7c 	bl	800c314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d102      	bne.n	800aa2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e001      	b.n	800aa32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa32:	f001 fc9f 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800aa36:	68fb      	ldr	r3, [r7, #12]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
 800aa4e:	e014      	b.n	800aa7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa50:	4a0f      	ldr	r2, [pc, #60]	; (800aa90 <vQueueAddToRegistry+0x50>)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10b      	bne.n	800aa74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa5c:	490c      	ldr	r1, [pc, #48]	; (800aa90 <vQueueAddToRegistry+0x50>)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa66:	4a0a      	ldr	r2, [pc, #40]	; (800aa90 <vQueueAddToRegistry+0x50>)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	4413      	add	r3, r2
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa72:	e006      	b.n	800aa82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2b07      	cmp	r3, #7
 800aa7e:	d9e7      	bls.n	800aa50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	200022cc 	.word	0x200022cc

0800aa94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aaa4:	f001 fc36 	bl	800c314 <vPortEnterCritical>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaae:	b25b      	sxtb	r3, r3
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab4:	d103      	bne.n	800aabe <vQueueWaitForMessageRestricted+0x2a>
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aac4:	b25b      	sxtb	r3, r3
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaca:	d103      	bne.n	800aad4 <vQueueWaitForMessageRestricted+0x40>
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aad4:	f001 fc4e 	bl	800c374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	3324      	adds	r3, #36	; 0x24
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fc9f 	bl	800b42c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaee:	6978      	ldr	r0, [r7, #20]
 800aaf0:	f7ff ff26 	bl	800a940 <prvUnlockQueue>
	}
 800aaf4:	bf00      	nop
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08e      	sub	sp, #56	; 0x38
 800ab00:	af04      	add	r7, sp, #16
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	623b      	str	r3, [r7, #32]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xTaskCreateStatic+0x46>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	61fb      	str	r3, [r7, #28]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab42:	23b8      	movs	r3, #184	; 0xb8
 800ab44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2bb8      	cmp	r3, #184	; 0xb8
 800ab4a:	d00a      	beq.n	800ab62 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	61bb      	str	r3, [r7, #24]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d01e      	beq.n	800aba8 <xTaskCreateStatic+0xac>
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01b      	beq.n	800aba8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab82:	2300      	movs	r3, #0
 800ab84:	9303      	str	r3, [sp, #12]
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	9302      	str	r3, [sp, #8]
 800ab8a:	f107 0314 	add.w	r3, r7, #20
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f850 	bl	800ac40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aba2:	f000 f8fd 	bl	800ada0 <prvAddNewTaskToReadyList>
 800aba6:	e001      	b.n	800abac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abac:	697b      	ldr	r3, [r7, #20]
	}
 800abae:	4618      	mov	r0, r3
 800abb0:	3728      	adds	r7, #40	; 0x28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b08c      	sub	sp, #48	; 0x30
 800abba:	af04      	add	r7, sp, #16
 800abbc:	60f8      	str	r0, [r7, #12]
 800abbe:	60b9      	str	r1, [r7, #8]
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	4613      	mov	r3, r2
 800abc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abc6:	88fb      	ldrh	r3, [r7, #6]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fcc4 	bl	800c558 <pvPortMalloc>
 800abd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00e      	beq.n	800abf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abd8:	20b8      	movs	r0, #184	; 0xb8
 800abda:	f001 fcbd 	bl	800c558 <pvPortMalloc>
 800abde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	631a      	str	r2, [r3, #48]	; 0x30
 800abec:	e005      	b.n	800abfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abee:	6978      	ldr	r0, [r7, #20]
 800abf0:	f001 fd7e 	bl	800c6f0 <vPortFree>
 800abf4:	e001      	b.n	800abfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d017      	beq.n	800ac30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac08:	88fa      	ldrh	r2, [r7, #6]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	9302      	str	r3, [sp, #8]
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 f80e 	bl	800ac40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac24:	69f8      	ldr	r0, [r7, #28]
 800ac26:	f000 f8bb 	bl	800ada0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	61bb      	str	r3, [r7, #24]
 800ac2e:	e002      	b.n	800ac36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac36:	69bb      	ldr	r3, [r7, #24]
	}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3720      	adds	r7, #32
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	461a      	mov	r2, r3
 800ac58:	21a5      	movs	r1, #165	; 0xa5
 800ac5a:	f002 fb51 	bl	800d300 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	f023 0307 	bic.w	r3, r3, #7
 800ac76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	617b      	str	r3, [r7, #20]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01f      	beq.n	800ace4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
 800aca8:	e012      	b.n	800acd0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	4413      	add	r3, r2
 800acb0:	7819      	ldrb	r1, [r3, #0]
 800acb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	4413      	add	r3, r2
 800acb8:	3334      	adds	r3, #52	; 0x34
 800acba:	460a      	mov	r2, r1
 800acbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	4413      	add	r3, r2
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d006      	beq.n	800acd8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	3301      	adds	r3, #1
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b0f      	cmp	r3, #15
 800acd4:	d9e9      	bls.n	800acaa <prvInitialiseNewTask+0x6a>
 800acd6:	e000      	b.n	800acda <prvInitialiseNewTask+0x9a>
			{
				break;
 800acd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ace2:	e003      	b.n	800acec <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	2b13      	cmp	r3, #19
 800acf0:	d901      	bls.n	800acf6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acf2:	2313      	movs	r3, #19
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad00:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2200      	movs	r2, #0
 800ad06:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff f974 	bl	8009ffa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	3318      	adds	r3, #24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff f96f 	bl	8009ffa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	f1c3 0214 	rsb	r2, r3, #20
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	2200      	movs	r2, #0
 800ad36:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	3360      	adds	r3, #96	; 0x60
 800ad52:	224c      	movs	r2, #76	; 0x4c
 800ad54:	2100      	movs	r1, #0
 800ad56:	4618      	mov	r0, r3
 800ad58:	f002 fad2 	bl	800d300 <memset>
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	4a0d      	ldr	r2, [pc, #52]	; (800ad94 <prvInitialiseNewTask+0x154>)
 800ad60:	665a      	str	r2, [r3, #100]	; 0x64
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <prvInitialiseNewTask+0x158>)
 800ad66:	669a      	str	r2, [r3, #104]	; 0x68
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	4a0c      	ldr	r2, [pc, #48]	; (800ad9c <prvInitialiseNewTask+0x15c>)
 800ad6c:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	68f9      	ldr	r1, [r7, #12]
 800ad72:	69b8      	ldr	r0, [r7, #24]
 800ad74:	f001 f9a0 	bl	800c0b8 <pxPortInitialiseStack>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <prvInitialiseNewTask+0x14a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad8a:	bf00      	nop
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20007f1c 	.word	0x20007f1c
 800ad98:	20007f84 	.word	0x20007f84
 800ad9c:	20007fec 	.word	0x20007fec

0800ada0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ada8:	f001 fab4 	bl	800c314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800adac:	4b2c      	ldr	r3, [pc, #176]	; (800ae60 <prvAddNewTaskToReadyList+0xc0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	4a2b      	ldr	r2, [pc, #172]	; (800ae60 <prvAddNewTaskToReadyList+0xc0>)
 800adb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800adb6:	4b2b      	ldr	r3, [pc, #172]	; (800ae64 <prvAddNewTaskToReadyList+0xc4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d109      	bne.n	800add2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adbe:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <prvAddNewTaskToReadyList+0xc4>)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adc4:	4b26      	ldr	r3, [pc, #152]	; (800ae60 <prvAddNewTaskToReadyList+0xc0>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d110      	bne.n	800adee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800adcc:	f000 fc5a 	bl	800b684 <prvInitialiseTaskLists>
 800add0:	e00d      	b.n	800adee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800add2:	4b25      	ldr	r3, [pc, #148]	; (800ae68 <prvAddNewTaskToReadyList+0xc8>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adda:	4b22      	ldr	r3, [pc, #136]	; (800ae64 <prvAddNewTaskToReadyList+0xc4>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d802      	bhi.n	800adee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ade8:	4a1e      	ldr	r2, [pc, #120]	; (800ae64 <prvAddNewTaskToReadyList+0xc4>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adee:	4b1f      	ldr	r3, [pc, #124]	; (800ae6c <prvAddNewTaskToReadyList+0xcc>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	4a1d      	ldr	r2, [pc, #116]	; (800ae6c <prvAddNewTaskToReadyList+0xcc>)
 800adf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adf8:	4b1c      	ldr	r3, [pc, #112]	; (800ae6c <prvAddNewTaskToReadyList+0xcc>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae04:	2201      	movs	r2, #1
 800ae06:	409a      	lsls	r2, r3
 800ae08:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <prvAddNewTaskToReadyList+0xd0>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	4a18      	ldr	r2, [pc, #96]	; (800ae70 <prvAddNewTaskToReadyList+0xd0>)
 800ae10:	6013      	str	r3, [r2, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4a15      	ldr	r2, [pc, #84]	; (800ae74 <prvAddNewTaskToReadyList+0xd4>)
 800ae20:	441a      	add	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4619      	mov	r1, r3
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f7ff f8f3 	bl	800a014 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae2e:	f001 faa1 	bl	800c374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae32:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <prvAddNewTaskToReadyList+0xc8>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00e      	beq.n	800ae58 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <prvAddNewTaskToReadyList+0xc4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d207      	bcs.n	800ae58 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae48:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <prvAddNewTaskToReadyList+0xd8>)
 800ae4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20002514 	.word	0x20002514
 800ae64:	2000230c 	.word	0x2000230c
 800ae68:	20002520 	.word	0x20002520
 800ae6c:	20002530 	.word	0x20002530
 800ae70:	2000251c 	.word	0x2000251c
 800ae74:	20002310 	.word	0x20002310
 800ae78:	e000ed04 	.word	0xe000ed04

0800ae7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d017      	beq.n	800aebe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <vTaskDelay+0x60>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00a      	beq.n	800aeac <vTaskDelay+0x30>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	60bb      	str	r3, [r7, #8]
}
 800aea8:	bf00      	nop
 800aeaa:	e7fe      	b.n	800aeaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aeac:	f000 f88c 	bl	800afc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fd4c 	bl	800b950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aeb8:	f000 f894 	bl	800afe4 <xTaskResumeAll>
 800aebc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d107      	bne.n	800aed4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <vTaskDelay+0x64>)
 800aec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	2000253c 	.word	0x2000253c
 800aee0:	e000ed04 	.word	0xe000ed04

0800aee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08a      	sub	sp, #40	; 0x28
 800aee8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aef2:	463a      	mov	r2, r7
 800aef4:	1d39      	adds	r1, r7, #4
 800aef6:	f107 0308 	add.w	r3, r7, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f6 fba6 	bl	800164c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	9202      	str	r2, [sp, #8]
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	2300      	movs	r3, #0
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	2300      	movs	r3, #0
 800af10:	460a      	mov	r2, r1
 800af12:	4925      	ldr	r1, [pc, #148]	; (800afa8 <vTaskStartScheduler+0xc4>)
 800af14:	4825      	ldr	r0, [pc, #148]	; (800afac <vTaskStartScheduler+0xc8>)
 800af16:	f7ff fdf1 	bl	800aafc <xTaskCreateStatic>
 800af1a:	4603      	mov	r3, r0
 800af1c:	4a24      	ldr	r2, [pc, #144]	; (800afb0 <vTaskStartScheduler+0xcc>)
 800af1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af20:	4b23      	ldr	r3, [pc, #140]	; (800afb0 <vTaskStartScheduler+0xcc>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af28:	2301      	movs	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	e001      	b.n	800af32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af2e:	2300      	movs	r3, #0
 800af30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d102      	bne.n	800af3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af38:	f000 fd70 	bl	800ba1c <xTimerCreateTimerTask>
 800af3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d11d      	bne.n	800af80 <vTaskStartScheduler+0x9c>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	613b      	str	r3, [r7, #16]
}
 800af56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af58:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <vTaskStartScheduler+0xd0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3360      	adds	r3, #96	; 0x60
 800af5e:	4a16      	ldr	r2, [pc, #88]	; (800afb8 <vTaskStartScheduler+0xd4>)
 800af60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af62:	4b16      	ldr	r3, [pc, #88]	; (800afbc <vTaskStartScheduler+0xd8>)
 800af64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af6a:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <vTaskStartScheduler+0xdc>)
 800af6c:	2201      	movs	r2, #1
 800af6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af70:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <vTaskStartScheduler+0xe0>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800af76:	f7f6 fb47 	bl	8001608 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af7a:	f001 f929 	bl	800c1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af7e:	e00e      	b.n	800af9e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af86:	d10a      	bne.n	800af9e <vTaskStartScheduler+0xba>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	60fb      	str	r3, [r7, #12]
}
 800af9a:	bf00      	nop
 800af9c:	e7fe      	b.n	800af9c <vTaskStartScheduler+0xb8>
}
 800af9e:	bf00      	nop
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	0800dc30 	.word	0x0800dc30
 800afac:	0800b651 	.word	0x0800b651
 800afb0:	20002538 	.word	0x20002538
 800afb4:	2000230c 	.word	0x2000230c
 800afb8:	200003c0 	.word	0x200003c0
 800afbc:	20002534 	.word	0x20002534
 800afc0:	20002520 	.word	0x20002520
 800afc4:	20002518 	.word	0x20002518

0800afc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800afcc:	4b04      	ldr	r3, [pc, #16]	; (800afe0 <vTaskSuspendAll+0x18>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3301      	adds	r3, #1
 800afd2:	4a03      	ldr	r2, [pc, #12]	; (800afe0 <vTaskSuspendAll+0x18>)
 800afd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800afd6:	bf00      	nop
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	2000253c 	.word	0x2000253c

0800afe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afee:	2300      	movs	r3, #0
 800aff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aff2:	4b41      	ldr	r3, [pc, #260]	; (800b0f8 <xTaskResumeAll+0x114>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10a      	bne.n	800b010 <xTaskResumeAll+0x2c>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	603b      	str	r3, [r7, #0]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b010:	f001 f980 	bl	800c314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b014:	4b38      	ldr	r3, [pc, #224]	; (800b0f8 <xTaskResumeAll+0x114>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3b01      	subs	r3, #1
 800b01a:	4a37      	ldr	r2, [pc, #220]	; (800b0f8 <xTaskResumeAll+0x114>)
 800b01c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b01e:	4b36      	ldr	r3, [pc, #216]	; (800b0f8 <xTaskResumeAll+0x114>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d161      	bne.n	800b0ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b026:	4b35      	ldr	r3, [pc, #212]	; (800b0fc <xTaskResumeAll+0x118>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d05d      	beq.n	800b0ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b02e:	e02e      	b.n	800b08e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b030:	4b33      	ldr	r3, [pc, #204]	; (800b100 <xTaskResumeAll+0x11c>)
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3318      	adds	r3, #24
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f846 	bl	800a0ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3304      	adds	r3, #4
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff f841 	bl	800a0ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	2201      	movs	r2, #1
 800b052:	409a      	lsls	r2, r3
 800b054:	4b2b      	ldr	r3, [pc, #172]	; (800b104 <xTaskResumeAll+0x120>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4313      	orrs	r3, r2
 800b05a:	4a2a      	ldr	r2, [pc, #168]	; (800b104 <xTaskResumeAll+0x120>)
 800b05c:	6013      	str	r3, [r2, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4a27      	ldr	r2, [pc, #156]	; (800b108 <xTaskResumeAll+0x124>)
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3304      	adds	r3, #4
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7fe ffcd 	bl	800a014 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07e:	4b23      	ldr	r3, [pc, #140]	; (800b10c <xTaskResumeAll+0x128>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	429a      	cmp	r2, r3
 800b086:	d302      	bcc.n	800b08e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <xTaskResumeAll+0x12c>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b08e:	4b1c      	ldr	r3, [pc, #112]	; (800b100 <xTaskResumeAll+0x11c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1cc      	bne.n	800b030 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b09c:	f000 fb94 	bl	800b7c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0a0:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <xTaskResumeAll+0x130>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ac:	f000 f846 	bl	800b13c <xTaskIncrementTick>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b0b6:	4b16      	ldr	r3, [pc, #88]	; (800b110 <xTaskResumeAll+0x12c>)
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1f1      	bne.n	800b0ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b0c8:	4b12      	ldr	r3, [pc, #72]	; (800b114 <xTaskResumeAll+0x130>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0ce:	4b10      	ldr	r3, [pc, #64]	; (800b110 <xTaskResumeAll+0x12c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0da:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <xTaskResumeAll+0x134>)
 800b0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0ea:	f001 f943 	bl	800c374 <vPortExitCritical>

	return xAlreadyYielded;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	2000253c 	.word	0x2000253c
 800b0fc:	20002514 	.word	0x20002514
 800b100:	200024d0 	.word	0x200024d0
 800b104:	2000251c 	.word	0x2000251c
 800b108:	20002310 	.word	0x20002310
 800b10c:	2000230c 	.word	0x2000230c
 800b110:	20002528 	.word	0x20002528
 800b114:	20002524 	.word	0x20002524
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <xTaskGetTickCount+0x1c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b128:	687b      	ldr	r3, [r7, #4]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	20002518 	.word	0x20002518

0800b13c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b146:	4b4e      	ldr	r3, [pc, #312]	; (800b280 <xTaskIncrementTick+0x144>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 808e 	bne.w	800b26c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b150:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <xTaskIncrementTick+0x148>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b158:	4a4a      	ldr	r2, [pc, #296]	; (800b284 <xTaskIncrementTick+0x148>)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d120      	bne.n	800b1a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b164:	4b48      	ldr	r3, [pc, #288]	; (800b288 <xTaskIncrementTick+0x14c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <xTaskIncrementTick+0x48>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	603b      	str	r3, [r7, #0]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <xTaskIncrementTick+0x46>
 800b184:	4b40      	ldr	r3, [pc, #256]	; (800b288 <xTaskIncrementTick+0x14c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	4b40      	ldr	r3, [pc, #256]	; (800b28c <xTaskIncrementTick+0x150>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a3e      	ldr	r2, [pc, #248]	; (800b288 <xTaskIncrementTick+0x14c>)
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	4a3e      	ldr	r2, [pc, #248]	; (800b28c <xTaskIncrementTick+0x150>)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	4b3d      	ldr	r3, [pc, #244]	; (800b290 <xTaskIncrementTick+0x154>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3301      	adds	r3, #1
 800b19e:	4a3c      	ldr	r2, [pc, #240]	; (800b290 <xTaskIncrementTick+0x154>)
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	f000 fb11 	bl	800b7c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1a6:	4b3b      	ldr	r3, [pc, #236]	; (800b294 <xTaskIncrementTick+0x158>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d348      	bcc.n	800b242 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b0:	4b35      	ldr	r3, [pc, #212]	; (800b288 <xTaskIncrementTick+0x14c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d104      	bne.n	800b1c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ba:	4b36      	ldr	r3, [pc, #216]	; (800b294 <xTaskIncrementTick+0x158>)
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1c0:	601a      	str	r2, [r3, #0]
					break;
 800b1c2:	e03e      	b.n	800b242 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c4:	4b30      	ldr	r3, [pc, #192]	; (800b288 <xTaskIncrementTick+0x14c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d203      	bcs.n	800b1e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1dc:	4a2d      	ldr	r2, [pc, #180]	; (800b294 <xTaskIncrementTick+0x158>)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1e2:	e02e      	b.n	800b242 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fe ff70 	bl	800a0ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d004      	beq.n	800b200 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	3318      	adds	r3, #24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe ff67 	bl	800a0ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	2201      	movs	r2, #1
 800b206:	409a      	lsls	r2, r3
 800b208:	4b23      	ldr	r3, [pc, #140]	; (800b298 <xTaskIncrementTick+0x15c>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	4a22      	ldr	r2, [pc, #136]	; (800b298 <xTaskIncrementTick+0x15c>)
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4a1f      	ldr	r2, [pc, #124]	; (800b29c <xTaskIncrementTick+0x160>)
 800b220:	441a      	add	r2, r3
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	3304      	adds	r3, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7fe fef3 	bl	800a014 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b232:	4b1b      	ldr	r3, [pc, #108]	; (800b2a0 <xTaskIncrementTick+0x164>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	429a      	cmp	r2, r3
 800b23a:	d3b9      	bcc.n	800b1b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b23c:	2301      	movs	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b240:	e7b6      	b.n	800b1b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b242:	4b17      	ldr	r3, [pc, #92]	; (800b2a0 <xTaskIncrementTick+0x164>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4914      	ldr	r1, [pc, #80]	; (800b29c <xTaskIncrementTick+0x160>)
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	440b      	add	r3, r1
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b01      	cmp	r3, #1
 800b258:	d901      	bls.n	800b25e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b25a:	2301      	movs	r3, #1
 800b25c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <xTaskIncrementTick+0x168>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d007      	beq.n	800b276 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b266:	2301      	movs	r3, #1
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	e004      	b.n	800b276 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b26c:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <xTaskIncrementTick+0x16c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	4a0d      	ldr	r2, [pc, #52]	; (800b2a8 <xTaskIncrementTick+0x16c>)
 800b274:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b276:	697b      	ldr	r3, [r7, #20]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	2000253c 	.word	0x2000253c
 800b284:	20002518 	.word	0x20002518
 800b288:	200024c8 	.word	0x200024c8
 800b28c:	200024cc 	.word	0x200024cc
 800b290:	2000252c 	.word	0x2000252c
 800b294:	20002534 	.word	0x20002534
 800b298:	2000251c 	.word	0x2000251c
 800b29c:	20002310 	.word	0x20002310
 800b2a0:	2000230c 	.word	0x2000230c
 800b2a4:	20002528 	.word	0x20002528
 800b2a8:	20002524 	.word	0x20002524

0800b2ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2b2:	4b43      	ldr	r3, [pc, #268]	; (800b3c0 <vTaskSwitchContext+0x114>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2ba:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <vTaskSwitchContext+0x118>)
 800b2bc:	2201      	movs	r2, #1
 800b2be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2c0:	e07a      	b.n	800b3b8 <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800b2c2:	4b40      	ldr	r3, [pc, #256]	; (800b3c4 <vTaskSwitchContext+0x118>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b2c8:	f7f6 f9a5 	bl	8001616 <getRunTimeCounterValue>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	4a3e      	ldr	r2, [pc, #248]	; (800b3c8 <vTaskSwitchContext+0x11c>)
 800b2d0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b2d2:	4b3d      	ldr	r3, [pc, #244]	; (800b3c8 <vTaskSwitchContext+0x11c>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b3d      	ldr	r3, [pc, #244]	; (800b3cc <vTaskSwitchContext+0x120>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d909      	bls.n	800b2f2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b2de:	4b3c      	ldr	r3, [pc, #240]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b2e4:	4a38      	ldr	r2, [pc, #224]	; (800b3c8 <vTaskSwitchContext+0x11c>)
 800b2e6:	6810      	ldr	r0, [r2, #0]
 800b2e8:	4a38      	ldr	r2, [pc, #224]	; (800b3cc <vTaskSwitchContext+0x120>)
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	1a82      	subs	r2, r0, r2
 800b2ee:	440a      	add	r2, r1
 800b2f0:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b2f2:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <vTaskSwitchContext+0x11c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a35      	ldr	r2, [pc, #212]	; (800b3cc <vTaskSwitchContext+0x120>)
 800b2f8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b2fa:	4b35      	ldr	r3, [pc, #212]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4b33      	ldr	r3, [pc, #204]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b306:	429a      	cmp	r2, r3
 800b308:	d808      	bhi.n	800b31c <vTaskSwitchContext+0x70>
 800b30a:	4b31      	ldr	r3, [pc, #196]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4b30      	ldr	r3, [pc, #192]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3334      	adds	r3, #52	; 0x34
 800b314:	4619      	mov	r1, r3
 800b316:	4610      	mov	r0, r2
 800b318:	f7f6 f98c 	bl	8001634 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800b31c:	4b2c      	ldr	r3, [pc, #176]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a2c      	ldr	r2, [pc, #176]	; (800b3d4 <vTaskSwitchContext+0x128>)
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b328:	4b2b      	ldr	r3, [pc, #172]	; (800b3d8 <vTaskSwitchContext+0x12c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	fab3 f383 	clz	r3, r3
 800b334:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b336:	7afb      	ldrb	r3, [r7, #11]
 800b338:	f1c3 031f 	rsb	r3, r3, #31
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	4927      	ldr	r1, [pc, #156]	; (800b3dc <vTaskSwitchContext+0x130>)
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10a      	bne.n	800b368 <vTaskSwitchContext+0xbc>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	607b      	str	r3, [r7, #4]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <vTaskSwitchContext+0xba>
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4a1a      	ldr	r2, [pc, #104]	; (800b3dc <vTaskSwitchContext+0x130>)
 800b374:	4413      	add	r3, r2
 800b376:	613b      	str	r3, [r7, #16]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	605a      	str	r2, [r3, #4]
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	3308      	adds	r3, #8
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d104      	bne.n	800b398 <vTaskSwitchContext+0xec>
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	605a      	str	r2, [r3, #4]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	4a0c      	ldr	r2, [pc, #48]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b3a0:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3aa:	4a0a      	ldr	r2, [pc, #40]	; (800b3d4 <vTaskSwitchContext+0x128>)
 800b3ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3ae:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <vTaskSwitchContext+0x124>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3360      	adds	r3, #96	; 0x60
 800b3b4:	4a0a      	ldr	r2, [pc, #40]	; (800b3e0 <vTaskSwitchContext+0x134>)
 800b3b6:	6013      	str	r3, [r2, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	2000253c 	.word	0x2000253c
 800b3c4:	20002528 	.word	0x20002528
 800b3c8:	20002544 	.word	0x20002544
 800b3cc:	20002540 	.word	0x20002540
 800b3d0:	2000230c 	.word	0x2000230c
 800b3d4:	20002510 	.word	0x20002510
 800b3d8:	2000251c 	.word	0x2000251c
 800b3dc:	20002310 	.word	0x20002310
 800b3e0:	200003c0 	.word	0x200003c0

0800b3e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	60fb      	str	r3, [r7, #12]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b40a:	4b07      	ldr	r3, [pc, #28]	; (800b428 <vTaskPlaceOnEventList+0x44>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3318      	adds	r3, #24
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7fe fe22 	bl	800a05c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b418:	2101      	movs	r1, #1
 800b41a:	6838      	ldr	r0, [r7, #0]
 800b41c:	f000 fa98 	bl	800b950 <prvAddCurrentTaskToDelayedList>
}
 800b420:	bf00      	nop
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	2000230c 	.word	0x2000230c

0800b42c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10a      	bne.n	800b454 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	617b      	str	r3, [r7, #20]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <vTaskPlaceOnEventListRestricted+0x54>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3318      	adds	r3, #24
 800b45a:	4619      	mov	r1, r3
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7fe fdd9 	bl	800a014 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b46c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f000 fa6d 	bl	800b950 <prvAddCurrentTaskToDelayedList>
	}
 800b476:	bf00      	nop
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	2000230c 	.word	0x2000230c

0800b484 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	60fb      	str	r3, [r7, #12]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	3318      	adds	r3, #24
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fe0a 	bl	800a0ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	; (800b530 <xTaskRemoveFromEventList+0xac>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d11c      	bne.n	800b4fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fe01 	bl	800a0ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	409a      	lsls	r2, r3
 800b4d4:	4b17      	ldr	r3, [pc, #92]	; (800b534 <xTaskRemoveFromEventList+0xb0>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	4a16      	ldr	r2, [pc, #88]	; (800b534 <xTaskRemoveFromEventList+0xb0>)
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4a13      	ldr	r2, [pc, #76]	; (800b538 <xTaskRemoveFromEventList+0xb4>)
 800b4ec:	441a      	add	r2, r3
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7fe fd8d 	bl	800a014 <vListInsertEnd>
 800b4fa:	e005      	b.n	800b508 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	3318      	adds	r3, #24
 800b500:	4619      	mov	r1, r3
 800b502:	480e      	ldr	r0, [pc, #56]	; (800b53c <xTaskRemoveFromEventList+0xb8>)
 800b504:	f7fe fd86 	bl	800a014 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <xTaskRemoveFromEventList+0xbc>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b512:	429a      	cmp	r2, r3
 800b514:	d905      	bls.n	800b522 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b516:	2301      	movs	r3, #1
 800b518:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <xTaskRemoveFromEventList+0xc0>)
 800b51c:	2201      	movs	r2, #1
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	e001      	b.n	800b526 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b526:	697b      	ldr	r3, [r7, #20]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	2000253c 	.word	0x2000253c
 800b534:	2000251c 	.word	0x2000251c
 800b538:	20002310 	.word	0x20002310
 800b53c:	200024d0 	.word	0x200024d0
 800b540:	2000230c 	.word	0x2000230c
 800b544:	20002528 	.word	0x20002528

0800b548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <vTaskInternalSetTimeOutState+0x24>)
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b558:	4b05      	ldr	r3, [pc, #20]	; (800b570 <vTaskInternalSetTimeOutState+0x28>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	605a      	str	r2, [r3, #4]
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	2000252c 	.word	0x2000252c
 800b570:	20002518 	.word	0x20002518

0800b574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	613b      	str	r3, [r7, #16]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	60fb      	str	r3, [r7, #12]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5b6:	f000 fead 	bl	800c314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ba:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <xTaskCheckForTimeOut+0xbc>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d2:	d102      	bne.n	800b5da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61fb      	str	r3, [r7, #28]
 800b5d8:	e023      	b.n	800b622 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	4b15      	ldr	r3, [pc, #84]	; (800b634 <xTaskCheckForTimeOut+0xc0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d007      	beq.n	800b5f6 <xTaskCheckForTimeOut+0x82>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d302      	bcc.n	800b5f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	61fb      	str	r3, [r7, #28]
 800b5f4:	e015      	b.n	800b622 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d20b      	bcs.n	800b618 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	1ad2      	subs	r2, r2, r3
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff ff9b 	bl	800b548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b612:	2300      	movs	r3, #0
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	e004      	b.n	800b622 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b61e:	2301      	movs	r3, #1
 800b620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b622:	f000 fea7 	bl	800c374 <vPortExitCritical>

	return xReturn;
 800b626:	69fb      	ldr	r3, [r7, #28]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3720      	adds	r7, #32
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	20002518 	.word	0x20002518
 800b634:	2000252c 	.word	0x2000252c

0800b638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b638:	b480      	push	{r7}
 800b63a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b63c:	4b03      	ldr	r3, [pc, #12]	; (800b64c <vTaskMissedYield+0x14>)
 800b63e:	2201      	movs	r2, #1
 800b640:	601a      	str	r2, [r3, #0]
}
 800b642:	bf00      	nop
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	20002528 	.word	0x20002528

0800b650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b658:	f000 f854 	bl	800b704 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <prvIdleTask+0x2c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d907      	bls.n	800b674 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b664:	4b06      	ldr	r3, [pc, #24]	; (800b680 <prvIdleTask+0x30>)
 800b666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b674:	f7f5 ffd7 	bl	8001626 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b678:	e7ee      	b.n	800b658 <prvIdleTask+0x8>
 800b67a:	bf00      	nop
 800b67c:	20002310 	.word	0x20002310
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b68a:	2300      	movs	r3, #0
 800b68c:	607b      	str	r3, [r7, #4]
 800b68e:	e00c      	b.n	800b6aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4a12      	ldr	r2, [pc, #72]	; (800b6e4 <prvInitialiseTaskLists+0x60>)
 800b69c:	4413      	add	r3, r2
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fc8b 	bl	8009fba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	607b      	str	r3, [r7, #4]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b13      	cmp	r3, #19
 800b6ae:	d9ef      	bls.n	800b690 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6b0:	480d      	ldr	r0, [pc, #52]	; (800b6e8 <prvInitialiseTaskLists+0x64>)
 800b6b2:	f7fe fc82 	bl	8009fba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6b6:	480d      	ldr	r0, [pc, #52]	; (800b6ec <prvInitialiseTaskLists+0x68>)
 800b6b8:	f7fe fc7f 	bl	8009fba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6bc:	480c      	ldr	r0, [pc, #48]	; (800b6f0 <prvInitialiseTaskLists+0x6c>)
 800b6be:	f7fe fc7c 	bl	8009fba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6c2:	480c      	ldr	r0, [pc, #48]	; (800b6f4 <prvInitialiseTaskLists+0x70>)
 800b6c4:	f7fe fc79 	bl	8009fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6c8:	480b      	ldr	r0, [pc, #44]	; (800b6f8 <prvInitialiseTaskLists+0x74>)
 800b6ca:	f7fe fc76 	bl	8009fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <prvInitialiseTaskLists+0x78>)
 800b6d0:	4a05      	ldr	r2, [pc, #20]	; (800b6e8 <prvInitialiseTaskLists+0x64>)
 800b6d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6d4:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <prvInitialiseTaskLists+0x7c>)
 800b6d6:	4a05      	ldr	r2, [pc, #20]	; (800b6ec <prvInitialiseTaskLists+0x68>)
 800b6d8:	601a      	str	r2, [r3, #0]
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20002310 	.word	0x20002310
 800b6e8:	200024a0 	.word	0x200024a0
 800b6ec:	200024b4 	.word	0x200024b4
 800b6f0:	200024d0 	.word	0x200024d0
 800b6f4:	200024e4 	.word	0x200024e4
 800b6f8:	200024fc 	.word	0x200024fc
 800b6fc:	200024c8 	.word	0x200024c8
 800b700:	200024cc 	.word	0x200024cc

0800b704 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b70a:	e019      	b.n	800b740 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b70c:	f000 fe02 	bl	800c314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b710:	4b10      	ldr	r3, [pc, #64]	; (800b754 <prvCheckTasksWaitingTermination+0x50>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3304      	adds	r3, #4
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fcd6 	bl	800a0ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b722:	4b0d      	ldr	r3, [pc, #52]	; (800b758 <prvCheckTasksWaitingTermination+0x54>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3b01      	subs	r3, #1
 800b728:	4a0b      	ldr	r2, [pc, #44]	; (800b758 <prvCheckTasksWaitingTermination+0x54>)
 800b72a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b72c:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <prvCheckTasksWaitingTermination+0x58>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3b01      	subs	r3, #1
 800b732:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <prvCheckTasksWaitingTermination+0x58>)
 800b734:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b736:	f000 fe1d 	bl	800c374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f810 	bl	800b760 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b740:	4b06      	ldr	r3, [pc, #24]	; (800b75c <prvCheckTasksWaitingTermination+0x58>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e1      	bne.n	800b70c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	200024e4 	.word	0x200024e4
 800b758:	20002514 	.word	0x20002514
 800b75c:	200024f8 	.word	0x200024f8

0800b760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3360      	adds	r3, #96	; 0x60
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 fde3 	bl	800d338 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d108      	bne.n	800b78e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b780:	4618      	mov	r0, r3
 800b782:	f000 ffb5 	bl	800c6f0 <vPortFree>
				vPortFree( pxTCB );
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 ffb2 	bl	800c6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b78c:	e018      	b.n	800b7c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b794:	2b01      	cmp	r3, #1
 800b796:	d103      	bne.n	800b7a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 ffa9 	bl	800c6f0 <vPortFree>
	}
 800b79e:	e00f      	b.n	800b7c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d00a      	beq.n	800b7c0 <prvDeleteTCB+0x60>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60fb      	str	r3, [r7, #12]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <prvDeleteTCB+0x5e>
	}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <prvResetNextTaskUnblockTime+0x38>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d104      	bne.n	800b7e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7d8:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <prvResetNextTaskUnblockTime+0x3c>)
 800b7da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7e0:	e008      	b.n	800b7f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <prvResetNextTaskUnblockTime+0x38>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	4a04      	ldr	r2, [pc, #16]	; (800b804 <prvResetNextTaskUnblockTime+0x3c>)
 800b7f2:	6013      	str	r3, [r2, #0]
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	200024c8 	.word	0x200024c8
 800b804:	20002534 	.word	0x20002534

0800b808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b80e:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <xTaskGetSchedulerState+0x34>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d102      	bne.n	800b81c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b816:	2301      	movs	r3, #1
 800b818:	607b      	str	r3, [r7, #4]
 800b81a:	e008      	b.n	800b82e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81c:	4b08      	ldr	r3, [pc, #32]	; (800b840 <xTaskGetSchedulerState+0x38>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b824:	2302      	movs	r3, #2
 800b826:	607b      	str	r3, [r7, #4]
 800b828:	e001      	b.n	800b82e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b82a:	2300      	movs	r3, #0
 800b82c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b82e:	687b      	ldr	r3, [r7, #4]
	}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20002520 	.word	0x20002520
 800b840:	2000253c 	.word	0x2000253c

0800b844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b850:	2300      	movs	r3, #0
 800b852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d06e      	beq.n	800b938 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b85a:	4b3a      	ldr	r3, [pc, #232]	; (800b944 <xTaskPriorityDisinherit+0x100>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	429a      	cmp	r2, r3
 800b862:	d00a      	beq.n	800b87a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	60fb      	str	r3, [r7, #12]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10a      	bne.n	800b898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	60bb      	str	r3, [r7, #8]
}
 800b894:	bf00      	nop
 800b896:	e7fe      	b.n	800b896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89c:	1e5a      	subs	r2, r3, #1
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d044      	beq.n	800b938 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d140      	bne.n	800b938 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fc07 	bl	800a0ce <uxListRemove>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d115      	bne.n	800b8f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	491f      	ldr	r1, [pc, #124]	; (800b948 <xTaskPriorityDisinherit+0x104>)
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	440b      	add	r3, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <xTaskPriorityDisinherit+0xae>
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e6:	43da      	mvns	r2, r3
 800b8e8:	4b18      	ldr	r3, [pc, #96]	; (800b94c <xTaskPriorityDisinherit+0x108>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	4a17      	ldr	r2, [pc, #92]	; (800b94c <xTaskPriorityDisinherit+0x108>)
 800b8f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	f1c3 0214 	rsb	r2, r3, #20
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	2201      	movs	r2, #1
 800b90c:	409a      	lsls	r2, r3
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <xTaskPriorityDisinherit+0x108>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4313      	orrs	r3, r2
 800b914:	4a0d      	ldr	r2, [pc, #52]	; (800b94c <xTaskPriorityDisinherit+0x108>)
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4a08      	ldr	r2, [pc, #32]	; (800b948 <xTaskPriorityDisinherit+0x104>)
 800b926:	441a      	add	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3304      	adds	r3, #4
 800b92c:	4619      	mov	r1, r3
 800b92e:	4610      	mov	r0, r2
 800b930:	f7fe fb70 	bl	800a014 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b934:	2301      	movs	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b938:	697b      	ldr	r3, [r7, #20]
	}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	2000230c 	.word	0x2000230c
 800b948:	20002310 	.word	0x20002310
 800b94c:	2000251c 	.word	0x2000251c

0800b950 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b95a:	4b29      	ldr	r3, [pc, #164]	; (800ba00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3304      	adds	r3, #4
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fbb1 	bl	800a0ce <uxListRemove>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10b      	bne.n	800b98a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b972:	4b24      	ldr	r3, [pc, #144]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	2201      	movs	r2, #1
 800b97a:	fa02 f303 	lsl.w	r3, r2, r3
 800b97e:	43da      	mvns	r2, r3
 800b980:	4b21      	ldr	r3, [pc, #132]	; (800ba08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4013      	ands	r3, r2
 800b986:	4a20      	ldr	r2, [pc, #128]	; (800ba08 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b988:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b990:	d10a      	bne.n	800b9a8 <prvAddCurrentTaskToDelayedList+0x58>
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b998:	4b1a      	ldr	r3, [pc, #104]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4619      	mov	r1, r3
 800b9a0:	481a      	ldr	r0, [pc, #104]	; (800ba0c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b9a2:	f7fe fb37 	bl	800a014 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9a6:	e026      	b.n	800b9f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9b0:	4b14      	ldr	r3, [pc, #80]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d209      	bcs.n	800b9d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9c0:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7fe fb45 	bl	800a05c <vListInsert>
}
 800b9d2:	e010      	b.n	800b9f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ba14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	f7fe fb3b 	bl	800a05c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d202      	bcs.n	800b9f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b9f0:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6013      	str	r3, [r2, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20002518 	.word	0x20002518
 800ba04:	2000230c 	.word	0x2000230c
 800ba08:	2000251c 	.word	0x2000251c
 800ba0c:	200024fc 	.word	0x200024fc
 800ba10:	200024cc 	.word	0x200024cc
 800ba14:	200024c8 	.word	0x200024c8
 800ba18:	20002534 	.word	0x20002534

0800ba1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	; 0x28
 800ba20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba26:	f000 fb07 	bl	800c038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba2a:	4b1c      	ldr	r3, [pc, #112]	; (800ba9c <xTimerCreateTimerTask+0x80>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d021      	beq.n	800ba76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba3a:	1d3a      	adds	r2, r7, #4
 800ba3c:	f107 0108 	add.w	r1, r7, #8
 800ba40:	f107 030c 	add.w	r3, r7, #12
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f5 fe1b 	bl	8001680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	9202      	str	r2, [sp, #8]
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	2301      	movs	r3, #1
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	460a      	mov	r2, r1
 800ba5c:	4910      	ldr	r1, [pc, #64]	; (800baa0 <xTimerCreateTimerTask+0x84>)
 800ba5e:	4811      	ldr	r0, [pc, #68]	; (800baa4 <xTimerCreateTimerTask+0x88>)
 800ba60:	f7ff f84c 	bl	800aafc <xTaskCreateStatic>
 800ba64:	4603      	mov	r3, r0
 800ba66:	4a10      	ldr	r2, [pc, #64]	; (800baa8 <xTimerCreateTimerTask+0x8c>)
 800ba68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba6a:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <xTimerCreateTimerTask+0x8c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba72:	2301      	movs	r3, #1
 800ba74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10a      	bne.n	800ba92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	613b      	str	r3, [r7, #16]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba92:	697b      	ldr	r3, [r7, #20]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3718      	adds	r7, #24
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	20002578 	.word	0x20002578
 800baa0:	0800dc60 	.word	0x0800dc60
 800baa4:	0800bbe1 	.word	0x0800bbe1
 800baa8:	2000257c 	.word	0x2000257c

0800baac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08a      	sub	sp, #40	; 0x28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baba:	2300      	movs	r3, #0
 800babc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10a      	bne.n	800bada <xTimerGenericCommand+0x2e>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	623b      	str	r3, [r7, #32]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bada:	4b1a      	ldr	r3, [pc, #104]	; (800bb44 <xTimerGenericCommand+0x98>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d02a      	beq.n	800bb38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2b05      	cmp	r3, #5
 800baf2:	dc18      	bgt.n	800bb26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800baf4:	f7ff fe88 	bl	800b808 <xTaskGetSchedulerState>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d109      	bne.n	800bb12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bafe:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <xTimerGenericCommand+0x98>)
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	f107 0110 	add.w	r1, r7, #16
 800bb06:	2300      	movs	r3, #0
 800bb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0a:	f7fe fc0f 	bl	800a32c <xQueueGenericSend>
 800bb0e:	6278      	str	r0, [r7, #36]	; 0x24
 800bb10:	e012      	b.n	800bb38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb12:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <xTimerGenericCommand+0x98>)
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	f107 0110 	add.w	r1, r7, #16
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f7fe fc05 	bl	800a32c <xQueueGenericSend>
 800bb22:	6278      	str	r0, [r7, #36]	; 0x24
 800bb24:	e008      	b.n	800bb38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb26:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <xTimerGenericCommand+0x98>)
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f107 0110 	add.w	r1, r7, #16
 800bb2e:	2300      	movs	r3, #0
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	f7fe fcf9 	bl	800a528 <xQueueGenericSendFromISR>
 800bb36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3728      	adds	r7, #40	; 0x28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	20002578 	.word	0x20002578

0800bb48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb52:	4b22      	ldr	r3, [pc, #136]	; (800bbdc <prvProcessExpiredTimer+0x94>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe fab4 	bl	800a0ce <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb6c:	f003 0304 	and.w	r3, r3, #4
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d022      	beq.n	800bbba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	699a      	ldr	r2, [r3, #24]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	18d1      	adds	r1, r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	6978      	ldr	r0, [r7, #20]
 800bb82:	f000 f8d1 	bl	800bd28 <prvInsertTimerInActiveList>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01f      	beq.n	800bbcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	2300      	movs	r3, #0
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	2100      	movs	r1, #0
 800bb96:	6978      	ldr	r0, [r7, #20]
 800bb98:	f7ff ff88 	bl	800baac <xTimerGenericCommand>
 800bb9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d113      	bne.n	800bbcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	60fb      	str	r3, [r7, #12]
}
 800bbb6:	bf00      	nop
 800bbb8:	e7fe      	b.n	800bbb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc0:	f023 0301 	bic.w	r3, r3, #1
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	6978      	ldr	r0, [r7, #20]
 800bbd2:	4798      	blx	r3
}
 800bbd4:	bf00      	nop
 800bbd6:	3718      	adds	r7, #24
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20002570 	.word	0x20002570

0800bbe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbe8:	f107 0308 	add.w	r3, r7, #8
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 f857 	bl	800bca0 <prvGetNextExpireTime>
 800bbf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f803 	bl	800bc04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbfe:	f000 f8d5 	bl	800bdac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc02:	e7f1      	b.n	800bbe8 <prvTimerTask+0x8>

0800bc04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc0e:	f7ff f9db 	bl	800afc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f866 	bl	800bce8 <prvSampleTimeNow>
 800bc1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d130      	bne.n	800bc86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <prvProcessTimerOrBlockTask+0x3c>
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d806      	bhi.n	800bc40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc32:	f7ff f9d7 	bl	800afe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff ff85 	bl	800bb48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc3e:	e024      	b.n	800bc8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d008      	beq.n	800bc58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc46:	4b13      	ldr	r3, [pc, #76]	; (800bc94 <prvProcessTimerOrBlockTask+0x90>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <prvProcessTimerOrBlockTask+0x50>
 800bc50:	2301      	movs	r3, #1
 800bc52:	e000      	b.n	800bc56 <prvProcessTimerOrBlockTask+0x52>
 800bc54:	2300      	movs	r3, #0
 800bc56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc58:	4b0f      	ldr	r3, [pc, #60]	; (800bc98 <prvProcessTimerOrBlockTask+0x94>)
 800bc5a:	6818      	ldr	r0, [r3, #0]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4619      	mov	r1, r3
 800bc66:	f7fe ff15 	bl	800aa94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc6a:	f7ff f9bb 	bl	800afe4 <xTaskResumeAll>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc74:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <prvProcessTimerOrBlockTask+0x98>)
 800bc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	f3bf 8f6f 	isb	sy
}
 800bc84:	e001      	b.n	800bc8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc86:	f7ff f9ad 	bl	800afe4 <xTaskResumeAll>
}
 800bc8a:	bf00      	nop
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20002574 	.word	0x20002574
 800bc98:	20002578 	.word	0x20002578
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bca8:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <prvGetNextExpireTime+0x44>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <prvGetNextExpireTime+0x16>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	e000      	b.n	800bcb8 <prvGetNextExpireTime+0x18>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d105      	bne.n	800bcd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcc4:	4b07      	ldr	r3, [pc, #28]	; (800bce4 <prvGetNextExpireTime+0x44>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	60fb      	str	r3, [r7, #12]
 800bcce:	e001      	b.n	800bcd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20002570 	.word	0x20002570

0800bce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcf0:	f7ff fa14 	bl	800b11c <xTaskGetTickCount>
 800bcf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	; (800bd24 <prvSampleTimeNow+0x3c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d205      	bcs.n	800bd0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd00:	f000 f936 	bl	800bf70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e002      	b.n	800bd12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd12:	4a04      	ldr	r2, [pc, #16]	; (800bd24 <prvSampleTimeNow+0x3c>)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd18:	68fb      	ldr	r3, [r7, #12]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20002580 	.word	0x20002580

0800bd28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d812      	bhi.n	800bd74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	1ad2      	subs	r2, r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d302      	bcc.n	800bd62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e01b      	b.n	800bd9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd62:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <prvInsertTimerInActiveList+0x7c>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	f7fe f975 	bl	800a05c <vListInsert>
 800bd72:	e012      	b.n	800bd9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d206      	bcs.n	800bd8a <prvInsertTimerInActiveList+0x62>
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d302      	bcc.n	800bd8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd84:	2301      	movs	r3, #1
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	e007      	b.n	800bd9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd8a:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <prvInsertTimerInActiveList+0x80>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7fe f961 	bl	800a05c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd9a:	697b      	ldr	r3, [r7, #20]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20002574 	.word	0x20002574
 800bda8:	20002570 	.word	0x20002570

0800bdac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08e      	sub	sp, #56	; 0x38
 800bdb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdb2:	e0ca      	b.n	800bf4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	da18      	bge.n	800bdec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdba:	1d3b      	adds	r3, r7, #4
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	61fb      	str	r3, [r7, #28]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde2:	6850      	ldr	r0, [r2, #4]
 800bde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bde6:	6892      	ldr	r2, [r2, #8]
 800bde8:	4611      	mov	r1, r2
 800bdea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f2c0 80ab 	blt.w	800bf4a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	3304      	adds	r3, #4
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe f962 	bl	800a0ce <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be0a:	463b      	mov	r3, r7
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff ff6b 	bl	800bce8 <prvSampleTimeNow>
 800be12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b09      	cmp	r3, #9
 800be18:	f200 8096 	bhi.w	800bf48 <prvProcessReceivedCommands+0x19c>
 800be1c:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <prvProcessReceivedCommands+0x78>)
 800be1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be22:	bf00      	nop
 800be24:	0800be4d 	.word	0x0800be4d
 800be28:	0800be4d 	.word	0x0800be4d
 800be2c:	0800be4d 	.word	0x0800be4d
 800be30:	0800bec1 	.word	0x0800bec1
 800be34:	0800bed5 	.word	0x0800bed5
 800be38:	0800bf1f 	.word	0x0800bf1f
 800be3c:	0800be4d 	.word	0x0800be4d
 800be40:	0800be4d 	.word	0x0800be4d
 800be44:	0800bec1 	.word	0x0800bec1
 800be48:	0800bed5 	.word	0x0800bed5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be52:	f043 0301 	orr.w	r3, r3, #1
 800be56:	b2da      	uxtb	r2, r3
 800be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	18d1      	adds	r1, r2, r3
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be6c:	f7ff ff5c 	bl	800bd28 <prvInsertTimerInActiveList>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d069      	beq.n	800bf4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d05e      	beq.n	800bf4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	441a      	add	r2, r3
 800be94:	2300      	movs	r3, #0
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	2300      	movs	r3, #0
 800be9a:	2100      	movs	r1, #0
 800be9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be9e:	f7ff fe05 	bl	800baac <xTimerGenericCommand>
 800bea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d14f      	bne.n	800bf4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	61bb      	str	r3, [r7, #24]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bec6:	f023 0301 	bic.w	r3, r3, #1
 800beca:	b2da      	uxtb	r2, r3
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bed2:	e03a      	b.n	800bf4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beda:	f043 0301 	orr.w	r3, r3, #1
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	617b      	str	r3, [r7, #20]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	699a      	ldr	r2, [r3, #24]
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	18d1      	adds	r1, r2, r3
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf18:	f7ff ff06 	bl	800bd28 <prvInsertTimerInActiveList>
					break;
 800bf1c:	e015      	b.n	800bf4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf24:	f003 0302 	and.w	r3, r3, #2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d103      	bne.n	800bf34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf2e:	f000 fbdf 	bl	800c6f0 <vPortFree>
 800bf32:	e00a      	b.n	800bf4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf3a:	f023 0301 	bic.w	r3, r3, #1
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf46:	e000      	b.n	800bf4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf4a:	4b08      	ldr	r3, [pc, #32]	; (800bf6c <prvProcessReceivedCommands+0x1c0>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1d39      	adds	r1, r7, #4
 800bf50:	2200      	movs	r2, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe fb84 	bl	800a660 <xQueueReceive>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f47f af2a 	bne.w	800bdb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	3730      	adds	r7, #48	; 0x30
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20002578 	.word	0x20002578

0800bf70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf76:	e048      	b.n	800c00a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf78:	4b2d      	ldr	r3, [pc, #180]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf82:	4b2b      	ldr	r3, [pc, #172]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe f89c 	bl	800a0ce <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d02e      	beq.n	800c00a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d90e      	bls.n	800bfdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfca:	4b19      	ldr	r3, [pc, #100]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f7fe f841 	bl	800a05c <vListInsert>
 800bfda:	e016      	b.n	800c00a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f7ff fd60 	bl	800baac <xTimerGenericCommand>
 800bfec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	603b      	str	r3, [r7, #0]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1b1      	bne.n	800bf78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c014:	4b06      	ldr	r3, [pc, #24]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <prvSwitchTimerLists+0xc4>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a04      	ldr	r2, [pc, #16]	; (800c030 <prvSwitchTimerLists+0xc0>)
 800c020:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c022:	4a04      	ldr	r2, [pc, #16]	; (800c034 <prvSwitchTimerLists+0xc4>)
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	6013      	str	r3, [r2, #0]
}
 800c028:	bf00      	nop
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20002570 	.word	0x20002570
 800c034:	20002574 	.word	0x20002574

0800c038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c03e:	f000 f969 	bl	800c314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c042:	4b15      	ldr	r3, [pc, #84]	; (800c098 <prvCheckForValidListAndQueue+0x60>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d120      	bne.n	800c08c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c04a:	4814      	ldr	r0, [pc, #80]	; (800c09c <prvCheckForValidListAndQueue+0x64>)
 800c04c:	f7fd ffb5 	bl	8009fba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c050:	4813      	ldr	r0, [pc, #76]	; (800c0a0 <prvCheckForValidListAndQueue+0x68>)
 800c052:	f7fd ffb2 	bl	8009fba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c056:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <prvCheckForValidListAndQueue+0x6c>)
 800c058:	4a10      	ldr	r2, [pc, #64]	; (800c09c <prvCheckForValidListAndQueue+0x64>)
 800c05a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <prvCheckForValidListAndQueue+0x70>)
 800c05e:	4a10      	ldr	r2, [pc, #64]	; (800c0a0 <prvCheckForValidListAndQueue+0x68>)
 800c060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c062:	2300      	movs	r3, #0
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	4b11      	ldr	r3, [pc, #68]	; (800c0ac <prvCheckForValidListAndQueue+0x74>)
 800c068:	4a11      	ldr	r2, [pc, #68]	; (800c0b0 <prvCheckForValidListAndQueue+0x78>)
 800c06a:	2110      	movs	r1, #16
 800c06c:	2014      	movs	r0, #20
 800c06e:	f7fe f8c1 	bl	800a1f4 <xQueueGenericCreateStatic>
 800c072:	4603      	mov	r3, r0
 800c074:	4a08      	ldr	r2, [pc, #32]	; (800c098 <prvCheckForValidListAndQueue+0x60>)
 800c076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <prvCheckForValidListAndQueue+0x60>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c080:	4b05      	ldr	r3, [pc, #20]	; (800c098 <prvCheckForValidListAndQueue+0x60>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	490b      	ldr	r1, [pc, #44]	; (800c0b4 <prvCheckForValidListAndQueue+0x7c>)
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fcda 	bl	800aa40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c08c:	f000 f972 	bl	800c374 <vPortExitCritical>
}
 800c090:	bf00      	nop
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20002578 	.word	0x20002578
 800c09c:	20002548 	.word	0x20002548
 800c0a0:	2000255c 	.word	0x2000255c
 800c0a4:	20002570 	.word	0x20002570
 800c0a8:	20002574 	.word	0x20002574
 800c0ac:	200026c4 	.word	0x200026c4
 800c0b0:	20002584 	.word	0x20002584
 800c0b4:	0800dc68 	.word	0x0800dc68

0800c0b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b04      	subs	r3, #4
 800c0c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3b04      	subs	r3, #4
 800c0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f023 0201 	bic.w	r2, r3, #1
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3b04      	subs	r3, #4
 800c0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0e8:	4a0c      	ldr	r2, [pc, #48]	; (800c11c <pxPortInitialiseStack+0x64>)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	3b14      	subs	r3, #20
 800c0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3b04      	subs	r3, #4
 800c0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f06f 0202 	mvn.w	r2, #2
 800c106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3b20      	subs	r3, #32
 800c10c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c10e:	68fb      	ldr	r3, [r7, #12]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	0800c121 	.word	0x0800c121

0800c120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c12a:	4b12      	ldr	r3, [pc, #72]	; (800c174 <prvTaskExitError+0x54>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c132:	d00a      	beq.n	800c14a <prvTaskExitError+0x2a>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	f383 8811 	msr	BASEPRI, r3
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f3bf 8f4f 	dsb	sy
 800c144:	60fb      	str	r3, [r7, #12]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <prvTaskExitError+0x28>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	60bb      	str	r3, [r7, #8]
}
 800c15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c15e:	bf00      	nop
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0fc      	beq.n	800c160 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c166:	bf00      	nop
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	2000030c 	.word	0x2000030c
	...

0800c180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <pxCurrentTCBConst2>)
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	f380 8809 	msr	PSP, r0
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	4770      	bx	lr
 800c19c:	f3af 8000 	nop.w

0800c1a0 <pxCurrentTCBConst2>:
 800c1a0:	2000230c 	.word	0x2000230c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop

0800c1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1a8:	4808      	ldr	r0, [pc, #32]	; (800c1cc <prvPortStartFirstTask+0x24>)
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	6800      	ldr	r0, [r0, #0]
 800c1ae:	f380 8808 	msr	MSP, r0
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8814 	msr	CONTROL, r0
 800c1ba:	b662      	cpsie	i
 800c1bc:	b661      	cpsie	f
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	df00      	svc	0
 800c1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed08 	.word	0xe000ed08

0800c1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1d6:	4b46      	ldr	r3, [pc, #280]	; (800c2f0 <xPortStartScheduler+0x120>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a46      	ldr	r2, [pc, #280]	; (800c2f4 <xPortStartScheduler+0x124>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10a      	bne.n	800c1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1f6:	4b3e      	ldr	r3, [pc, #248]	; (800c2f0 <xPortStartScheduler+0x120>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a3f      	ldr	r2, [pc, #252]	; (800c2f8 <xPortStartScheduler+0x128>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d10a      	bne.n	800c216 <xPortStartScheduler+0x46>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	60fb      	str	r3, [r7, #12]
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c216:	4b39      	ldr	r3, [pc, #228]	; (800c2fc <xPortStartScheduler+0x12c>)
 800c218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	22ff      	movs	r2, #255	; 0xff
 800c226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	4b31      	ldr	r3, [pc, #196]	; (800c300 <xPortStartScheduler+0x130>)
 800c23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c23e:	4b31      	ldr	r3, [pc, #196]	; (800c304 <xPortStartScheduler+0x134>)
 800c240:	2207      	movs	r2, #7
 800c242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c244:	e009      	b.n	800c25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c246:	4b2f      	ldr	r3, [pc, #188]	; (800c304 <xPortStartScheduler+0x134>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3b01      	subs	r3, #1
 800c24c:	4a2d      	ldr	r2, [pc, #180]	; (800c304 <xPortStartScheduler+0x134>)
 800c24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	b2db      	uxtb	r3, r3
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	b2db      	uxtb	r3, r3
 800c258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c25a:	78fb      	ldrb	r3, [r7, #3]
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c262:	2b80      	cmp	r3, #128	; 0x80
 800c264:	d0ef      	beq.n	800c246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c266:	4b27      	ldr	r3, [pc, #156]	; (800c304 <xPortStartScheduler+0x134>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f1c3 0307 	rsb	r3, r3, #7
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d00a      	beq.n	800c288 <xPortStartScheduler+0xb8>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	60bb      	str	r3, [r7, #8]
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c288:	4b1e      	ldr	r3, [pc, #120]	; (800c304 <xPortStartScheduler+0x134>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	4a1d      	ldr	r2, [pc, #116]	; (800c304 <xPortStartScheduler+0x134>)
 800c290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c292:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <xPortStartScheduler+0x134>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c29a:	4a1a      	ldr	r2, [pc, #104]	; (800c304 <xPortStartScheduler+0x134>)
 800c29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2a6:	4b18      	ldr	r3, [pc, #96]	; (800c308 <xPortStartScheduler+0x138>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a17      	ldr	r2, [pc, #92]	; (800c308 <xPortStartScheduler+0x138>)
 800c2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2b2:	4b15      	ldr	r3, [pc, #84]	; (800c308 <xPortStartScheduler+0x138>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a14      	ldr	r2, [pc, #80]	; (800c308 <xPortStartScheduler+0x138>)
 800c2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2be:	f000 f8dd 	bl	800c47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2c2:	4b12      	ldr	r3, [pc, #72]	; (800c30c <xPortStartScheduler+0x13c>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2c8:	f000 f8fc 	bl	800c4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2cc:	4b10      	ldr	r3, [pc, #64]	; (800c310 <xPortStartScheduler+0x140>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <xPortStartScheduler+0x140>)
 800c2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2d8:	f7ff ff66 	bl	800c1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2dc:	f7fe ffe6 	bl	800b2ac <vTaskSwitchContext>
	prvTaskExitError();
 800c2e0:	f7ff ff1e 	bl	800c120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2e4:	2300      	movs	r3, #0
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	e000ed00 	.word	0xe000ed00
 800c2f4:	410fc271 	.word	0x410fc271
 800c2f8:	410fc270 	.word	0x410fc270
 800c2fc:	e000e400 	.word	0xe000e400
 800c300:	20002714 	.word	0x20002714
 800c304:	20002718 	.word	0x20002718
 800c308:	e000ed20 	.word	0xe000ed20
 800c30c:	2000030c 	.word	0x2000030c
 800c310:	e000ef34 	.word	0xe000ef34

0800c314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	607b      	str	r3, [r7, #4]
}
 800c32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <vPortEnterCritical+0x58>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3301      	adds	r3, #1
 800c334:	4a0d      	ldr	r2, [pc, #52]	; (800c36c <vPortEnterCritical+0x58>)
 800c336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c338:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <vPortEnterCritical+0x58>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d10f      	bne.n	800c360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <vPortEnterCritical+0x5c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <vPortEnterCritical+0x4c>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	603b      	str	r3, [r7, #0]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <vPortEnterCritical+0x4a>
	}
}
 800c360:	bf00      	nop
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	2000030c 	.word	0x2000030c
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c37a:	4b12      	ldr	r3, [pc, #72]	; (800c3c4 <vPortExitCritical+0x50>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <vPortExitCritical+0x24>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	607b      	str	r3, [r7, #4]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <vPortExitCritical+0x50>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	4a09      	ldr	r2, [pc, #36]	; (800c3c4 <vPortExitCritical+0x50>)
 800c3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d105      	bne.n	800c3b6 <vPortExitCritical+0x42>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	f383 8811 	msr	BASEPRI, r3
}
 800c3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2000030c 	.word	0x2000030c
	...

0800c3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3d0:	f3ef 8009 	mrs	r0, PSP
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4b15      	ldr	r3, [pc, #84]	; (800c430 <pxCurrentTCBConst>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f01e 0f10 	tst.w	lr, #16
 800c3e0:	bf08      	it	eq
 800c3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	6010      	str	r0, [r2, #0]
 800c3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3f4:	f380 8811 	msr	BASEPRI, r0
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f7fe ff54 	bl	800b2ac <vTaskSwitchContext>
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f380 8811 	msr	BASEPRI, r0
 800c40c:	bc09      	pop	{r0, r3}
 800c40e:	6819      	ldr	r1, [r3, #0]
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c416:	f01e 0f10 	tst.w	lr, #16
 800c41a:	bf08      	it	eq
 800c41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c420:	f380 8809 	msr	PSP, r0
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst>:
 800c430:	2000230c 	.word	0x2000230c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c452:	f7fe fe73 	bl	800b13c <xTaskIncrementTick>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c45c:	4b06      	ldr	r3, [pc, #24]	; (800c478 <xPortSysTickHandler+0x40>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f383 8811 	msr	BASEPRI, r3
}
 800c46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c480:	4b0b      	ldr	r3, [pc, #44]	; (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c486:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <vPortSetupTimerInterrupt+0x38>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	; (800c4b8 <vPortSetupTimerInterrupt+0x3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0a      	ldr	r2, [pc, #40]	; (800c4bc <vPortSetupTimerInterrupt+0x40>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	099b      	lsrs	r3, r3, #6
 800c498:	4a09      	ldr	r2, [pc, #36]	; (800c4c0 <vPortSetupTimerInterrupt+0x44>)
 800c49a:	3b01      	subs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c49e:	4b04      	ldr	r3, [pc, #16]	; (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	e000e010 	.word	0xe000e010
 800c4b4:	e000e018 	.word	0xe000e018
 800c4b8:	20000274 	.word	0x20000274
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	e000e014 	.word	0xe000e014

0800c4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4d4 <vPortEnableVFP+0x10>
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4ce:	6001      	str	r1, [r0, #0]
 800c4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4d2:	bf00      	nop
 800c4d4:	e000ed88 	.word	0xe000ed88

0800c4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d914      	bls.n	800c514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ea:	4a17      	ldr	r2, [pc, #92]	; (800c548 <vPortValidateInterruptPriority+0x70>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4f4:	4b15      	ldr	r3, [pc, #84]	; (800c54c <vPortValidateInterruptPriority+0x74>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d20a      	bcs.n	800c514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c514:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <vPortValidateInterruptPriority+0x78>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c51c:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <vPortValidateInterruptPriority+0x7c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	429a      	cmp	r2, r3
 800c522:	d90a      	bls.n	800c53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	603b      	str	r3, [r7, #0]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <vPortValidateInterruptPriority+0x60>
	}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	e000e3f0 	.word	0xe000e3f0
 800c54c:	20002714 	.word	0x20002714
 800c550:	e000ed0c 	.word	0xe000ed0c
 800c554:	20002718 	.word	0x20002718

0800c558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c564:	f7fe fd30 	bl	800afc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c568:	4b5b      	ldr	r3, [pc, #364]	; (800c6d8 <pvPortMalloc+0x180>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c570:	f000 f920 	bl	800c7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c574:	4b59      	ldr	r3, [pc, #356]	; (800c6dc <pvPortMalloc+0x184>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4013      	ands	r3, r2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f040 8093 	bne.w	800c6a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01d      	beq.n	800c5c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c588:	2208      	movs	r2, #8
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f003 0307 	and.w	r3, r3, #7
 800c596:	2b00      	cmp	r3, #0
 800c598:	d014      	beq.n	800c5c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f023 0307 	bic.w	r3, r3, #7
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00a      	beq.n	800c5c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	617b      	str	r3, [r7, #20]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d06e      	beq.n	800c6a8 <pvPortMalloc+0x150>
 800c5ca:	4b45      	ldr	r3, [pc, #276]	; (800c6e0 <pvPortMalloc+0x188>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d869      	bhi.n	800c6a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5d4:	4b43      	ldr	r3, [pc, #268]	; (800c6e4 <pvPortMalloc+0x18c>)
 800c5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5d8:	4b42      	ldr	r3, [pc, #264]	; (800c6e4 <pvPortMalloc+0x18c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5de:	e004      	b.n	800c5ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d903      	bls.n	800c5fc <pvPortMalloc+0xa4>
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f1      	bne.n	800c5e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5fc:	4b36      	ldr	r3, [pc, #216]	; (800c6d8 <pvPortMalloc+0x180>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c602:	429a      	cmp	r2, r3
 800c604:	d050      	beq.n	800c6a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2208      	movs	r2, #8
 800c60c:	4413      	add	r3, r2
 800c60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	1ad2      	subs	r2, r2, r3
 800c620:	2308      	movs	r3, #8
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	429a      	cmp	r2, r3
 800c626:	d91f      	bls.n	800c668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	f003 0307 	and.w	r3, r3, #7
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <pvPortMalloc+0xf8>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	613b      	str	r3, [r7, #16]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	1ad2      	subs	r2, r2, r3
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c662:	69b8      	ldr	r0, [r7, #24]
 800c664:	f000 f908 	bl	800c878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c668:	4b1d      	ldr	r3, [pc, #116]	; (800c6e0 <pvPortMalloc+0x188>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	4a1b      	ldr	r2, [pc, #108]	; (800c6e0 <pvPortMalloc+0x188>)
 800c674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c676:	4b1a      	ldr	r3, [pc, #104]	; (800c6e0 <pvPortMalloc+0x188>)
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	4b1b      	ldr	r3, [pc, #108]	; (800c6e8 <pvPortMalloc+0x190>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d203      	bcs.n	800c68a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c682:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <pvPortMalloc+0x188>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a18      	ldr	r2, [pc, #96]	; (800c6e8 <pvPortMalloc+0x190>)
 800c688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <pvPortMalloc+0x184>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	431a      	orrs	r2, r3
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	2200      	movs	r2, #0
 800c69c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <pvPortMalloc+0x194>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	4a11      	ldr	r2, [pc, #68]	; (800c6ec <pvPortMalloc+0x194>)
 800c6a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6a8:	f7fe fc9c 	bl	800afe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	f003 0307 	and.w	r3, r3, #7
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <pvPortMalloc+0x174>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60fb      	str	r3, [r7, #12]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <pvPortMalloc+0x172>
	return pvReturn;
 800c6cc:	69fb      	ldr	r3, [r7, #28]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3728      	adds	r7, #40	; 0x28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20006324 	.word	0x20006324
 800c6dc:	20006338 	.word	0x20006338
 800c6e0:	20006328 	.word	0x20006328
 800c6e4:	2000631c 	.word	0x2000631c
 800c6e8:	2000632c 	.word	0x2000632c
 800c6ec:	20006330 	.word	0x20006330

0800c6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d04d      	beq.n	800c79e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c702:	2308      	movs	r3, #8
 800c704:	425b      	negs	r3, r3
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <vPortFree+0xb8>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4013      	ands	r3, r2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <vPortFree+0x44>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00a      	beq.n	800c752 <vPortFree+0x62>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	60bb      	str	r3, [r7, #8]
}
 800c74e:	bf00      	nop
 800c750:	e7fe      	b.n	800c750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	685a      	ldr	r2, [r3, #4]
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <vPortFree+0xb8>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4013      	ands	r3, r2
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01e      	beq.n	800c79e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11a      	bne.n	800c79e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	4b0e      	ldr	r3, [pc, #56]	; (800c7a8 <vPortFree+0xb8>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	43db      	mvns	r3, r3
 800c772:	401a      	ands	r2, r3
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c778:	f7fe fc26 	bl	800afc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <vPortFree+0xbc>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4413      	add	r3, r2
 800c786:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <vPortFree+0xbc>)
 800c788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c78a:	6938      	ldr	r0, [r7, #16]
 800c78c:	f000 f874 	bl	800c878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c790:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <vPortFree+0xc0>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3301      	adds	r3, #1
 800c796:	4a06      	ldr	r2, [pc, #24]	; (800c7b0 <vPortFree+0xc0>)
 800c798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c79a:	f7fe fc23 	bl	800afe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c79e:	bf00      	nop
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20006338 	.word	0x20006338
 800c7ac:	20006328 	.word	0x20006328
 800c7b0:	20006334 	.word	0x20006334

0800c7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7c0:	4b27      	ldr	r3, [pc, #156]	; (800c860 <prvHeapInit+0xac>)
 800c7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00c      	beq.n	800c7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3307      	adds	r3, #7
 800c7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f023 0307 	bic.w	r3, r3, #7
 800c7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	4a1f      	ldr	r2, [pc, #124]	; (800c860 <prvHeapInit+0xac>)
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7ec:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <prvHeapInit+0xb0>)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <prvHeapInit+0xb0>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c800:	2208      	movs	r2, #8
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0307 	bic.w	r3, r3, #7
 800c80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4a15      	ldr	r2, [pc, #84]	; (800c868 <prvHeapInit+0xb4>)
 800c814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c816:	4b14      	ldr	r3, [pc, #80]	; (800c868 <prvHeapInit+0xb4>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2200      	movs	r2, #0
 800c81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <prvHeapInit+0xb4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	1ad2      	subs	r2, r2, r3
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvHeapInit+0xb4>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <prvHeapInit+0xb8>)
 800c842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	4a09      	ldr	r2, [pc, #36]	; (800c870 <prvHeapInit+0xbc>)
 800c84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c84c:	4b09      	ldr	r3, [pc, #36]	; (800c874 <prvHeapInit+0xc0>)
 800c84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c852:	601a      	str	r2, [r3, #0]
}
 800c854:	bf00      	nop
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	2000271c 	.word	0x2000271c
 800c864:	2000631c 	.word	0x2000631c
 800c868:	20006324 	.word	0x20006324
 800c86c:	2000632c 	.word	0x2000632c
 800c870:	20006328 	.word	0x20006328
 800c874:	20006338 	.word	0x20006338

0800c878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c880:	4b28      	ldr	r3, [pc, #160]	; (800c924 <prvInsertBlockIntoFreeList+0xac>)
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	e002      	b.n	800c88c <prvInsertBlockIntoFreeList+0x14>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d8f7      	bhi.n	800c886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d108      	bne.n	800c8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	441a      	add	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d118      	bne.n	800c900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d00d      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e008      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	; (800c928 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	e003      	b.n	800c908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d002      	beq.n	800c916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c916:	bf00      	nop
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	2000631c 	.word	0x2000631c
 800c928:	20006324 	.word	0x20006324

0800c92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c930:	2200      	movs	r2, #0
 800c932:	4912      	ldr	r1, [pc, #72]	; (800c97c <MX_USB_DEVICE_Init+0x50>)
 800c934:	4812      	ldr	r0, [pc, #72]	; (800c980 <MX_USB_DEVICE_Init+0x54>)
 800c936:	f7fb ffc9 	bl	80088cc <USBD_Init>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c940:	f7f5 f91c 	bl	8001b7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c944:	490f      	ldr	r1, [pc, #60]	; (800c984 <MX_USB_DEVICE_Init+0x58>)
 800c946:	480e      	ldr	r0, [pc, #56]	; (800c980 <MX_USB_DEVICE_Init+0x54>)
 800c948:	f7fb fff0 	bl	800892c <USBD_RegisterClass>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c952:	f7f5 f913 	bl	8001b7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c956:	490c      	ldr	r1, [pc, #48]	; (800c988 <MX_USB_DEVICE_Init+0x5c>)
 800c958:	4809      	ldr	r0, [pc, #36]	; (800c980 <MX_USB_DEVICE_Init+0x54>)
 800c95a:	f7fb ff27 	bl	80087ac <USBD_CDC_RegisterInterface>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d001      	beq.n	800c968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c964:	f7f5 f90a 	bl	8001b7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c968:	4805      	ldr	r0, [pc, #20]	; (800c980 <MX_USB_DEVICE_Init+0x54>)
 800c96a:	f7fc f815 	bl	8008998 <USBD_Start>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c974:	f7f5 f902 	bl	8001b7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c978:	bf00      	nop
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20000324 	.word	0x20000324
 800c980:	2000633c 	.word	0x2000633c
 800c984:	2000028c 	.word	0x2000028c
 800c988:	20000310 	.word	0x20000310

0800c98c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c990:	2200      	movs	r2, #0
 800c992:	4905      	ldr	r1, [pc, #20]	; (800c9a8 <CDC_Init_FS+0x1c>)
 800c994:	4805      	ldr	r0, [pc, #20]	; (800c9ac <CDC_Init_FS+0x20>)
 800c996:	f7fb ff23 	bl	80087e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c99a:	4905      	ldr	r1, [pc, #20]	; (800c9b0 <CDC_Init_FS+0x24>)
 800c99c:	4803      	ldr	r0, [pc, #12]	; (800c9ac <CDC_Init_FS+0x20>)
 800c99e:	f7fb ff41 	bl	8008824 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20006e18 	.word	0x20006e18
 800c9ac:	2000633c 	.word	0x2000633c
 800c9b0:	20006618 	.word	0x20006618

0800c9b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c9b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	6039      	str	r1, [r7, #0]
 800c9ce:	71fb      	strb	r3, [r7, #7]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	2b23      	cmp	r3, #35	; 0x23
 800c9d8:	d84a      	bhi.n	800ca70 <CDC_Control_FS+0xac>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <CDC_Control_FS+0x1c>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800ca71 	.word	0x0800ca71
 800c9e4:	0800ca71 	.word	0x0800ca71
 800c9e8:	0800ca71 	.word	0x0800ca71
 800c9ec:	0800ca71 	.word	0x0800ca71
 800c9f0:	0800ca71 	.word	0x0800ca71
 800c9f4:	0800ca71 	.word	0x0800ca71
 800c9f8:	0800ca71 	.word	0x0800ca71
 800c9fc:	0800ca71 	.word	0x0800ca71
 800ca00:	0800ca71 	.word	0x0800ca71
 800ca04:	0800ca71 	.word	0x0800ca71
 800ca08:	0800ca71 	.word	0x0800ca71
 800ca0c:	0800ca71 	.word	0x0800ca71
 800ca10:	0800ca71 	.word	0x0800ca71
 800ca14:	0800ca71 	.word	0x0800ca71
 800ca18:	0800ca71 	.word	0x0800ca71
 800ca1c:	0800ca71 	.word	0x0800ca71
 800ca20:	0800ca71 	.word	0x0800ca71
 800ca24:	0800ca71 	.word	0x0800ca71
 800ca28:	0800ca71 	.word	0x0800ca71
 800ca2c:	0800ca71 	.word	0x0800ca71
 800ca30:	0800ca71 	.word	0x0800ca71
 800ca34:	0800ca71 	.word	0x0800ca71
 800ca38:	0800ca71 	.word	0x0800ca71
 800ca3c:	0800ca71 	.word	0x0800ca71
 800ca40:	0800ca71 	.word	0x0800ca71
 800ca44:	0800ca71 	.word	0x0800ca71
 800ca48:	0800ca71 	.word	0x0800ca71
 800ca4c:	0800ca71 	.word	0x0800ca71
 800ca50:	0800ca71 	.word	0x0800ca71
 800ca54:	0800ca71 	.word	0x0800ca71
 800ca58:	0800ca71 	.word	0x0800ca71
 800ca5c:	0800ca71 	.word	0x0800ca71
 800ca60:	0800ca71 	.word	0x0800ca71
 800ca64:	0800ca71 	.word	0x0800ca71
 800ca68:	0800ca71 	.word	0x0800ca71
 800ca6c:	0800ca71 	.word	0x0800ca71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca70:	bf00      	nop
  }

  return (USBD_OK);
 800ca72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	4805      	ldr	r0, [pc, #20]	; (800caa4 <CDC_Receive_FS+0x24>)
 800ca8e:	f7fb fec9 	bl	8008824 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca92:	4804      	ldr	r0, [pc, #16]	; (800caa4 <CDC_Receive_FS+0x24>)
 800ca94:	f7fb fee4 	bl	8008860 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ca98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	2000633c 	.word	0x2000633c

0800caa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	4613      	mov	r3, r2
 800cab4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800caba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
	...

0800cacc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2212      	movs	r2, #18
 800cadc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cade:	4b03      	ldr	r3, [pc, #12]	; (800caec <USBD_FS_DeviceDescriptor+0x20>)
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	20000340 	.word	0x20000340

0800caf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	6039      	str	r1, [r7, #0]
 800cafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2204      	movs	r2, #4
 800cb00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb02:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20000354 	.word	0x20000354

0800cb14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	6039      	str	r1, [r7, #0]
 800cb1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	4907      	ldr	r1, [pc, #28]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb2a:	4808      	ldr	r0, [pc, #32]	; (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb2c:	f7fd f8e6 	bl	8009cfc <USBD_GetString>
 800cb30:	e004      	b.n	800cb3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4904      	ldr	r1, [pc, #16]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb36:	4805      	ldr	r0, [pc, #20]	; (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb38:	f7fd f8e0 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb3c:	4b02      	ldr	r3, [pc, #8]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20007618 	.word	0x20007618
 800cb4c:	0800dc70 	.word	0x0800dc70

0800cb50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	6039      	str	r1, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	4904      	ldr	r1, [pc, #16]	; (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb60:	4804      	ldr	r0, [pc, #16]	; (800cb74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb62:	f7fd f8cb 	bl	8009cfc <USBD_GetString>
  return USBD_StrDesc;
 800cb66:	4b02      	ldr	r3, [pc, #8]	; (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20007618 	.word	0x20007618
 800cb74:	0800dc88 	.word	0x0800dc88

0800cb78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	221a      	movs	r2, #26
 800cb88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb8a:	f000 f843 	bl	800cc14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb8e:	4b02      	ldr	r3, [pc, #8]	; (800cb98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20000358 	.word	0x20000358

0800cb9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	4907      	ldr	r1, [pc, #28]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbb2:	4808      	ldr	r0, [pc, #32]	; (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbb4:	f7fd f8a2 	bl	8009cfc <USBD_GetString>
 800cbb8:	e004      	b.n	800cbc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	4904      	ldr	r1, [pc, #16]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbbe:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbc0:	f7fd f89c 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20007618 	.word	0x20007618
 800cbd4:	0800dc9c 	.word	0x0800dc9c

0800cbd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4907      	ldr	r1, [pc, #28]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbee:	4808      	ldr	r0, [pc, #32]	; (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbf0:	f7fd f884 	bl	8009cfc <USBD_GetString>
 800cbf4:	e004      	b.n	800cc00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4904      	ldr	r1, [pc, #16]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbfa:	4805      	ldr	r0, [pc, #20]	; (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbfc:	f7fd f87e 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20007618 	.word	0x20007618
 800cc10:	0800dca8 	.word	0x0800dca8

0800cc14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <Get_SerialNum+0x44>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc20:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <Get_SerialNum+0x48>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <Get_SerialNum+0x4c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc3a:	2208      	movs	r2, #8
 800cc3c:	4909      	ldr	r1, [pc, #36]	; (800cc64 <Get_SerialNum+0x50>)
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 f814 	bl	800cc6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc44:	2204      	movs	r2, #4
 800cc46:	4908      	ldr	r1, [pc, #32]	; (800cc68 <Get_SerialNum+0x54>)
 800cc48:	68b8      	ldr	r0, [r7, #8]
 800cc4a:	f000 f80f 	bl	800cc6c <IntToUnicode>
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	1fff7a10 	.word	0x1fff7a10
 800cc5c:	1fff7a14 	.word	0x1fff7a14
 800cc60:	1fff7a18 	.word	0x1fff7a18
 800cc64:	2000035a 	.word	0x2000035a
 800cc68:	2000036a 	.word	0x2000036a

0800cc6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
 800cc82:	e027      	b.n	800ccd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	0f1b      	lsrs	r3, r3, #28
 800cc88:	2b09      	cmp	r3, #9
 800cc8a:	d80b      	bhi.n	800cca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	0f1b      	lsrs	r3, r3, #28
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4619      	mov	r1, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3230      	adds	r2, #48	; 0x30
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	e00a      	b.n	800ccba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	0f1b      	lsrs	r3, r3, #28
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4619      	mov	r1, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	440b      	add	r3, r1
 800ccb4:	3237      	adds	r2, #55	; 0x37
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	011b      	lsls	r3, r3, #4
 800ccbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	4413      	add	r3, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	75fb      	strb	r3, [r7, #23]
 800ccd4:	7dfa      	ldrb	r2, [r7, #23]
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d3d3      	bcc.n	800cc84 <IntToUnicode+0x18>
  }
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08a      	sub	sp, #40	; 0x28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccf4:	f107 0314 	add.w	r3, r7, #20
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	605a      	str	r2, [r3, #4]
 800ccfe:	609a      	str	r2, [r3, #8]
 800cd00:	60da      	str	r2, [r3, #12]
 800cd02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd0c:	d13a      	bne.n	800cd84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd0e:	2300      	movs	r3, #0
 800cd10:	613b      	str	r3, [r7, #16]
 800cd12:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	4a1d      	ldr	r2, [pc, #116]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd18:	f043 0301 	orr.w	r3, r3, #1
 800cd1c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd1e:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	613b      	str	r3, [r7, #16]
 800cd28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800cd2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cd2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd30:	2302      	movs	r3, #2
 800cd32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd3c:	230a      	movs	r3, #10
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd40:	f107 0314 	add.w	r3, r7, #20
 800cd44:	4619      	mov	r1, r3
 800cd46:	4812      	ldr	r0, [pc, #72]	; (800cd90 <HAL_PCD_MspInit+0xa4>)
 800cd48:	f7f6 fb1e 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd4c:	4b0f      	ldr	r3, [pc, #60]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd50:	4a0e      	ldr	r2, [pc, #56]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd56:	6353      	str	r3, [r2, #52]	; 0x34
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd66:	6453      	str	r3, [r2, #68]	; 0x44
 800cd68:	4b08      	ldr	r3, [pc, #32]	; (800cd8c <HAL_PCD_MspInit+0xa0>)
 800cd6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cd74:	2200      	movs	r2, #0
 800cd76:	2105      	movs	r1, #5
 800cd78:	2043      	movs	r0, #67	; 0x43
 800cd7a:	f7f5 ff52 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd7e:	2043      	movs	r0, #67	; 0x43
 800cd80:	f7f5 ff6b 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd84:	bf00      	nop
 800cd86:	3728      	adds	r7, #40	; 0x28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	40020000 	.word	0x40020000

0800cd94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fb fe41 	bl	8008a32 <USBD_LL_SetupStage>
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800cdca:	78fa      	ldrb	r2, [r7, #3]
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	00db      	lsls	r3, r3, #3
 800cdd2:	4413      	add	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	440b      	add	r3, r1
 800cdd8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	78fb      	ldrb	r3, [r7, #3]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f7fb fe7b 	bl	8008adc <USBD_LL_DataOutStage>
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ce00:	78fa      	ldrb	r2, [r7, #3]
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	00db      	lsls	r3, r3, #3
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3320      	adds	r3, #32
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	78fb      	ldrb	r3, [r7, #3]
 800ce14:	4619      	mov	r1, r3
 800ce16:	f7fb ff14 	bl	8008c42 <USBD_LL_DataInStage>
}
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fc f84e 	bl	8008ed2 <USBD_LL_SOF>
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce46:	2301      	movs	r3, #1
 800ce48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	79db      	ldrb	r3, [r3, #7]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d001      	beq.n	800ce56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce52:	f7f4 fe93 	bl	8001b7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ce5c:	7bfa      	ldrb	r2, [r7, #15]
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fb fff2 	bl	8008e4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fb ff9a 	bl	8008da6 <USBD_LL_Reset>
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fb ffed 	bl	8008e6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7adb      	ldrb	r3, [r3, #11]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb0:	4b04      	ldr	r3, [pc, #16]	; (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	4a03      	ldr	r2, [pc, #12]	; (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb6:	f043 0306 	orr.w	r3, r3, #6
 800ceba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed00 	.word	0xe000ed00

0800cec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fb ffe3 	bl	8008ea2 <USBD_LL_Resume>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fc f83b 	bl	8008f76 <USBD_LL_IsoOUTIncomplete>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf1a:	78fa      	ldrb	r2, [r7, #3]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fb fff7 	bl	8008f12 <USBD_LL_IsoINIncomplete>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fc f84d 	bl	8008fda <USBD_LL_DevConnected>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fc f84a 	bl	8008ff0 <USBD_LL_DevDisconnected>
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d13c      	bne.n	800cfee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf74:	4a20      	ldr	r2, [pc, #128]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf84:	4b1c      	ldr	r3, [pc, #112]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf8c:	4b1a      	ldr	r3, [pc, #104]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf8e:	2204      	movs	r2, #4
 800cf90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf92:	4b19      	ldr	r3, [pc, #100]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf94:	2202      	movs	r2, #2
 800cf96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf98:	4b17      	ldr	r3, [pc, #92]	; (800cff8 <USBD_LL_Init+0x94>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf9e:	4b16      	ldr	r3, [pc, #88]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfa4:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfaa:	4b13      	ldr	r3, [pc, #76]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfb0:	4b11      	ldr	r3, [pc, #68]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfbc:	4b0e      	ldr	r3, [pc, #56]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfc2:	480d      	ldr	r0, [pc, #52]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfc4:	f7f6 fb7d 	bl	80036c2 <HAL_PCD_Init>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cfce:	f7f4 fdd5 	bl	8001b7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cfd2:	2180      	movs	r1, #128	; 0x80
 800cfd4:	4808      	ldr	r0, [pc, #32]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfd6:	f7f7 fda8 	bl	8004b2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cfda:	2240      	movs	r2, #64	; 0x40
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4806      	ldr	r0, [pc, #24]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfe0:	f7f7 fd5c 	bl	8004a9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cfe4:	2280      	movs	r2, #128	; 0x80
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	4803      	ldr	r0, [pc, #12]	; (800cff8 <USBD_LL_Init+0x94>)
 800cfea:	f7f7 fd57 	bl	8004a9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20007818 	.word	0x20007818

0800cffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d012:	4618      	mov	r0, r3
 800d014:	f7f6 fc64 	bl	80038e0 <HAL_PCD_Start>
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 f942 	bl	800d2a8 <USBD_Get_USB_Status>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d028:	7bbb      	ldrb	r3, [r7, #14]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
 800d040:	4603      	mov	r3, r0
 800d042:	70fb      	strb	r3, [r7, #3]
 800d044:	460b      	mov	r3, r1
 800d046:	70bb      	strb	r3, [r7, #2]
 800d048:	4613      	mov	r3, r2
 800d04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d05a:	78bb      	ldrb	r3, [r7, #2]
 800d05c:	883a      	ldrh	r2, [r7, #0]
 800d05e:	78f9      	ldrb	r1, [r7, #3]
 800d060:	f7f7 f938 	bl	80042d4 <HAL_PCD_EP_Open>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f91c 	bl	800d2a8 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d074:	7bbb      	ldrb	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f7 f981 	bl	80043a4 <HAL_PCD_EP_Close>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 f8fd 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0d6:	78fa      	ldrb	r2, [r7, #3]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f7 fa39 	bl	8004552 <HAL_PCD_EP_SetStall>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f8de 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f7 fa7d 	bl	8004618 <HAL_PCD_EP_ClrStall>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 f8bf 	bl	800d2a8 <USBD_Get_USB_Status>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d150:	2b00      	cmp	r3, #0
 800d152:	da0b      	bge.n	800d16c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	3316      	adds	r3, #22
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	e00b      	b.n	800d184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d172:	68f9      	ldr	r1, [r7, #12]
 800d174:	4613      	mov	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800d182:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f7 f86c 	bl	800428c <HAL_PCD_SetAddress>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f874 	bl	800d2a8 <USBD_Get_USB_Status>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d1ec:	7af9      	ldrb	r1, [r7, #11]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	f7f7 f974 	bl	80044de <HAL_PCD_EP_Transmit>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f853 	bl	800d2a8 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d206:	7dbb      	ldrb	r3, [r7, #22]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	460b      	mov	r3, r1
 800d21e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d22e:	7af9      	ldrb	r1, [r7, #11]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	f7f7 f900 	bl	8004438 <HAL_PCD_EP_Receive>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f832 	bl	800d2a8 <USBD_Get_USB_Status>
 800d244:	4603      	mov	r3, r0
 800d246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d248:	7dbb      	ldrb	r3, [r7, #22]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f7 f920 	bl	80044ae <HAL_PCD_EP_GetRxCount>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d280:	4b03      	ldr	r3, [pc, #12]	; (800d290 <USBD_static_malloc+0x18>)
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20007cfc 	.word	0x20007cfc

0800d294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]

}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d817      	bhi.n	800d2ec <USBD_Get_USB_Status+0x44>
 800d2bc:	a201      	add	r2, pc, #4	; (adr r2, 800d2c4 <USBD_Get_USB_Status+0x1c>)
 800d2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c2:	bf00      	nop
 800d2c4:	0800d2d5 	.word	0x0800d2d5
 800d2c8:	0800d2db 	.word	0x0800d2db
 800d2cc:	0800d2e1 	.word	0x0800d2e1
 800d2d0:	0800d2e7 	.word	0x0800d2e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d8:	e00b      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d2de:	e008      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e4:	e005      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ea:	e002      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f0:	bf00      	nop
  }
  return usb_status;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <memset>:
 800d300:	4402      	add	r2, r0
 800d302:	4603      	mov	r3, r0
 800d304:	4293      	cmp	r3, r2
 800d306:	d100      	bne.n	800d30a <memset+0xa>
 800d308:	4770      	bx	lr
 800d30a:	f803 1b01 	strb.w	r1, [r3], #1
 800d30e:	e7f9      	b.n	800d304 <memset+0x4>

0800d310 <strncpy>:
 800d310:	b510      	push	{r4, lr}
 800d312:	3901      	subs	r1, #1
 800d314:	4603      	mov	r3, r0
 800d316:	b132      	cbz	r2, 800d326 <strncpy+0x16>
 800d318:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d31c:	f803 4b01 	strb.w	r4, [r3], #1
 800d320:	3a01      	subs	r2, #1
 800d322:	2c00      	cmp	r4, #0
 800d324:	d1f7      	bne.n	800d316 <strncpy+0x6>
 800d326:	441a      	add	r2, r3
 800d328:	2100      	movs	r1, #0
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d100      	bne.n	800d330 <strncpy+0x20>
 800d32e:	bd10      	pop	{r4, pc}
 800d330:	f803 1b01 	strb.w	r1, [r3], #1
 800d334:	e7f9      	b.n	800d32a <strncpy+0x1a>
	...

0800d338 <_reclaim_reent>:
 800d338:	4b29      	ldr	r3, [pc, #164]	; (800d3e0 <_reclaim_reent+0xa8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4283      	cmp	r3, r0
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	4604      	mov	r4, r0
 800d342:	d04b      	beq.n	800d3dc <_reclaim_reent+0xa4>
 800d344:	69c3      	ldr	r3, [r0, #28]
 800d346:	b143      	cbz	r3, 800d35a <_reclaim_reent+0x22>
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d144      	bne.n	800d3d8 <_reclaim_reent+0xa0>
 800d34e:	69e3      	ldr	r3, [r4, #28]
 800d350:	6819      	ldr	r1, [r3, #0]
 800d352:	b111      	cbz	r1, 800d35a <_reclaim_reent+0x22>
 800d354:	4620      	mov	r0, r4
 800d356:	f000 f879 	bl	800d44c <_free_r>
 800d35a:	6961      	ldr	r1, [r4, #20]
 800d35c:	b111      	cbz	r1, 800d364 <_reclaim_reent+0x2c>
 800d35e:	4620      	mov	r0, r4
 800d360:	f000 f874 	bl	800d44c <_free_r>
 800d364:	69e1      	ldr	r1, [r4, #28]
 800d366:	b111      	cbz	r1, 800d36e <_reclaim_reent+0x36>
 800d368:	4620      	mov	r0, r4
 800d36a:	f000 f86f 	bl	800d44c <_free_r>
 800d36e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d370:	b111      	cbz	r1, 800d378 <_reclaim_reent+0x40>
 800d372:	4620      	mov	r0, r4
 800d374:	f000 f86a 	bl	800d44c <_free_r>
 800d378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d37a:	b111      	cbz	r1, 800d382 <_reclaim_reent+0x4a>
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 f865 	bl	800d44c <_free_r>
 800d382:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d384:	b111      	cbz	r1, 800d38c <_reclaim_reent+0x54>
 800d386:	4620      	mov	r0, r4
 800d388:	f000 f860 	bl	800d44c <_free_r>
 800d38c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d38e:	b111      	cbz	r1, 800d396 <_reclaim_reent+0x5e>
 800d390:	4620      	mov	r0, r4
 800d392:	f000 f85b 	bl	800d44c <_free_r>
 800d396:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d398:	b111      	cbz	r1, 800d3a0 <_reclaim_reent+0x68>
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f856 	bl	800d44c <_free_r>
 800d3a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d3a2:	b111      	cbz	r1, 800d3aa <_reclaim_reent+0x72>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 f851 	bl	800d44c <_free_r>
 800d3aa:	6a23      	ldr	r3, [r4, #32]
 800d3ac:	b1b3      	cbz	r3, 800d3dc <_reclaim_reent+0xa4>
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3b4:	4718      	bx	r3
 800d3b6:	5949      	ldr	r1, [r1, r5]
 800d3b8:	b941      	cbnz	r1, 800d3cc <_reclaim_reent+0x94>
 800d3ba:	3504      	adds	r5, #4
 800d3bc:	69e3      	ldr	r3, [r4, #28]
 800d3be:	2d80      	cmp	r5, #128	; 0x80
 800d3c0:	68d9      	ldr	r1, [r3, #12]
 800d3c2:	d1f8      	bne.n	800d3b6 <_reclaim_reent+0x7e>
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f000 f841 	bl	800d44c <_free_r>
 800d3ca:	e7c0      	b.n	800d34e <_reclaim_reent+0x16>
 800d3cc:	680e      	ldr	r6, [r1, #0]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 f83c 	bl	800d44c <_free_r>
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	e7ef      	b.n	800d3b8 <_reclaim_reent+0x80>
 800d3d8:	2500      	movs	r5, #0
 800d3da:	e7ef      	b.n	800d3bc <_reclaim_reent+0x84>
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
 800d3de:	bf00      	nop
 800d3e0:	200003c0 	.word	0x200003c0

0800d3e4 <__libc_init_array>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	4d0d      	ldr	r5, [pc, #52]	; (800d41c <__libc_init_array+0x38>)
 800d3e8:	4c0d      	ldr	r4, [pc, #52]	; (800d420 <__libc_init_array+0x3c>)
 800d3ea:	1b64      	subs	r4, r4, r5
 800d3ec:	10a4      	asrs	r4, r4, #2
 800d3ee:	2600      	movs	r6, #0
 800d3f0:	42a6      	cmp	r6, r4
 800d3f2:	d109      	bne.n	800d408 <__libc_init_array+0x24>
 800d3f4:	4d0b      	ldr	r5, [pc, #44]	; (800d424 <__libc_init_array+0x40>)
 800d3f6:	4c0c      	ldr	r4, [pc, #48]	; (800d428 <__libc_init_array+0x44>)
 800d3f8:	f000 f880 	bl	800d4fc <_init>
 800d3fc:	1b64      	subs	r4, r4, r5
 800d3fe:	10a4      	asrs	r4, r4, #2
 800d400:	2600      	movs	r6, #0
 800d402:	42a6      	cmp	r6, r4
 800d404:	d105      	bne.n	800d412 <__libc_init_array+0x2e>
 800d406:	bd70      	pop	{r4, r5, r6, pc}
 800d408:	f855 3b04 	ldr.w	r3, [r5], #4
 800d40c:	4798      	blx	r3
 800d40e:	3601      	adds	r6, #1
 800d410:	e7ee      	b.n	800d3f0 <__libc_init_array+0xc>
 800d412:	f855 3b04 	ldr.w	r3, [r5], #4
 800d416:	4798      	blx	r3
 800d418:	3601      	adds	r6, #1
 800d41a:	e7f2      	b.n	800d402 <__libc_init_array+0x1e>
 800d41c:	0800dd90 	.word	0x0800dd90
 800d420:	0800dd90 	.word	0x0800dd90
 800d424:	0800dd90 	.word	0x0800dd90
 800d428:	0800dd94 	.word	0x0800dd94

0800d42c <__retarget_lock_acquire_recursive>:
 800d42c:	4770      	bx	lr

0800d42e <__retarget_lock_release_recursive>:
 800d42e:	4770      	bx	lr

0800d430 <memcpy>:
 800d430:	440a      	add	r2, r1
 800d432:	4291      	cmp	r1, r2
 800d434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d438:	d100      	bne.n	800d43c <memcpy+0xc>
 800d43a:	4770      	bx	lr
 800d43c:	b510      	push	{r4, lr}
 800d43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d442:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d446:	4291      	cmp	r1, r2
 800d448:	d1f9      	bne.n	800d43e <memcpy+0xe>
 800d44a:	bd10      	pop	{r4, pc}

0800d44c <_free_r>:
 800d44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d44e:	2900      	cmp	r1, #0
 800d450:	d044      	beq.n	800d4dc <_free_r+0x90>
 800d452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d456:	9001      	str	r0, [sp, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f1a1 0404 	sub.w	r4, r1, #4
 800d45e:	bfb8      	it	lt
 800d460:	18e4      	addlt	r4, r4, r3
 800d462:	f000 f83f 	bl	800d4e4 <__malloc_lock>
 800d466:	4a1e      	ldr	r2, [pc, #120]	; (800d4e0 <_free_r+0x94>)
 800d468:	9801      	ldr	r0, [sp, #4]
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	b933      	cbnz	r3, 800d47c <_free_r+0x30>
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	6014      	str	r4, [r2, #0]
 800d472:	b003      	add	sp, #12
 800d474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d478:	f000 b83a 	b.w	800d4f0 <__malloc_unlock>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d908      	bls.n	800d492 <_free_r+0x46>
 800d480:	6825      	ldr	r5, [r4, #0]
 800d482:	1961      	adds	r1, r4, r5
 800d484:	428b      	cmp	r3, r1
 800d486:	bf01      	itttt	eq
 800d488:	6819      	ldreq	r1, [r3, #0]
 800d48a:	685b      	ldreq	r3, [r3, #4]
 800d48c:	1949      	addeq	r1, r1, r5
 800d48e:	6021      	streq	r1, [r4, #0]
 800d490:	e7ed      	b.n	800d46e <_free_r+0x22>
 800d492:	461a      	mov	r2, r3
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	b10b      	cbz	r3, 800d49c <_free_r+0x50>
 800d498:	42a3      	cmp	r3, r4
 800d49a:	d9fa      	bls.n	800d492 <_free_r+0x46>
 800d49c:	6811      	ldr	r1, [r2, #0]
 800d49e:	1855      	adds	r5, r2, r1
 800d4a0:	42a5      	cmp	r5, r4
 800d4a2:	d10b      	bne.n	800d4bc <_free_r+0x70>
 800d4a4:	6824      	ldr	r4, [r4, #0]
 800d4a6:	4421      	add	r1, r4
 800d4a8:	1854      	adds	r4, r2, r1
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	d1e0      	bne.n	800d472 <_free_r+0x26>
 800d4b0:	681c      	ldr	r4, [r3, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	6053      	str	r3, [r2, #4]
 800d4b6:	440c      	add	r4, r1
 800d4b8:	6014      	str	r4, [r2, #0]
 800d4ba:	e7da      	b.n	800d472 <_free_r+0x26>
 800d4bc:	d902      	bls.n	800d4c4 <_free_r+0x78>
 800d4be:	230c      	movs	r3, #12
 800d4c0:	6003      	str	r3, [r0, #0]
 800d4c2:	e7d6      	b.n	800d472 <_free_r+0x26>
 800d4c4:	6825      	ldr	r5, [r4, #0]
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf04      	itt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	bf04      	itt	eq
 800d4d4:	1949      	addeq	r1, r1, r5
 800d4d6:	6021      	streq	r1, [r4, #0]
 800d4d8:	6054      	str	r4, [r2, #4]
 800d4da:	e7ca      	b.n	800d472 <_free_r+0x26>
 800d4dc:	b003      	add	sp, #12
 800d4de:	bd30      	pop	{r4, r5, pc}
 800d4e0:	20008058 	.word	0x20008058

0800d4e4 <__malloc_lock>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	; (800d4ec <__malloc_lock+0x8>)
 800d4e6:	f7ff bfa1 	b.w	800d42c <__retarget_lock_acquire_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	20008054 	.word	0x20008054

0800d4f0 <__malloc_unlock>:
 800d4f0:	4801      	ldr	r0, [pc, #4]	; (800d4f8 <__malloc_unlock+0x8>)
 800d4f2:	f7ff bf9c 	b.w	800d42e <__retarget_lock_release_recursive>
 800d4f6:	bf00      	nop
 800d4f8:	20008054 	.word	0x20008054

0800d4fc <_init>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr

0800d508 <_fini>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	bf00      	nop
 800d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50e:	bc08      	pop	{r3}
 800d510:	469e      	mov	lr, r3
 800d512:	4770      	bx	lr
